/*
 * NOTICE: Do not manually edit this file. It has been autogenerated by
 * protocol/parse.py. Any changes should me made there, instead of here.
 */
#pragma once
#include <string>
#include <cstddef>
#include <boost/signals2.hpp>
#include <boost/cstdint.hpp>
#include <boost/array.hpp>
#include <boost/tuple/tuple.hpp>
#include <util/buffer.h>

namespace packet {

// Handles the registration and dispatch to the various packet handlers
// around the nation.
class Registry
{
public:
	Registry();

	void dispatch(boost::uint16_t packetID,
	              const boost::uint8_t* parameters,
		      boost::uint16_t length);

	~Registry();

	// This signal is called when the parsing of a packet has failed. Do whatever you want in here.
	boost::signals2::signal<void (boost::uint16_t /* packetID */,
	                              const boost::uint8_t* /* rawParameters */,
	                              boost::uint16_t /* length */)> OnFailedParse;

	// Local information
	boost::signals2::signal<void ()> Local_Info;

	// Local echo test
	boost::signals2::signal<void (const std::string& /* Message */)> Local_Echo;

	// Local Login
	boost::signals2::signal<void (boost::uint64_t /* uidComm */, boost::uint64_t /* uidPlayer */)> Local_Login;

	// This command
	boost::signals2::signal<void ()> Help;

	// Version description
	boost::signals2::signal<void ()> Version;

	// Debug Test
	boost::signals2::signal<void ()> DebugTest;

	// Enum server list
	boost::signals2::signal<void ()> Net_Enum;

	// Connect to server
	boost::signals2::signal<void (const std::string& /* Address */)> Net_Connect;

	// Disconnect to server
	boost::signals2::signal<void ()> Net_Disconnect;

	// Clear Connection
	boost::signals2::signal<void (boost::uint64_t /* uid */)> Net_Clear;

	// Check ping time
	boost::signals2::signal<void (boost::uint64_t /* uid */)> Net_CheckPing;

	// Ping
	boost::signals2::signal<void (boost::uint32_t /* TimeStamp */)> Net_Ping;

	// Pong
	boost::signals2::signal<void (boost::uint32_t /* TimeStamp */)> Net_Pong;

	// Ping
	boost::signals2::signal<void (boost::uint32_t /* TimeStamp */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* CRCInfo */)> HShield_Ping;

	// Pong
	boost::signals2::signal<void (boost::uint32_t /* TimeStamp */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* AckMsg */)> HShield_Pong;

	// On Connect
	boost::signals2::signal<void ()> Net_OnConnect;

	// On Disconnect
	boost::signals2::signal<void ()> Net_OnDisConnect;

	// On Error
	boost::signals2::signal<void (boost::int32_t /* ErrorCode */)> Net_OnError;

	// Connect to zone-server
	boost::signals2::signal<void ()> Net_ConnectToZoneServer;

	// Request Net information
	boost::signals2::signal<void ()> Net_RequestInfo;

	// Response Net information
	boost::signals2::signal<void (const std::string& /* Information */)> Net_ResponseInfo;

	// Echo test
	boost::signals2::signal<void (const std::string& /* Message */)> Net_Echo;

	// Announce Server Message
	boost::signals2::signal<void (boost::uint32_t /* Type */, const std::string& /* Msg */)> Match_Announce;

	// Synchronize Clock
	boost::signals2::signal<void (boost::uint32_t /* GlobalClock_msec */)> Clock_Synchronize;

	// Login Match Server
	boost::signals2::signal<void (const std::string& /* UserID */, const std::string& /* Password */, boost::int32_t /* CommandVersion */, boost::uint32_t /* nChecksumPack */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* EncryptMD5Value */)> Match_Login;

	// Response Login
	boost::signals2::signal<void (boost::int32_t /* Result */, const std::string& /* ServerName */, const boost::array<boost::uint16_t, 3>& /* ServerMode */, const std::string& /* AccountID */, boost::uint8_t /* UGradeID */, boost::uint8_t /* PGradeID */, boost::uint64_t /* uidPlayer */, bool /* bEnabledSurvivalMode */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* EncryptMsg */)> Match_ResponseLogin;

	// Response Result
	boost::signals2::signal<void (boost::int32_t /* Result */)> Match_Response_Result;

	// Login from Netmarble
	boost::signals2::signal<void (const std::string& /* CPCookie */, const std::string& /* SpareParam */, boost::int32_t /* CommandVersion */, boost::uint32_t /* nChecksumPack */)> Match_LoginNetmarble;

	// Login from Netmarble Japan
	boost::signals2::signal<void (const std::string& /* LoginID */, const std::string& /* LoginPW */, boost::int32_t /* CommandVersion */, boost::uint32_t /* nChecksumPack */)> Match_LoginNetmarbleJP;

	// Login from DBAgent
	boost::signals2::signal<void (boost::uint64_t /* CommUID */, const std::string& /* LoginID */, const std::string& /* Name */, boost::int32_t /* Sex */, bool /* bFreeLoginIP */, boost::uint32_t /* nChecksumPack */)> Match_LoginFromDBAgent;

	// Login Failed from DBAgent
	boost::signals2::signal<void (boost::uint64_t /* CommUID */, boost::int32_t /* Result */)> Match_LoginFailedFromDBAgent;

	// FinH
	boost::signals2::signal<void ()> Match_FinH;

	// disconnect reason
	boost::signals2::signal<void (boost::uint32_t /* messageid */)> MC_MATCH_DISCONNMSG;

	// Login from nhn usa.
	boost::signals2::signal<void (const std::string& /* UserID */, const std::string& /* szAuthStr */, boost::int32_t /* CommandVersion */, boost::uint32_t /* nChecksumPack */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* EncryptMD5Value */)> MC_MATCH_LOGIN_NHNUSA;

	// Login from GameOn Japan
	boost::signals2::signal<void (const std::string& /* szString */, const std::string& /* szStatIndex */, boost::int32_t /* CommandVersion */, boost::uint32_t /* nChecksumPack */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* EncryptMD5Value */)> MC_MATCH_LOGIN_GAMEON_JP;

	// Match Object Cache
	boost::signals2::signal<void (boost::uint8_t /* Type */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* ObjectCache */)> Match_ObjectCache;

	// Match BridgePeer
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, boost::uint32_t /* dwIP */, boost::uint32_t /* nPort */)> Match_BridgePeer;

	// ACK for BridgePeer
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, boost::int32_t /* nCode */)> Match_BridgePeerACK;

	// Request recommanded channel
	boost::signals2::signal<void ()> MatchServer_RequestRecommandedChannel;

	// Response recommanded channel
	boost::signals2::signal<void (boost::uint64_t /* uid */)> MatchServer_ResponseRecommandedChannel;

	// Join a Channel
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, boost::uint64_t /* uidChannel */)> Channel_Join;

	// Response Join a Channel
	boost::signals2::signal<void (boost::uint64_t /* uidChannel */, boost::int32_t /* ChannelType */, const std::string& /* ChannelName */, bool /* EnableInterface */)> Channel_ResponseJoin;

	// Join a Channel From Name
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, boost::int32_t /* nChannelType */, boost::int32_t /* zero */, const std::string& /* ChannelName */)> Channel_RequestJoinFromName;

	// Leave Channel
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, boost::uint64_t /* uidChannel */)> Channel_Leave;

	// Channel List transmit start
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, boost::int32_t /* nChannelType */, boost::int32_t /* zero */)> Channel_ListStart;

	// Channel List transmit stop
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */)> Channel_ListStop;

	// Channel List
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* ChannelList */)> Channel_List;

	// Request Chat to Channel
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, boost::uint64_t /* uidChannel */, const std::string& /* Chat */)> Channel_Request_Chat;

	// Chat to Channel
	boost::signals2::signal<void (boost::uint64_t /* uidChannel */, const std::string& /* PlayerName */, const std::string& /* Chat */, boost::int32_t /* nGrade */)> Channel_Chat;

	// Notify to Dumb Player
	boost::signals2::signal<void ()> Channel_PlayerDumb;

	// Request the Channel Rule
	boost::signals2::signal<void (boost::uint64_t /* uidChannel */)> Channel_Request_Rule;

	// Response the Channel Rule
	boost::signals2::signal<void (boost::uint64_t /* uidChannel */, const std::string& /* RuleName */)> Channel_Response_Rule;

	// Request Channel All Player List
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, boost::uint64_t /* uidChannel */, boost::uint32_t /* PlaceFilter */, boost::uint32_t /* Options */)> Channel_RequestAllPlayerList;

	// Response Channel All Player List
	boost::signals2::signal<void (boost::uint64_t /* uidChannel */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* PlayerList */)> Channel_ResponseAllPlayerList;

	// Create a Stage
	boost::signals2::signal<void (boost::uint64_t /* uidChar */, const std::string& /* StageName */, bool /* IsPrivate */, const std::string& /* Password */)> Stage_Create;

	// Request Join a Stage
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, boost::uint64_t /* uidStage */)> Stage_RequestJoin;

	// Request Join a Private Stage
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, boost::uint64_t /* uidStage */, const std::string& /* Password */)> Stage_RequestPrivateJoin;

	// Join a Stage
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, boost::uint64_t /* uidStage */, boost::uint32_t /* nRoomNo */, const std::string& /* StageName */)> Stage_Join;

	// Leave Stage
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */)> Stage_Leave;

	// Requst PlayerList from the Stage
	boost::signals2::signal<void (boost::uint64_t /* uidStage */)> Stage_Request_PlayerList;

	// Follow User to Stage
	boost::signals2::signal<void (const std::string& /* strTarget */)> Stage_Follow;

	// Response Follow User to Stage
	boost::signals2::signal<void (boost::int32_t /* Result */)> Stage_Response_Follow;

	// Response Join a Stage
	boost::signals2::signal<void (boost::int32_t /* Result */)> Stage_ResponseJoin;

	// Require password
	boost::signals2::signal<void (boost::uint64_t /* uidStage */, const std::string& /* StageName */)> Stage_RequirePassword;

	// Request Game Info
	boost::signals2::signal<void (boost::uint64_t /* uidChar */, boost::uint64_t /* uidStage */)> RequestGameInfo;

	// Response Game Info
	boost::signals2::signal<void (boost::uint64_t /* uidStage */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* GameInfo */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* RuleInfo */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* PlayerInfo */)> ResponseGameInfo;

	// Response Create a Stage
	boost::signals2::signal<void (boost::int32_t /* Result */)> Stage_ResponseCreate;

	// Request Enter Stage Battle
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, boost::uint64_t /* uidStage */)> Stage_Request_EnterBattle;

	// Enter Stage Battle
	boost::signals2::signal<void (boost::uint8_t /* Param */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* CharData */)> Stage_EnterBattle;

	// Leave Stage Battle
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */)> Stage_LeaveBattle;

	// Start Stage
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, boost::uint64_t /* uidStage */, boost::int32_t /* nCountdown */)> Stage_Start;

	// Change Map
	boost::signals2::signal<void (boost::uint64_t /* uidStage */, const std::string& /* MapName */)> Stage_Map;

	// Chat to Stage
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, boost::uint64_t /* uidStage */, const std::string& /* Chat */)> Stage_Chat;

	// Stage Request QuickJoin
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* Param */)> Stage_RequestQuickJoin;

	// Stage Response QuickJoin
	boost::signals2::signal<void (boost::int32_t /* Result */, boost::uint64_t /* uidStage */)> Stage_ResponseQuickJoin;

	// Stage Go
	boost::signals2::signal<void (boost::uint32_t /* RoomNo */)> Stage_StageGo;

	// Change State In Stage
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, boost::uint64_t /* uidStage */, boost::int32_t /* nState */, boost::int32_t /* zero */)> Stage_State;

	// Change Team
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, boost::uint64_t /* uidStage */, boost::uint32_t /* nTeam */)> Stage_Team;

	// Set Master
	boost::signals2::signal<void (boost::uint64_t /* uidStage */, boost::uint64_t /* uidPlayer */)> Stage_Master;

	// Stage List transmit start
	boost::signals2::signal<void ()> Stage_ListStart;

	// Stage List transmit stop
	boost::signals2::signal<void ()> Stage_ListStop;

	// Stage List
	boost::signals2::signal<void (const boost::array<boost::uint16_t, 3>& /* PrevStageListCount */, const boost::array<boost::uint16_t, 3>& /* NextStageListCount */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* StageList */)> Stage_List;

	// Request Stage List
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, boost::uint64_t /* uidChannel */, boost::int32_t /* StageCursor */)> Stage_RequestStageList;

	// Request Channel Player List
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, boost::uint64_t /* uidChannel */, boost::int32_t /* PlayerListPage */)> Channel_RequestPlayerList;

	// Response Channel Player List
	boost::signals2::signal<void (boost::uint8_t /* TotalPlayerCount */, boost::uint8_t /* PlayerListPage */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* PlayerList */)> Channel_ResponsePlayerList;

	// Request stage setting
	boost::signals2::signal<void (boost::uint64_t /* uidStage */)> Stage_RequestStageSetting;

	// Response stage setting
	boost::signals2::signal<void (boost::uint64_t /* uidStage */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* StageSetting */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* CharSetting */, boost::int32_t /* StageState */, boost::uint64_t /* uidMaster */)> Stage_ResponseStageSetting;

	// Setting up Stage
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, boost::uint64_t /* uidStage */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* StageSetting */)> Stage_StageSetting;

	// Launch Stage
	boost::signals2::signal<void (boost::uint64_t /* uidStage */, const std::string& /* MapName */)> Stage_Launch;

	// Finish Stage
	boost::signals2::signal<void (boost::uint64_t /* uidStage */)> Stage_Finish;

	// Request peer list
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, boost::uint64_t /* uidStage */)> Stage_RequestPeerList;

	// Response peer list
	boost::signals2::signal<void (boost::uint64_t /* uidStage */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* PeerList */)> Stage_ResponsePeerList;

	// Loading Complete
	boost::signals2::signal<void (boost::uint64_t /* ChrUID */, boost::int32_t /* Percent */)> Loading_Complete;

	// Request Peer Relay
	boost::signals2::signal<void (boost::uint64_t /* PlayerUID */, boost::uint64_t /* PeerCharUID */)> Match_RequestPeerRelay;

	// Response Peer Relay
	boost::signals2::signal<void (boost::uint64_t /* PeerCharUID */)> Match_ResponsePeerRelay;

	// Sync State of a StageRound
	boost::signals2::signal<void (boost::uint64_t /* uidStage */, boost::int32_t /* nRound */, boost::int32_t /* nState */, boost::int32_t /* nArg */)> Stage_RoundState;

	// Object Die
	boost::signals2::signal<void (boost::uint64_t /* Attacker */)> Game_Kill;

	// Request Spawn
	boost::signals2::signal<void (boost::uint64_t /* CharUID */, const boost::array<float, 3>& /* Position */, const boost::array<float, 3>& /* Direction */)> Game_Requst_Spawn;

	// Game.LevelUp
	boost::signals2::signal<void (boost::uint64_t /* Player */, boost::int32_t /* Level */)> Game_LevelUp;

	// Game.LevelDown
	boost::signals2::signal<void (boost::uint64_t /* Player */, boost::int32_t /* Level */)> Game_LevelDown;

	// Game.Dead
	boost::signals2::signal<void (boost::uint64_t /* Attacker */, boost::uint32_t /* AttackerArg */, boost::uint64_t /* Victim */, boost::uint32_t /* VictimArg */)> Game_Dead;

	// Game.TeamBonus
	boost::signals2::signal<void (boost::uint64_t /* CharUID */, boost::uint32_t /* ExpArg */)> Game_TeamBonus;

	// Request TimeSync for Game
	boost::signals2::signal<void (boost::uint32_t /* LocalTimeStamp */)> Game_RequestTimeSync;

	// Response TimeSync for Game
	boost::signals2::signal<void (boost::uint32_t /* LocalTimeStamp */, boost::uint32_t /* GlobalTimeStamp */)> Game_ResponseTimeSync;

	// Report TimeSync for Verify SpeedHack
	boost::signals2::signal<void (boost::uint32_t /* LocalTimeStamp */, boost::uint32_t /* MemoryChecksum */)> Game_ReportTimeSync;

	// Request Forced Entry
	boost::signals2::signal<void (boost::uint64_t /* uidChar */, boost::uint64_t /* uidStage */)> Stage_RequestForcedEntry;

	// Response Forced Entry
	boost::signals2::signal<void (boost::int32_t /* Result */)> Stage_ResponseForcedEntry;

	// Update Round Finished Info
	boost::signals2::signal<void (boost::uint64_t /* uidStage */, boost::uint64_t /* uidChar */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* PeerInfo */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* KillInfo */)> Stage_RoundFinishInfo;

	// Notify Message
	boost::signals2::signal<void (boost::uint32_t /* nMsgID */)> Match_Notify;

	// Whisper Message to a User
	boost::signals2::signal<void (const std::string& /* SenderName */, const std::string& /* TargetName */, const std::string& /* Message */)> Match_Whisper;

	// Ask Player Location
	boost::signals2::signal<void (const std::string& /* TargetName */)> Match_Where;

	// Set User Option
	boost::signals2::signal<void (boost::uint32_t /* OptionFlags */)> Match_UserOption;

	// Create a ChatRoom
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, const std::string& /* ChatRoomName */)> ChatRoom_Create;

	// Join a ChatRoom
	boost::signals2::signal<void (const std::string& /* PlayerName */, const std::string& /* ChatRoomName */)> ChatRoom_Join;

	// Leave a Chat Room
	boost::signals2::signal<void (const std::string& /* PlayerName */, const std::string& /* ChatRoomName */)> ChatRoom_Leave;

	// Select ChatRoom to Write
	boost::signals2::signal<void (const std::string& /* ChatRoomName */)> ChatRoom_SelectWrite;

	// Invite a user to ChatRoom
	boost::signals2::signal<void (const std::string& /* SenderName */, const std::string& /* TargetName */, const std::string& /* ChatRoomName */)> ChatRoom_Invite;

	// ChatRoom Chat
	boost::signals2::signal<void (const std::string& /* ChatRoomName */, const std::string& /* SenderName */, const std::string& /* Message */)> ChatRoom_Chat;

	// Request Account Character List
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* EMsg */)> Match_RequestAccountCharList;

	// Response Account Character List
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* CharList */)> Match_ResponseAccountCharList;

	// Request Account Character Info
	boost::signals2::signal<void (const boost::array<boost::uint16_t, 3>& /* CharNum */, boost::int32_t /* _0B */)> Match_RequestAccountCharInfo;

	// Response Account Character Info
	boost::signals2::signal<void (const boost::array<boost::uint16_t, 3>& /* CharNum */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* CharInfo */)> Match_ResponseAccountCharInfo;

	// Request Select Character
	boost::signals2::signal<void (boost::uint64_t /* uid */, boost::uint32_t /* CharIndex */, boost::int32_t /* one */)> Match_RequestSelectChar;

	// Response Select Character
	boost::signals2::signal<void (boost::int32_t /* Result */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* CharInfo */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* MyExtraCharInfo */)> Match_ResponseSelectChar;

	// Request Character Info
	boost::signals2::signal<void (boost::uint64_t /* uid */, boost::uint32_t /* CharIndex */)> Match_RequestCharInfo;

	// Response Character Info
	boost::signals2::signal<void (boost::uint64_t /* uid */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* CharInfo */)> Match_ResponseCharInfo;

	// Request Delete Character
	boost::signals2::signal<void (boost::uint64_t /* uid */, boost::uint32_t /* CharIndex */, boost::int32_t /* one */, const std::string& /* CharName */)> Match_RequestDeleteChar;

	// Response Delete Character
	boost::signals2::signal<void (boost::int32_t /* Result */)> Match_ResponseDeleteChar;

	// Request Create Character
	boost::signals2::signal<void (boost::uint64_t /* uid */, boost::uint32_t /* CharIndex */, boost::int32_t /* one */, const std::string& /* Name */, boost::uint32_t /* Sex */, boost::uint32_t /* Hair */, boost::uint32_t /* Face */, boost::uint32_t /* Costume */)> Match_RequestCreateChar;

	// Response Create Character
	boost::signals2::signal<void (boost::int32_t /* Result */, const std::string& /* CharName */)> Match_ResponseCreateChar;

	// Request Copy To TestServer
	boost::signals2::signal<void (boost::uint64_t /* uidChar */)> Match_RequestCopyToTestServer;

	// Response Copy To TestServer
	boost::signals2::signal<void (boost::int32_t /* Result */)> Match_ResponseCopyToTestServer;

	// Request Character Info Detail
	boost::signals2::signal<void (boost::uint64_t /* uid */, const std::string& /* CharName */)> Match_RequestCharInfoDetail;

	// Response Character Info Detail
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* CharInfo */)> Match_ResponseCharInfoDetail;

	// Request Simple CharInfo
	boost::signals2::signal<void (boost::uint64_t /* uid */)> Match_RequestSimpleCharInfo;

	// Response Simple CharInfo
	boost::signals2::signal<void (boost::uint64_t /* uid */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* SimpleCharInfo */)> Match_ResponseSimpleCharInfo;

	// Request My Simple CharInfo
	boost::signals2::signal<void (boost::uint64_t /* uidChar */)> Match_RequestMySimpleCharInfo;

	// Response My Simple CharInfo
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* MySimpleCharInfo */)> Match_ResponseMySimpleCharInfo;

	// Request Buy Item
	boost::signals2::signal<void (boost::uint64_t /* uidChar */, boost::uint32_t /* ItemID */)> Match_RequestBuyItem;

	// Response Buy Item
	boost::signals2::signal<void (boost::int32_t /* result */)> Match_ResponseBuyItem;

	// Request Sell Item
	boost::signals2::signal<void (boost::uint64_t /* uidChar */, boost::uint64_t /* uidItem */)> Match_RequestSellItem;

	// Response Sell Item
	boost::signals2::signal<void (boost::int32_t /* result */)> Match_ResponseSellItem;

	// Request Shop Item List
	boost::signals2::signal<void (boost::uint64_t /* uid */, boost::int32_t /* FirstItemIndex */, boost::int32_t /* ItemCount */)> Match_RequestShopItemList;

	// Response Shop Item List
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* GambleItemList */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* ItemList */)> Match_ResponseShopItemList;

	// Request Character Item List
	boost::signals2::signal<void (boost::uint64_t /* uid */)> Match_RequestCharacterItemList;

	// Request Character Item List NonPrevent Duplicate Send
	boost::signals2::signal<void (boost::uint64_t /* uid */)> Match_RequestCharacterItemListForce;

	// Response Character Item List
	boost::signals2::signal<void (boost::int32_t /* Bounty */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* EquipItemList */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* ItemList */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* GambleItemList */)> Match_ResponseCharacterItemList;

	// Request Equip Item
	boost::signals2::signal<void (boost::uint64_t /* uidChar */, boost::uint64_t /* uidItem */, boost::uint32_t /* EquipmentSlot */, boost::int32_t /* one */)> MatchRequestEquipItem;

	// Response Equip Item
	boost::signals2::signal<void (boost::int32_t /* Result */)> MatchResponseEquipItem;

	// Request Takeoff Item
	boost::signals2::signal<void (boost::uint64_t /* uid */, boost::uint32_t /* EquipmentSlot */, boost::int32_t /* one */)> MatchRequestTakeoffItem;

	// Response Takeoff Item
	boost::signals2::signal<void (boost::int32_t /* Result */)> MatchResponseTakeoffItem;

	// Request Account Item List
	boost::signals2::signal<void (boost::uint64_t /* uid */)> Match_RequestAccountItemList;

	// Response Account Item List
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* ItemList */)> Match_ResponseAccountItemList;

	// Request Bring Account Item
	boost::signals2::signal<void (boost::uint64_t /* uidChar */, boost::int32_t /* AIID */)> Match_RequestBringAccountItem;

	// Response Bring Account Item
	boost::signals2::signal<void (boost::int32_t /* Result */)> Match_ResponseBringAccountItem;

	// Request BringBack Account Item
	boost::signals2::signal<void (boost::uint64_t /* uidChar */, boost::uint64_t /* uidItem */)> Match_RequestBringBackAccountItem;

	// Response BringBack Account Item
	boost::signals2::signal<void (boost::int32_t /* Result */)> Match_ResponseBringBackAccountItem;

	// Match.Expired Rent Item
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* ItemIDList */)> Match_ExpiredRentItem;

	// Request Item Gamble
	boost::signals2::signal<void (boost::uint64_t /* uidItem */)> Match_ItemGamble;

	// Response Item Gamble Result Item
	boost::signals2::signal<void (boost::uint32_t /* ItemID */, boost::uint32_t /* RentHourPeriodTimes60 */)> Match_GambleResultItem;

	// Request Suicide
	boost::signals2::signal<void (boost::uint64_t /* uidChar */)> Match_Request_Suicide;

	// Response Suicide
	boost::signals2::signal<void (boost::int32_t /* Result */, boost::uint64_t /* uidChar */)> Match_Response_Suicide;

	// response suicide reserve
	boost::signals2::signal<void ()> Match_Response_SuicideReserve;

	// Request Obtain WorldItem
	boost::signals2::signal<void (boost::uint64_t /* uidChar */, boost::int32_t /* nItemUID */)> Match_Request_Obtain_WorldItem;

	// Obtain WorldItem
	boost::signals2::signal<void (boost::uint64_t /* uidChar */, boost::int32_t /* nItemUID */)> Match_WorldItem_Obtain;

	// Spawn WorldItem
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* SpawnInfo */)> Match_WorldItem_Spawn;

	// Request Spawn WorldItem
	boost::signals2::signal<void (boost::uint64_t /* uidChar */, boost::int32_t /* ItemID */, const boost::array<float, 3>& /* ItemPos */, float /* ItemDropDelayTime */)> Match_Request_Spawn_WorldItem;

	// Request Spawn WorldItem
	boost::signals2::signal<void (boost::int32_t /* nWorldItemUID */)> Match_Request_Spawn_WorldItem_UID;

	// Reset Team Members
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* TeamMemberData */)> Match_Reset_TeamMembers;

	// Assign Commander
	boost::signals2::signal<void (boost::uint64_t /* uidRedCommander */, boost::uint64_t /* uidBlueCommander */)> Match_Assign_Commander;

	// Set Observer
	boost::signals2::signal<void (boost::uint64_t /* uidChar */)> Match_Set_Observer;

	// Request Challenge a Ladder
	boost::signals2::signal<void (boost::int32_t /* MemberCount */, boost::uint32_t /* Options */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* MemberNames */)> Match_Ladder_Request_Challenge;

	// Response Challenge a Ladder
	boost::signals2::signal<void (boost::int32_t /* Result */)> Match_Ladder_Response_Challenge;

	// Search a Ladder Rival
	boost::signals2::signal<void ()> Match_Ladder_SearchRival;

	// Request Cancel Challenge
	boost::signals2::signal<void ()> Match_Ladder_Request_CancelChallenge;

	// Cancel Ladder Challenge
	boost::signals2::signal<void (const std::string& /* CharName */)> Match_Ladder_CancelChallenge;

	// Prepare Ladder Game
	boost::signals2::signal<void (boost::uint64_t /* uidStage */, boost::int32_t /* nTeam */)> Ladder_Prepare;

	// Launch Ladder Game
	boost::signals2::signal<void (boost::uint64_t /* uidStage */, const std::string& /* MapName */)> Ladder_Launch;

	// Request Proposal
	boost::signals2::signal<void (boost::uint64_t /* uidChar */, boost::int32_t /* ProposalMode */, boost::int32_t /* RequestID */, boost::int32_t /* ReplierCount */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* ReplierCharNames */)> Match_RequestProposal;

	// Response Proposal
	boost::signals2::signal<void (boost::int32_t /* Result */, boost::int32_t /* ProposalMode */, boost::int32_t /* RequestID */)> Match_ResponseProposal;

	// Ask Agreement
	boost::signals2::signal<void (boost::uint64_t /* uidProposer */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* MembersCharName */, boost::int32_t /* ProposalMode */, boost::int32_t /* RequestID */)> Match_AskAgreement;

	// Reply Agreement
	boost::signals2::signal<void (boost::uint64_t /* uidProposer */, boost::uint64_t /* uidChar */, const std::string& /* Replier */, boost::int32_t /* ProposalMode */, boost::int32_t /* RequestID */, bool /* Agreement */)> Match_ReplyAgreement;

	// Add a Friend
	boost::signals2::signal<void (const std::string& /* Name */)> Match_Friend_Add;

	// Remove a Friend
	boost::signals2::signal<void (const std::string& /* Name */)> Match_Friend_Remove;

	// List Friend
	boost::signals2::signal<void ()> Match_Friend_List;

	// Response List Friend
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* FriendList */)> Match_Response_FriendList;

	// Message to Friends
	boost::signals2::signal<void (const std::string& /* Msg */)> Match_Friend_Msg;

	// Request Create Clan
	boost::signals2::signal<void (boost::uint64_t /* uidChar */, boost::int32_t /* RequestID */, const std::string& /* ClanName */, const std::string& /* Member1CharName */, const std::string& /* Member2CharName */, const std::string& /* Member3CharName */, const std::string& /* Member4CharName */)> Match_Clan_RequestCreateClan;

	// Response Create Clan
	boost::signals2::signal<void (boost::int32_t /* Result */, boost::int32_t /* RequestID */)> Match_Clan_ResponseCreateClan;

	// Ask Sponsor's Agreement
	boost::signals2::signal<void (boost::int32_t /* RequestID */, const std::string& /* ClanName */, boost::uint64_t /* uidClanMaster */, const std::string& /* szClanMaster */)> Match_Clan_AskSponsorAgreement;

	// Answer Sponsor's Agreement
	boost::signals2::signal<void (boost::int32_t /* RequestID */, boost::uint64_t /* uidClanMaster */, const std::string& /* SponsorCharName */, bool /* Answer */)> Match_Clan_AnswerSponsorAgreement;

	// Request Agreed Create Clan
	boost::signals2::signal<void (boost::uint64_t /* uidChar */, const std::string& /* ClanName */, const std::string& /* Member1CharName */, const std::string& /* Member2CharName */, const std::string& /* Member3CharName */, const std::string& /* Member4CharName */)> Match_Clan_RequestAgreedCreateClan;

	// Response Agreed Create Clan
	boost::signals2::signal<void (boost::int32_t /* Result */)> Match_Clan_AgreedResponseCreateClan;

	// Request Close Clan
	boost::signals2::signal<void (boost::uint64_t /* uidChar */, const std::string& /* ClanName */)> Match_Clan_RequestCloseClan;

	// Response Close Clan
	boost::signals2::signal<void (boost::int32_t /* Result */)> Match_Clan_ResponseCloseClan;

	// Request Join Clan
	boost::signals2::signal<void (boost::uint64_t /* uidChar */, const std::string& /* ClanName */, const std::string& /* szJoiner */)> Match_Clan_RequestJoinClan;

	// Response Join Clan
	boost::signals2::signal<void (boost::int32_t /* Result */)> Match_Clan_ResponseJoinClan;

	// Ask Join Agreement
	boost::signals2::signal<void (const std::string& /* ClanName */, boost::uint64_t /* uidClanAdmin */, const std::string& /* szClanAdmin */)> Match_Clan_AskJoinAgreement;

	// Answer Join Agreement
	boost::signals2::signal<void (boost::uint64_t /* uidClanAdmin */, const std::string& /* JoinerCharName */, bool /* Answer */)> Match_Clan_AnswerJoinAgreement;

	// Request Agreed Join Clan
	boost::signals2::signal<void (boost::uint64_t /* uidClanAdmin */, const std::string& /* ClanName */, const std::string& /* szJoiner */)> Match_Clan_RequestAgreedJoinClan;

	// Response Agreed Join Clan
	boost::signals2::signal<void (boost::int32_t /* Result */)> Match_Clan_ResponseAgreedJoinClan;

	// Request Leave Clan
	boost::signals2::signal<void (boost::uint64_t /* uidChar */)> Match_Clan_RequestLeaveClan;

	// Response Leave Clan
	boost::signals2::signal<void (boost::int32_t /* Result */)> Match_Clan_ResponseLeaveClan;

	// Update Char ClanInfo
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* ClanInfo */)> Match_Clan_UpdateCharClanInfo;

	// Request Change ClanGrade
	boost::signals2::signal<void (boost::uint64_t /* uidClanMaster */, const std::string& /* szMember */, boost::int32_t /* Grade */, boost::int32_t /* zero */)> Match_Clan_Master_RequestChangeGrade;

	// Response Change ClanGrade
	boost::signals2::signal<void (boost::int32_t /* Result */)> Match_Clan_Master_ResponseChangeGrade;

	// Request Expel ClanMember
	boost::signals2::signal<void (boost::uint64_t /* uidClanAdmin */, const std::string& /* szMember */)> Match_Clan_Admin_RequestExpelMember;

	// Response Expel ClanMember
	boost::signals2::signal<void (boost::int32_t /* Result */)> Match_Clan_Admin_ResponseLeaveMember;

	// Request Clan Msg
	boost::signals2::signal<void (boost::uint64_t /* uidSender */, const std::string& /* Msg */)> Match_Clan_Request_Msg;

	// Clan Msg
	boost::signals2::signal<void (const std::string& /* SenderName */, const std::string& /* Msg */)> Match_Clan_Msg;

	// Request Clan Member List
	boost::signals2::signal<void (boost::uint64_t /* uidChar */)> Match_Clan_Request_ClanMemberList;

	// Response Clan Member List
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* ClanMemberList */)> Match_Clan_Response_ClanMemberList;

	// Request Clan Info
	boost::signals2::signal<void (boost::uint64_t /* uidChar */, const std::string& /* ClanName */)> Match_Clan_Request_Clan_Info;

	// Response Clan Info
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* ClanInfo */)> Match_Clan_Response_Clan_Info;

	// Standby Clan List
	boost::signals2::signal<void (boost::int32_t /* PrevClanListCount */, boost::int32_t /* NextClanListCount */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* ClanList */)> Match_Clan_Standby_ClanList;

	// Member Connected
	boost::signals2::signal<void (const std::string& /* szMember */)> Match_Clan_Member_Connected;

	// Request EmblemURL
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* ClanURLList */)> Match_Clan_Request_EmblemURL;

	// Response EmblemURL
	boost::signals2::signal<void (boost::int32_t /* ClanCLID */, boost::int32_t /* EmblemChecksum */, const std::string& /* EmblemURL */)> Match_Clan_Response_EmblemURL;

	// Notify Emblem Ready
	boost::signals2::signal<void (boost::int32_t /* ClanCLID */, const std::string& /* EmblemURL */)> Match_Clan_Local_EmblemReady;

	// delete clan info announce to clan member
	boost::signals2::signal<void (const std::string& /* deleteinfo */)> MC_MATCH_CLAN_ACCOUNCE_DELETE;

	// Callvote
	boost::signals2::signal<void (const std::string& /* strDiscuss */, const std::string& /* strArg */)> Match_Callvote;

	// Notify Callvote
	boost::signals2::signal<void (const std::string& /* strDiscuss */, const std::string& /* strArg */)> Match_NotifyCallvote;

	// Notify Vote Result
	boost::signals2::signal<void (const std::string& /* strDiscuss */, boost::int32_t /* nResult */)> Match_NotifyVoteResult;

	// Vote
	boost::signals2::signal<void ()> Match_VoteYes;

	// Vote
	boost::signals2::signal<void ()> Match_VoteNo;

	// Vote stop
	boost::signals2::signal<void ()> Votestop;

	// Broadcast Clan Renew Victories
	boost::signals2::signal<void (const std::string& /* strWinnerClanName */, const std::string& /* strLoserClanName */, boost::int32_t /* nVictories */)> Match_Broadcast_ClanRenewVictories;

	// Broadcast Clan Interrupt Victories
	boost::signals2::signal<void (const std::string& /* strWinnerClanName */, const std::string& /* strLoserClanName */, boost::int32_t /* nVictories */)> Match_Broadcast_ClanInterruptVictories;

	// Broadcast Duel Renew Victories
	boost::signals2::signal<void (const std::string& /* strChampionName */, const std::string& /* strChannelName */, boost::int32_t /* nRoomNumber */, boost::int32_t /* nVictories */)> Match_Broadcast_DuelRenewVictories;

	// Broadcast Duel Interrupt Victories
	boost::signals2::signal<void (const std::string& /* strChampionName */, const std::string& /* strInterrupterName */, boost::int32_t /* nVictories */)> Match_Broadcast_DuelInterruptVictories;

	// Assign Berserker
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */)> Match_Assign_Berserker;

	// Queue Info
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* QueueInfo */)> Match_Duel_QueueInfo;

	// QuestPing
	boost::signals2::signal<void (boost::uint32_t /* nTimeStamp */)> Match_Quest_Ping;

	// QuestPong
	boost::signals2::signal<void (boost::uint32_t /* nTimeStamp */)> Match_Quest_Pong;

	// Send npc info list to client.
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* NPCinfolist */, boost::int32_t /* eGameType */)> MC_QUEST_NPCLIST;

	// Take out Master from Stage
	boost::signals2::signal<void ()> Event_ChangeMaster;

	// Change Password on Stage
	boost::signals2::signal<void (const std::string& /* strPassword */)> Event_ChangePassword;

	// Request JJang mark to a Player
	boost::signals2::signal<void (const std::string& /* strTargetName */)> Event_RequestJJang;

	// Remove JJang mark from a Player
	boost::signals2::signal<void (const std::string& /* strTargetName */)> Event_RemoveJJang;

	// Update JJang Player
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, bool /* bJjang */)> Event_UpdateJJang;

	// Npc Spawn
	boost::signals2::signal<void (boost::uint64_t /* uidChar */, boost::uint64_t /* nNpcUID */, boost::uint8_t /* nNpcType */, boost::uint8_t /* PositionIndex */)> Quest_NPCSpawn;

	// Entrust Npc Control
	boost::signals2::signal<void (boost::uint64_t /* uidChar */, boost::uint64_t /* nNpcUID */)> Quest_Entrust_NPC_Control;

	// Checksum NPC Info
	boost::signals2::signal<void (boost::uint64_t /* uidChar */, boost::uint32_t /* checksum */)> Quest_Checksum_NPCInfo;

	// Npc Dead
	boost::signals2::signal<void (boost::uint64_t /* uidKillerPlayer */, boost::uint64_t /* uidNPC */)> Quest_NPCDead;

	// Refresh Player Status
	boost::signals2::signal<void ()> Quest_RefreshPlayerStatus;

	// Clear All NPC
	boost::signals2::signal<void ()> Quest_NPC_AllClear;

	// Quest Start Round
	boost::signals2::signal<void (boost::uint8_t /* round */)> Quest_Round_Start;

	// Quest Request Dead
	boost::signals2::signal<void ()> Quest_RequestDead;

	// Quest Player Dead
	boost::signals2::signal<void (boost::uint64_t /* Victim */)> Quest_PlayerDead;

	// Obtain QuestItem
	boost::signals2::signal<void (boost::uint32_t /* QuestItemID */)> Quest_ObtainQuestItem;

	// Obtain ZItem
	boost::signals2::signal<void (boost::uint32_t /* ItemID */)> Quest_ObtainZItem;

	// Change Stage Quest Mapset Setting
	boost::signals2::signal<void (boost::uint64_t /* uidStage */, const boost::array<boost::uint16_t, 3>& /* QuestMapset */)> Quest_State_Mapset;

	// Quest Stage GameInfo
	boost::signals2::signal<void (const boost::array<boost::uint16_t, 3>& /* Questlevel */, const boost::array<boost::uint16_t, 3>& /* MapsetID */, boost::uint32_t /* QuestScenarioID */)> Quest_Stage_GameInfo;

	// Quest Sector Bonus
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */, boost::uint32_t /* XPBonus */, boost::uint32_t /* BPBonus */)> Quest_SectorBonus;

	// Quest Game Info
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* Info */)> Quest_GameInfo;

	// Quest Combat State
	boost::signals2::signal<void (const boost::array<boost::uint16_t, 3>& /* CombatState */)> Quest_Combat_State;

	// Quest Sector Start
	boost::signals2::signal<void (const boost::array<boost::uint16_t, 3>& /* SectorIndex */, boost::uint8_t /* RepeatIndex */)> Quest_Sector_Start;

	// Complete Quest
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* RewardInfo */)> Quest_Complete;

	// Quest failed
	boost::signals2::signal<void ()> Quest_Failed;

	// Request Moveto Portal
	boost::signals2::signal<void (const boost::array<boost::uint16_t, 3>& /* CurrSectorIndex */)> Quest_Request_Moveto_Portal;

	// Moveto Portal
	boost::signals2::signal<void (const boost::array<boost::uint16_t, 3>& /* SectorIndex */, boost::uint8_t /* RepeatIndex */, boost::uint64_t /* uidPlayer */)> Quest_Moveto_Portal;

	// Ready To New Sector
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */)> Quest_Readyto_NewSector;

	// NPC BasicInfo
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* Info */)> Quest_Peer_NPC_BasicInfo;

	// NPC HPInfo
	boost::signals2::signal<void (boost::int32_t /* nNPCCount */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* HPTable */)> Quest_Peer_NPC_HPInfo;

	// NPC Melee Attack
	boost::signals2::signal<void (boost::uint64_t /* uidOwner */)> Quest_Peer_NPC_Attack_Melee;

	// NPC Range Attack
	boost::signals2::signal<void (boost::uint64_t /* uidOwner */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* Info */)> Quest_Peer_NPC_Attack_Range;

	// NPC Skill Start
	boost::signals2::signal<void (boost::uint64_t /* uidOwner */, boost::int32_t /* nSkill */, boost::uint64_t /* uidTarget */, const boost::array<float, 3>& /* targetPos */)> Quest_Peer_NPC_Skill_Start;

	// NPC Skill Start
	boost::signals2::signal<void (boost::uint64_t /* uidOwner */, boost::int32_t /* nSkill */, boost::uint64_t /* uidTarget */, const boost::array<float, 3>& /* targetPos */)> Quest_Peer_NPC_Skill_Execute;

	// NPC Dead
	boost::signals2::signal<void (boost::uint64_t /* uidKillerPlayer */, boost::uint64_t /* uidNPC */)> Quest_Peer_NPC_Dead;

	// NPC Spawn
	boost::signals2::signal<void (boost::int32_t /* NPCType */, boost::int32_t /* NPCCount */)> Quest_Test_RequestNPCSpawn;

	// Clear NPC
	boost::signals2::signal<void ()> Quest_Test_ClearNPC;

	// Sector Clear
	boost::signals2::signal<void ()> Quest_Test_SectorClear;

	// Finish Quest
	boost::signals2::signal<void ()> Quest_Test_Finish;

	// BirdTest1
	boost::signals2::signal<void (boost::int32_t /* Result */, boost::uint64_t /* uidPlayer */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* Dummy */)> Test_BirdTest1;

	// PeerTest Ping
	boost::signals2::signal<void ()> Test_PeerTest_Ping;

	// PeerTest Pong
	boost::signals2::signal<void ()> Test_PeerTest_Pong;

	// Announce
	boost::signals2::signal<void (boost::uint64_t /* uidAdmin */, const std::string& /* Msg */, boost::uint32_t /* MsgType */)> Admin_Announce;

	// Ping to All Clients
	boost::signals2::signal<void ()> Admin_PingToAll;

	// Request Server Info
	boost::signals2::signal<void (boost::uint64_t /* uidAdmin */)> Admin_RequestServerInfo;

	// Response Server Info
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* ServerInfo */)> Admin_ResponseServerInfo;

	// Halt Server
	boost::signals2::signal<void (boost::uint64_t /* uidAdmin */)> Admin_Halt;

	// Admin.Terminal
	boost::signals2::signal<void (boost::uint64_t /* uidAdmin */, const std::string& /* message */)> Admin_Terminal;

	// Request Update Account UGrade
	boost::signals2::signal<void (boost::uint64_t /* uidAdmin */, const std::string& /* uidTargetCharName */)> Admin_RequestUpdateAccountUGrade;

	// Response Update Account UGrade
	boost::signals2::signal<void (boost::int32_t /* Result */, boost::uint64_t /* uidChar */)> Admin_ResponseUpdateAccountUGrade;

	// Request Ban Player
	boost::signals2::signal<void (boost::uint64_t /* uidAdmin */, const std::string& /* uidTargetCharName */)> Admin_RequestBanPlayer;

	// Response Ban Player
	boost::signals2::signal<void (boost::int32_t /* Result */)> Admin_ResponseBanPlayer;

	// Request Switch LadderGame
	boost::signals2::signal<void (boost::uint64_t /* uidAdmin */, bool /* IsEnabled */)> Admin_RequestSwitchLadderGame;

	// Hide Admin Player
	boost::signals2::signal<void ()> Admin_Hide;

	// Reload Client Hash
	boost::signals2::signal<void ()> Admin_ReloadClientHash;

	// reset all hacking block
	boost::signals2::signal<void ()> MC_ADMIN_RESET_ALL_HACKING_BLOCK;

	// reload gamble item info
	boost::signals2::signal<void ()> MC_ADMIN_RELOAD_GAMBLEITEM;

	// dump gamble item info
	boost::signals2::signal<void ()> MC_ADMIN_DUMP_GAMBLEITEM_LOG;

	// choose admin as commander
	boost::signals2::signal<void ()> MC_ADMIN_ASSASIN;

	// Request UID
	boost::signals2::signal<void (boost::int32_t /* Size */)> Net_RequestUID;

	// Response UID
	boost::signals2::signal<void (boost::uint64_t /* Start */, boost::uint64_t /* End */)> Net_ResponseUID;

	// Peer Connection Opened
	boost::signals2::signal<void (boost::uint64_t /* uidPlayer */)> Peer_Open;

	// Change Object Weapon
	boost::signals2::signal<void (boost::int32_t /* WeaponID */)> Peer_ObjectChangeWeapon;

	// Change Object Parts
	boost::signals2::signal<void (boost::int32_t /* PartsType */, boost::int32_t /* PartsID */)> Peer_ObjectChangeParts;

	// Object Damage
	boost::signals2::signal<void (boost::uint64_t /* TargetUID */, boost::int32_t /* Damage */)> Peer_ObjectDamage;

	// Chat
	boost::signals2::signal<void (boost::int32_t /* TeamID */, const std::string& /* Msg */)> Peer_Chat;

	// ChatIcon
	boost::signals2::signal<void (bool /* bStart */)> Peer_ChatIcon;

	// React
	boost::signals2::signal<void (float /* Time */, boost::int32_t /* ReactionID */)> Peer_Reaction;

	// EnchantDamage
	boost::signals2::signal<void (boost::uint64_t /* OwnerUID */, boost::uint64_t /* TargetUID */)> Peer_EnchantDamage;

	// Shot
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* Info */)> Peer_Shot;

	// ShotMelee
	boost::signals2::signal<void (float /* Time */, const boost::array<float, 3>& /* Position */, boost::int32_t /* nShot */)> Peer_Shot_Melee;

	// Reload
	boost::signals2::signal<void ()> Peer_Reload;

	// Object SpMotion
	boost::signals2::signal<void (boost::int32_t /* SelType */)> Peer_ObjectSpMotion;

	// ChangeCharacter
	boost::signals2::signal<void ()> Peer_ChangeCharacter;

	// Die
	boost::signals2::signal<void (boost::uint64_t /* Attacker */)> Peer_Die;

	// Spawn
	boost::signals2::signal<void (const boost::array<float, 3>& /* Position */, const boost::array<float, 3>& /* Direction */)> Peer_Spawn;

	// Dash
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* DashInfo */)> Peer_Dash;

	// Skill
	boost::signals2::signal<void (float /* Time */, boost::int32_t /* SkillID */, boost::int32_t /* SelType */)> Peer_ObjectSkill;

	// BasicInfo
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* Info */)> Peer_CharacterBasicInfo;

	// HPInfo
	boost::signals2::signal<void (float /* fHP */)> Peer_CharacterHPInfo;

	// HPAPInfo
	boost::signals2::signal<void (float /* fHP */, float /* fAP */)> Peer_CharacterHPAPInfo;

	// UDP Test on Peer-to-Peer
	boost::signals2::signal<void ()> Peer_UDPTest;

	// UDP Test Reply on Peer-to-Peer
	boost::signals2::signal<void ()> Peer_UDPTestReply;

	// Ping
	boost::signals2::signal<void (boost::uint32_t /* TimeStamp */)> Peer_Ping;

	// Pong
	boost::signals2::signal<void (boost::uint32_t /* TimeStamp */)> Peer_Pong;

	// Connect Agent to MatchServer
	boost::signals2::signal<void (const std::string& /* Address */, boost::int32_t /* Port */)> Agent_Connect;

	// Unregister Agent from MatchServer
	boost::signals2::signal<void ()> Agent_Disconnect;

	// Client login
	boost::signals2::signal<void (boost::uint64_t /* uidComm */, boost::uint64_t /* uidPlayer */)> Agent_LocalLogin;

	// Register Agent to MatchServer
	boost::signals2::signal<void (const std::string& /* Address */, boost::int32_t /* Port */, boost::int32_t /* UDPPort */)> Match_RegisterAgent;

	// Unregister Agent from MatchServer
	boost::signals2::signal<void ()> Match_UnRegisterAgent;

	// Request LiveCheck for Agent
	boost::signals2::signal<void (boost::uint32_t /* TimeStamp */, boost::uint32_t /* StageCount */, boost::uint32_t /* UserCount */)> Match_Agent_RequestLiveCheck;

	// Response LiveCheck for Agent
	boost::signals2::signal<void (boost::uint32_t /* TimeStamp */)> Match_Agent_ResponseLiveCheck;

	// Reserve stage on AgentServer
	boost::signals2::signal<void (boost::uint64_t /* StageUID */)> Agent_StageReserve;

	// Release stage on AgentServer
	boost::signals2::signal<void (boost::uint64_t /* StageUID */)> Agent_StageRelease;

	// Ready to Handle stage
	boost::signals2::signal<void (boost::uint64_t /* StageUID */)> Agent_StageReady;

	// Let agent to Relay Peer
	boost::signals2::signal<void (boost::uint64_t /* PlayerUID */, boost::uint64_t /* PeerCharUID */, boost::uint64_t /* StageUID */)> Agent_RelayPeer;

	// Ready to relay peer
	boost::signals2::signal<void (boost::uint64_t /* PlayerUID */, boost::uint64_t /* PeerCharUID */)> Agent_PeerReady;

	// Locate Agent to Client
	boost::signals2::signal<void (boost::uint64_t /* AgentUID */, const std::string& /* Address */, boost::int32_t /* Port */, boost::int32_t /* UDPPort */)> Agent_LocateToClient;

	// Response Login result to Client
	boost::signals2::signal<void ()> Agent_ResponseLogin;

	// Bind Client to Peer by TCP
	boost::signals2::signal<void (boost::uint64_t /* CharUID */)> Agent_PeerBindTCP;

	// Bind Client to Peer by UDP
	boost::signals2::signal<void (boost::uint64_t /* CharUID */, const std::string& /* strLocalIP */, boost::uint32_t /* nLocalPort */, const std::string& /* strIP */, boost::uint32_t /* nPort */)> Agent_PeerBindUDP;

	// Unbind Client from Peer
	boost::signals2::signal<void (boost::uint64_t /* CharUID */)> Agent_PeerUnbind;

	// Error about Agent
	boost::signals2::signal<void (boost::int32_t /* ErrorCode */)> Agent_Error;

	// Tunneling TCP
	boost::signals2::signal<void (boost::uint64_t /* SendUID */, boost::uint64_t /* RecvUID */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* Data */)> Agent_TunnelingTCP;

	// Tunneling UDP
	boost::signals2::signal<void (boost::uint64_t /* SendUID */, boost::uint64_t /* RecvUID */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* Data */)> Agent_TunnelingUDP;

	// Allow Tunneling by TCP
	boost::signals2::signal<void ()> Agent_AllowTunnelingTCP;

	// Allow Tunneling by UDP
	boost::signals2::signal<void ()> Agent_AllowTunnelingUDP;

	// Debug Ping Test for Agent
	boost::signals2::signal<void (boost::uint64_t /* TestUID */)> Agent_DebugPing;

	// Trigger Debug code for Agent
	boost::signals2::signal<void (const std::string& /* strMsg */)> Agent_DebugTest;

	// Ping
	boost::signals2::signal<void (boost::uint32_t /* TimeStamp */)> Peer_Ping_Time;

	// Pong
	boost::signals2::signal<void (boost::uint32_t /* IPAddress */, boost::uint32_t /* TimeStamp */)> Peer_Pong_Time;

	// make announce for scheduler.
	boost::signals2::signal<void (const std::string& /* strAnnounce */)> Announce_;

	// send announce of scheduler.
	boost::signals2::signal<void (const std::string& /* strAnnounce */)> Announce_Schedule;

	// if server type is clan server, then this command is can chage server status.
	boost::signals2::signal<void ()> Switchclanserverstatus_change;

	// up
	boost::signals2::signal<void ()> Switchclanserverstatus_up_;

	// stop server
	boost::signals2::signal<void (const std::string& /* announce */)> MC_MATCH_SCHEDULE_STOP_SERVER;

	// test
	boost::signals2::signal<void (boost::int32_t /* testcode */)> test;

	// connect
	boost::signals2::signal<void (boost::uint64_t /* KeeperManagerUID */)> MC_RESPONSE_KEEPER_MANAGER_CONNECT;

	// keeper manager request to keeper do that announce to it's match server
	boost::signals2::signal<void (const std::string& /* announce */)> MC_REQUEST_KEEPERMGR_ANNOUNCE;

	// keeper request to matchserver do that announce
	boost::signals2::signal<void (const std::string& /* announce */)> MC_REQUEST_KEEPER_ANNOUNCE;

	// Check ping
	boost::signals2::signal<void ()> Checkping;

	// request matchserver status from keeper
	boost::signals2::signal<void ()> requestmatchserverstatus;

	// response matchserver status
	boost::signals2::signal<void (boost::int32_t /* isopenDB */, const std::string& /* serverreleaseversion */, boost::uint8_t /* connectedagentcount */)> responsematchserverststus;

	// request download server patch file
	boost::signals2::signal<void ()> MC_REQUEST_DOWNLOAD_SERVER_PATCH_FILE;

	// request stop server
	boost::signals2::signal<void ()> MC_REQUEST_STOP_SERVER;

	// request current server state
	boost::signals2::signal<void ()> MC_REQUEST_CONNECTION_STATE;

	// response current server state
	boost::signals2::signal<void (boost::int32_t /* resut */)> MC_RESPONSE_CONNECTION_STATE;

	// request server hearbeat check
	boost::signals2::signal<void ()> MC_REQUEST_SERVER_HEARBEAT;

	// response server hearbeat check
	boost::signals2::signal<void ()> MC_RESPONSE_SERVER_HEARHEAT;

	// request start match server
	boost::signals2::signal<void ()> MC_REQUEST_START_SERVER;

	// request keeper connect to match server
	boost::signals2::signal<void ()> MC_REQUEST_KEEPER_CONNECT_MATCHSERVER;

	// response keeper connect to match server
	boost::signals2::signal<void (boost::uint64_t /* uid */)> MC_RESPONSE_KEEPER_CONNECT_MATCHSERVER;

	// request check match server heartbeat
	boost::signals2::signal<void ()> MC_REQUEST_REFRESH_SERVER;

	// request prepare patch
	boost::signals2::signal<void ()> MC_REQUEST_PREPARE_SERVER_PATCH;

	// request patching
	boost::signals2::signal<void ()> MC_REQUEST_SERVER_PATCH;

	// request last job state
	boost::signals2::signal<void ()> MC_REQUEST_LAST_JOB_STATE;

	// response last job state
	boost::signals2::signal<void (boost::int32_t /* job */, boost::int32_t /* result */)> MC_RESPONSE_LAST_JOB_STATE;

	// request config state
	boost::signals2::signal<void ()> MC_REQUEST_CONFIG_STATE;

	// response config state
	boost::signals2::signal<void (boost::int32_t /* serverconfig */, boost::int32_t /* agentconfig */, boost::int32_t /* downloadconfig */, boost::int32_t /* prepareconfig */, boost::int32_t /* patchconfig */)> MC_RESPONSE_CONFIG_STATE;

	// reqeust set one config
	boost::signals2::signal<void (boost::int32_t /* configid */, boost::int32_t /* confingstate */)> MC_REQUEST_SET_ONE_CONFIG;

	// response set one config
	boost::signals2::signal<void (boost::int32_t /* configid */, boost::int32_t /* confingstate */)> MC_RESPONSE_SET_ONE_CONFIG;

	// request stop agent
	boost::signals2::signal<void ()> MC_REQUEST_STOP_AGENT_SERVER;

	// request start agent
	boost::signals2::signal<void ()> MC_REQUEST_START_AGENT_SERVER;

	// request download agent patch file
	boost::signals2::signal<void ()> MC_REQUEST_DOWNLOAD_AGENT_PATCH_FILE;

	// request prepare agent patch
	boost::signals2::signal<void ()> MC_REQUEST_PREPARE_AGENT_PATCH;

	// request agent patch
	boost::signals2::signal<void ()> MC_REQUEST_AGENT_PATCH;

	// request reset patch job state
	boost::signals2::signal<void ()> MC_REQUEST_RESET_PATCH;

	// request disconnect match server
	boost::signals2::signal<void ()> MC_REQUEST_DISCONNECT_SERVER;

	// request restart windows
	boost::signals2::signal<void ()> MC_REQUEST_REBOOT_WINDOWS;

	// request stop server with administrator announce.
	boost::signals2::signal<void ()> MC_REQUEST_ANNOUNCE_STOP_SERVER;

	// response stop server with administrator announce.
	boost::signals2::signal<void ()> MC_RESPONSE_ANNOUNCE_STOP_SERVER;

	// reqeust keeper manager schedule
	boost::signals2::signal<void (boost::int32_t /* type */, boost::int32_t /* year */, boost::int32_t /* month */, boost::int32_t /* day */, boost::int32_t /* hour */, boost::int32_t /* min */, boost::int32_t /* count */, boost::int32_t /* command */, const std::string& /* announce */)> MC_REQUEST_KEEPER_MANAGER_SCHEDULE;

	// response keeper manager schedule
	boost::signals2::signal<void (boost::int32_t /* commandtype */, const boost::array<boost::uint16_t, 3>& /* result */)> MC_RESPONSE_KEEPER_MANAGER_SCHEDULE;

	// request current state of server and agent
	boost::signals2::signal<void ()> MC_REQUEST_SERVER_AGENT_STATE;

	// response current state of server and agent
	boost::signals2::signal<void (boost::int32_t /* serverstate */, boost::int32_t /* agentstate */)> MC_RESPONSE_SERVER_AGENT_STATE;

	// request server status
	boost::signals2::signal<void ()> MC_REQUEST_SERVER_STATUS;

	// start server.
	boost::signals2::signal<void ()> MC_REQUEST_START_SERVER_SCHEDULE;

	// request gunz client file crc32 checksum write on server.ini.
	boost::signals2::signal<void (boost::uint32_t /* gunzclientfilecrc32checksum */)> MC_REQUEST_WRITE_CLIENT_CRC;

	// response write client crc32 request
	boost::signals2::signal<void (bool /* result */)> MC_RESPONSE_WRITE_CLIENT_CRC;

	// keeper manager send to keeper request server reload server.ini file.
	boost::signals2::signal<void (const std::string& /* filelist */)> MC_REQUEST_KEEPER_RELOAD_SERVER_CONFIG;

	// keeper request server reload server.ini file
	boost::signals2::signal<void (const std::string& /* filelist */)> MC_REQUEST_RELOAD_CONFIG;

	// 4
	boost::signals2::signal<void (const std::string& /* newhashvalue */)> MC_REQUEST_KEEPER_ADD_HASHMAP;

	// 4
	boost::signals2::signal<void (bool /* result */)> MC_RESPONSE_KEEPER_ADD_HASHMAP;

	// 3
	boost::signals2::signal<void (const std::string& /* newhashvalue */)> MC_REQUEST_ADD_HASHMAP;

	// 4
	boost::signals2::signal<void (bool /* result */)> MC_RESPONSE_ADD_HASHMAP;

	// Request my quest item list
	boost::signals2::signal<void (boost::uint64_t /* uid */)> Questitem;

	// Response my quest item list
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* Myquestitemlist */)> Quest_item_response;

	// Request buy quest item
	boost::signals2::signal<void (boost::uint64_t /* uidChar */, boost::int32_t /* QuestItemID */)> Quest_item_buy;

	// Response buy quest item
	boost::signals2::signal<void (boost::int32_t /* Result */, boost::int32_t /* PlayerBounty */)> Quest_item_responsebuy;

	// Request sell quest item
	boost::signals2::signal<void (boost::uint64_t /* uidChar */, boost::int32_t /* QuestItemID */, boost::int32_t /* Count */)> Quest_item_sell;

	// Response sell quest item
	boost::signals2::signal<void (boost::int32_t /* Result */, boost::int32_t /* PlayerBounty */)> Quest_item_responsesell;

	// Quest reward.
	boost::signals2::signal<void (boost::int32_t /* XP */, boost::int32_t /* Bounty */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* Rewardquestitem */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* RewardZItem */)> Quest_Reward;

	// Request drop sacrifice item
	boost::signals2::signal<void (boost::uint64_t /* Dropitemowner */, boost::int32_t /* Slotindex */, boost::int32_t /* ItemID */)> Quest_Request_Sacrifice;

	// Response drop sacrifice item
	boost::signals2::signal<void (boost::int32_t /* Result */, boost::uint64_t /* requesterofdropsacrificeitem_ */, boost::int32_t /* Slotindex */, boost::int32_t /* ItemID */)> Quest_Response_Sacrifice;

	// Request callback sacrifice item
	boost::signals2::signal<void (boost::uint64_t /* Callbackitemrequester */, boost::int32_t /* Slotindex */, boost::int32_t /* ItemID */)> Quest_Callback_Sacrifice;

	// Request callback sacrifice item
	boost::signals2::signal<void (boost::int32_t /* Result */, boost::uint64_t /* requesterofcallbacksacrificeitem_ */, boost::int32_t /* Slotindex */, boost::int32_t /* ItemID */)> Quest_Callback_Result;

	// Request slot info
	boost::signals2::signal<void (boost::uint64_t /* Sender */)> Quest_Request_SlotInfo;

	// Response slot info
	boost::signals2::signal<void (boost::uint64_t /* Owner1 */, boost::int32_t /* ItemID1 */, boost::uint64_t /* Owner2 */, boost::int32_t /* ItemID2 */)> Quest_Resonse_SlotInfo;

	// Request stage quest level
	boost::signals2::signal<void (boost::uint64_t /* sender */)> Quest_RequestLevel;

	// Response stage quest level
	boost::signals2::signal<void (boost::int32_t /* Questlevel */)> Quest_ResponseLevel;

	// Send survival result
	boost::signals2::signal<void (boost::int32_t /* Reachedround */, boost::int32_t /* Point */)> Quest_Survival_Result;

	// Send survival top ranking list
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* Rankinglist */)> Quest_Survival_Ranking;

	// Send survival private ranking
	boost::signals2::signal<void (boost::uint32_t /* Rank */, boost::uint32_t /* Point */)> Quest_Survuval_PrivateRanking;

	// Failed start quest.
	boost::signals2::signal<void (boost::int32_t /* Failedtype_ */, boost::uint64_t /* pairparam */)> Quest_Start_Fail;

	// monster info
	boost::signals2::signal<void (const boost::array<boost::uint16_t, 3>& /* monsterdbindex */)> monsterinfo;

	// request monster bible info
	boost::signals2::signal<void (boost::uint64_t /* requester */)> Quest_Bible_Request;

	// response monster bible info
	boost::signals2::signal<void (boost::uint64_t /* requester */, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* Monsterbibleinfo */)> Quest_Bible_Response;

	// request connectable server list info.
	boost::signals2::signal<void ()> MC_REQUEST_SERVER_LIST_INFO;

	// response connectable server list info
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* serverlist */)> MC_RESPONSE_SERVER_LIST_INFO;

	// response connected ip country code is blocked
	boost::signals2::signal<void (const std::string& /* Countrycode */, const std::string& /* RoutingURL */)> MC_RESPONSE_BLOCK_COUNTRY_CODE_IP;

	// response block ip connected.
	boost::signals2::signal<void (const std::string& /* Comment */)> MC_RESPONSE_BLOCK_COUNTRYCODE;

	// update use country filter.
	boost::signals2::signal<void ()> MC_LOCAL_UPDATE_USE_COUNTRY_FILTER;

	// get db ip to country code.
	boost::signals2::signal<void ()> MC_LOCAL_GET_DB_IP_TO_COUNTRY;

	// get db block country code.
	boost::signals2::signal<void ()> MC_LOCAL_GET_DB_BLOCK_COUNTRY_CODE;

	// get db custom ip.
	boost::signals2::signal<void ()> MC_LOCAL_GET_DB_CUSTOM_IP;

	// update ip to country code.
	boost::signals2::signal<void ()> MC_LOCAL_UPDAET_IP_TO_COUNTRY;

	// update block country code.
	boost::signals2::signal<void ()> MC_LOCAL_UPDAET_BLOCK_COUTRYCODE;

	// update custom ip.
	boost::signals2::signal<void ()> MC_LOCAL_UPDAET_CUSTOM_IP;

	// update accept invalid ip.
	boost::signals2::signal<void ()> MC_LOCAL_UPDATE_ACCEPT_INVALID_IP;

	// request new client hash value
	boost::signals2::signal<void (const std::string& /* newrandomvalue */)> MC_REQUEST_XTRAP_HASHVALUE;

	// response new client hash value
	boost::signals2::signal<void (const std::string& /* newhashvalue */)> MC_RESPONSE_XTRAP_HASHVALUE;

	// request Irrational User
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* communicationbuffer */)> MC_REQUEST_XTRAP_DETECTCRACK;

	// request new client seed key
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* communicationbuffer */)> MC_REQUEST_XTRAP_SEEDKEY;

	// response client seed key
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* communicationbuffer */)> MC_RESPONSE_XTRAP_SEEDKEY;

	// requet new gameguard auth
	boost::signals2::signal<void (boost::uint32_t /* index */, boost::uint32_t /* value1 */, boost::uint32_t /* value2 */, boost::uint32_t /* value3 */)> MC_REQUEST_GAMEGUARD_AUTH_INDEX;

	// game client response new gameguard auth to server
	boost::signals2::signal<void (boost::uint32_t /* index */, boost::uint32_t /* value1 */, boost::uint32_t /* value2 */, boost::uint32_t /* value3 */)> MC_RESPONSE_GAMEGUARD_AUTH_INDEX;

	// requet new gameguard auth
	boost::signals2::signal<void (boost::uint32_t /* index */, boost::uint32_t /* value1 */, boost::uint32_t /* value2 */, boost::uint32_t /* value3 */)> MC_REQUEST_GAMEGUARD_AUTH_VALUE;

	// game client response new gameguard auth to server
	boost::signals2::signal<void (boost::uint32_t /* index */, boost::uint32_t /* value1 */, boost::uint32_t /* value2 */, boost::uint32_t /* value3 */)> MC_RESPONSE_GAMEGUARD_AUTH_VALUE;

	// give oneself up
	boost::signals2::signal<void ()> MC_REQUEST_GIVE_ONESELF_UP;

	// send gamble item info list to client
	boost::signals2::signal<void (boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> /* Gambleitemlist */)> MC_RESPONSE_GAMBLEITEMLIST;

	// route updated user equip info
	boost::signals2::signal<void (boost::uint64_t /* useruid */, boost::int32_t /* parts */, boost::int32_t /* itemid */)> MC_MATCH_ROUTE_UPDATE_STAGE_EQUIP_LOOK;

	// MC_REQUEST_RESOURCE_CRC32
	boost::signals2::signal<void (boost::uint32_t /* key */)> MC_REQUEST_RESOURCE_CRC32;

	// MC_RESPONSE_RESOURCE_CRC32
	boost::signals2::signal<void (boost::uint32_t /* crc32 */)> MC_RESPONSE_RESOURCE_CRC32;
};

}