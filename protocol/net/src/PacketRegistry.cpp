/*
 * NOTICE: Do not manually edit this file. It has been autogenerated by
 * protocol/parse.py. Any changes should me made there, instead of here.
 */
#include <net/PacketRegistry.h>
#include <boost/format.hpp>
#include <net/protocol/all>

using namespace std;
using namespace boost;

// The following are implemented in security.cpp
// If they throw ANY exception, the packet's parsing will be broken,
// the packet will be dropped, and OnFailedParse will be signaled.
// The extraction method MUST modify *currentParam to point to the
// next element in the parameter string.
int32_t extract_int32(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
uint32_t extract_uint32(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
float extract_float(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
bool extract_bool(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
string extract_string(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
array<float, 3> extract_position(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
array<float, 3> extract_direction(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
uint32_t extract_color(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
uint64_t extract_MUID(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
tuple<shared_array<uint8_t> /* data */, size_t /* count */, size_t /* size */>
extract_blob(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
array<uint16_t, 3> extract_vector(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
uint8_t extract_uint8(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
int16_t extract_int16(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
uint16_t extract_uint16(const uint8_t* paramStart, const uint8_t**currentParam, uint16_t packetLength);

namespace packet {

PacketRegistry::PacketRegistry()
{
}

PacketRegistry::~PacketRegistry()
{
}

void PacketRegistry::dispatch(uint16_t packetID,
                              const uint8_t* parameters,
                              uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	try {
		switch(packetID)
		{
		case ::packets::Local_Info::packetID:
			this->Local_Info();
			break;

		case ::packets::Local_Echo::packetID:
			this->Local_Echo();
			break;

		case ::packets::Local_Login::packetID:
			this->Local_Login();
			break;

		case ::packets::Help::packetID:
			this->Help();
			break;

		case ::packets::Version::packetID:
			this->Version();
			break;

		case ::packets::DebugTest::packetID:
			this->DebugTest();
			break;

		case ::packets::Net_Enum::packetID:
			this->Net_Enum();
			break;

		case ::packets::Net_Connect::packetID:
			this->Net_Connect();
			break;

		case ::packets::Net_Disconnect::packetID:
			this->Net_Disconnect();
			break;

		case ::packets::Net_Clear::packetID:
			this->Net_Clear();
			break;

		case ::packets::Net_CheckPing::packetID:
			this->Net_CheckPing();
			break;

		case ::packets::Net_Ping::packetID:
			this->Net_Ping();
			break;

		case ::packets::Net_Pong::packetID:
			this->Net_Pong();
			break;

		case ::packets::HShield_Ping::packetID:
			this->HShield_Ping();
			break;

		case ::packets::HShield_Pong::packetID:
			this->HShield_Pong();
			break;

		case ::packets::Net_OnConnect::packetID:
			this->Net_OnConnect();
			break;

		case ::packets::Net_OnDisConnect::packetID:
			this->Net_OnDisConnect();
			break;

		case ::packets::Net_OnError::packetID:
			this->Net_OnError();
			break;

		case ::packets::Net_ConnectToZoneServer::packetID:
			this->Net_ConnectToZoneServer();
			break;

		case ::packets::Net_RequestInfo::packetID:
			this->Net_RequestInfo();
			break;

		case ::packets::Net_ResponseInfo::packetID:
			this->Net_ResponseInfo();
			break;

		case ::packets::Net_Echo::packetID:
			this->Net_Echo();
			break;

		case ::packets::Match_Announce::packetID:
			this->Match_Announce();
			break;

		case ::packets::Clock_Synchronize::packetID:
			this->Clock_Synchronize();
			break;

		case ::packets::Match_Login::packetID:
			this->Match_Login();
			break;

		case ::packets::Match_ResponseLogin::packetID:
			this->Match_ResponseLogin();
			break;

		case ::packets::Match_Response_Result::packetID:
			this->Match_Response_Result();
			break;

		case ::packets::Match_LoginNetmarble::packetID:
			this->Match_LoginNetmarble();
			break;

		case ::packets::Match_LoginNetmarbleJP::packetID:
			this->Match_LoginNetmarbleJP();
			break;

		case ::packets::Match_LoginFromDBAgent::packetID:
			this->Match_LoginFromDBAgent();
			break;

		case ::packets::Match_LoginFailedFromDBAgent::packetID:
			this->Match_LoginFailedFromDBAgent();
			break;

		case ::packets::Match_FinH::packetID:
			this->Match_FinH();
			break;

		case ::packets::MC_MATCH_DISCONNMSG::packetID:
			this->MC_MATCH_DISCONNMSG();
			break;

		case ::packets::MC_MATCH_LOGIN_NHNUSA::packetID:
			this->MC_MATCH_LOGIN_NHNUSA();
			break;

		case ::packets::MC_MATCH_LOGIN_GAMEON_JP::packetID:
			this->MC_MATCH_LOGIN_GAMEON_JP();
			break;

		case ::packets::Match_ObjectCache::packetID:
			this->Match_ObjectCache();
			break;

		case ::packets::Match_BridgePeer::packetID:
			this->Match_BridgePeer();
			break;

		case ::packets::Match_BridgePeerACK::packetID:
			this->Match_BridgePeerACK();
			break;

		case ::packets::MatchServer_RequestRecommandedChannel::packetID:
			this->MatchServer_RequestRecommandedChannel();
			break;

		case ::packets::MatchServer_ResponseRecommandedChannel::packetID:
			this->MatchServer_ResponseRecommandedChannel();
			break;

		case ::packets::Channel_Join::packetID:
			this->Channel_Join();
			break;

		case ::packets::Channel_ResponseJoin::packetID:
			this->Channel_ResponseJoin();
			break;

		case ::packets::Channel_RequestJoinFromName::packetID:
			this->Channel_RequestJoinFromName();
			break;

		case ::packets::Channel_Leave::packetID:
			this->Channel_Leave();
			break;

		case ::packets::Channel_ListStart::packetID:
			this->Channel_ListStart();
			break;

		case ::packets::Channel_ListStop::packetID:
			this->Channel_ListStop();
			break;

		case ::packets::Channel_List::packetID:
			this->Channel_List();
			break;

		case ::packets::Channel_Request_Chat::packetID:
			this->Channel_Request_Chat();
			break;

		case ::packets::Channel_Chat::packetID:
			this->Channel_Chat();
			break;

		case ::packets::Channel_PlayerDumb::packetID:
			this->Channel_PlayerDumb();
			break;

		case ::packets::Channel_Request_Rule::packetID:
			this->Channel_Request_Rule();
			break;

		case ::packets::Channel_Response_Rule::packetID:
			this->Channel_Response_Rule();
			break;

		case ::packets::Channel_RequestAllPlayerList::packetID:
			this->Channel_RequestAllPlayerList();
			break;

		case ::packets::Channel_ResponseAllPlayerList::packetID:
			this->Channel_ResponseAllPlayerList();
			break;

		case ::packets::Stage_Create::packetID:
			this->Stage_Create();
			break;

		case ::packets::Stage_RequestJoin::packetID:
			this->Stage_RequestJoin();
			break;

		case ::packets::Stage_RequestPrivateJoin::packetID:
			this->Stage_RequestPrivateJoin();
			break;

		case ::packets::Stage_Join::packetID:
			this->Stage_Join();
			break;

		case ::packets::Stage_Leave::packetID:
			this->Stage_Leave();
			break;

		case ::packets::Stage_Request_PlayerList::packetID:
			this->Stage_Request_PlayerList();
			break;

		case ::packets::Stage_Follow::packetID:
			this->Stage_Follow();
			break;

		case ::packets::Stage_Response_Follow::packetID:
			this->Stage_Response_Follow();
			break;

		case ::packets::Stage_ResponseJoin::packetID:
			this->Stage_ResponseJoin();
			break;

		case ::packets::Stage_RequirePassword::packetID:
			this->Stage_RequirePassword();
			break;

		case ::packets::RequestGameInfo::packetID:
			this->RequestGameInfo();
			break;

		case ::packets::ResponseGameInfo::packetID:
			this->ResponseGameInfo();
			break;

		case ::packets::Stage_ResponseCreate::packetID:
			this->Stage_ResponseCreate();
			break;

		case ::packets::Stage_Request_EnterBattle::packetID:
			this->Stage_Request_EnterBattle();
			break;

		case ::packets::Stage_EnterBattle::packetID:
			this->Stage_EnterBattle();
			break;

		case ::packets::Stage_LeaveBattle::packetID:
			this->Stage_LeaveBattle();
			break;

		case ::packets::Stage_Start::packetID:
			this->Stage_Start();
			break;

		case ::packets::Stage_Map::packetID:
			this->Stage_Map();
			break;

		case ::packets::Stage_Chat::packetID:
			this->Stage_Chat();
			break;

		case ::packets::Stage_RequestQuickJoin::packetID:
			this->Stage_RequestQuickJoin();
			break;

		case ::packets::Stage_ResponseQuickJoin::packetID:
			this->Stage_ResponseQuickJoin();
			break;

		case ::packets::Stage_StageGo::packetID:
			this->Stage_StageGo();
			break;

		case ::packets::Stage_State::packetID:
			this->Stage_State();
			break;

		case ::packets::Stage_Team::packetID:
			this->Stage_Team();
			break;

		case ::packets::Stage_Master::packetID:
			this->Stage_Master();
			break;

		case ::packets::Stage_ListStart::packetID:
			this->Stage_ListStart();
			break;

		case ::packets::Stage_ListStop::packetID:
			this->Stage_ListStop();
			break;

		case ::packets::Stage_List::packetID:
			this->Stage_List();
			break;

		case ::packets::Stage_RequestStageList::packetID:
			this->Stage_RequestStageList();
			break;

		case ::packets::Channel_RequestPlayerList::packetID:
			this->Channel_RequestPlayerList();
			break;

		case ::packets::Channel_ResponsePlayerList::packetID:
			this->Channel_ResponsePlayerList();
			break;

		case ::packets::Stage_RequestStageSetting::packetID:
			this->Stage_RequestStageSetting();
			break;

		case ::packets::Stage_ResponseStageSetting::packetID:
			this->Stage_ResponseStageSetting();
			break;

		case ::packets::Stage_StageSetting::packetID:
			this->Stage_StageSetting();
			break;

		case ::packets::Stage_Launch::packetID:
			this->Stage_Launch();
			break;

		case ::packets::Stage_Finish::packetID:
			this->Stage_Finish();
			break;

		case ::packets::Stage_RequestPeerList::packetID:
			this->Stage_RequestPeerList();
			break;

		case ::packets::Stage_ResponsePeerList::packetID:
			this->Stage_ResponsePeerList();
			break;

		case ::packets::Loading_Complete::packetID:
			this->Loading_Complete();
			break;

		case ::packets::Match_RequestPeerRelay::packetID:
			this->Match_RequestPeerRelay();
			break;

		case ::packets::Match_ResponsePeerRelay::packetID:
			this->Match_ResponsePeerRelay();
			break;

		case ::packets::Stage_RoundState::packetID:
			this->Stage_RoundState();
			break;

		case ::packets::Game_Kill::packetID:
			this->Game_Kill();
			break;

		case ::packets::Game_Requst_Spawn::packetID:
			this->Game_Requst_Spawn();
			break;

		case ::packets::Game_Response_Spawn::packetID:
			this->Game_Response_Spawn();
			break;

		case ::packets::Game_LevelUp::packetID:
			this->Game_LevelUp();
			break;

		case ::packets::Game_LevelDown::packetID:
			this->Game_LevelDown();
			break;

		case ::packets::Game_Dead::packetID:
			this->Game_Dead();
			break;

		case ::packets::Game_TeamBonus::packetID:
			this->Game_TeamBonus();
			break;

		case ::packets::Game_RequestTimeSync::packetID:
			this->Game_RequestTimeSync();
			break;

		case ::packets::Game_ResponseTimeSync::packetID:
			this->Game_ResponseTimeSync();
			break;

		case ::packets::Game_ReportTimeSync::packetID:
			this->Game_ReportTimeSync();
			break;

		case ::packets::Stage_RequestForcedEntry::packetID:
			this->Stage_RequestForcedEntry();
			break;

		case ::packets::Stage_ResponseForcedEntry::packetID:
			this->Stage_ResponseForcedEntry();
			break;

		case ::packets::Stage_RoundFinishInfo::packetID:
			this->Stage_RoundFinishInfo();
			break;

		case ::packets::Match_Notify::packetID:
			this->Match_Notify();
			break;

		case ::packets::Match_Whisper::packetID:
			this->Match_Whisper();
			break;

		case ::packets::Match_Where::packetID:
			this->Match_Where();
			break;

		case ::packets::Match_UserOption::packetID:
			this->Match_UserOption();
			break;

		case ::packets::ChatRoom_Create::packetID:
			this->ChatRoom_Create();
			break;

		case ::packets::ChatRoom_Join::packetID:
			this->ChatRoom_Join();
			break;

		case ::packets::ChatRoom_Leave::packetID:
			this->ChatRoom_Leave();
			break;

		case ::packets::ChatRoom_SelectWrite::packetID:
			this->ChatRoom_SelectWrite();
			break;

		case ::packets::ChatRoom_Invite::packetID:
			this->ChatRoom_Invite();
			break;

		case ::packets::ChatRoom_Chat::packetID:
			this->ChatRoom_Chat();
			break;

		case ::packets::Match_RequestAccountCharList::packetID:
			this->Match_RequestAccountCharList();
			break;

		case ::packets::Match_ResponseAccountCharList::packetID:
			this->Match_ResponseAccountCharList();
			break;

		case ::packets::Match_RequestAccountCharInfo::packetID:
			this->Match_RequestAccountCharInfo();
			break;

		case ::packets::Match_ResponseAccountCharInfo::packetID:
			this->Match_ResponseAccountCharInfo();
			break;

		case ::packets::Match_RequestSelectChar::packetID:
			this->Match_RequestSelectChar();
			break;

		case ::packets::Match_ResponseSelectChar::packetID:
			this->Match_ResponseSelectChar();
			break;

		case ::packets::Match_RequestCharInfo::packetID:
			this->Match_RequestCharInfo();
			break;

		case ::packets::Match_ResponseCharInfo::packetID:
			this->Match_ResponseCharInfo();
			break;

		case ::packets::Match_RequestDeleteChar::packetID:
			this->Match_RequestDeleteChar();
			break;

		case ::packets::Match_ResponseDeleteChar::packetID:
			this->Match_ResponseDeleteChar();
			break;

		case ::packets::Match_RequestCreateChar::packetID:
			this->Match_RequestCreateChar();
			break;

		case ::packets::Match_ResponseCreateChar::packetID:
			this->Match_ResponseCreateChar();
			break;

		case ::packets::Match_RequestCopyToTestServer::packetID:
			this->Match_RequestCopyToTestServer();
			break;

		case ::packets::Match_ResponseCopyToTestServer::packetID:
			this->Match_ResponseCopyToTestServer();
			break;

		case ::packets::Match_RequestCharInfoDetail::packetID:
			this->Match_RequestCharInfoDetail();
			break;

		case ::packets::Match_ResponseCharInfoDetail::packetID:
			this->Match_ResponseCharInfoDetail();
			break;

		case ::packets::Match_RequestSimpleCharInfo::packetID:
			this->Match_RequestSimpleCharInfo();
			break;

		case ::packets::Match_ResponseSimpleCharInfo::packetID:
			this->Match_ResponseSimpleCharInfo();
			break;

		case ::packets::Match_RequestMySimpleCharInfo::packetID:
			this->Match_RequestMySimpleCharInfo();
			break;

		case ::packets::Match_ResponseMySimpleCharInfo::packetID:
			this->Match_ResponseMySimpleCharInfo();
			break;

		case ::packets::Match_RequestBuyItem::packetID:
			this->Match_RequestBuyItem();
			break;

		case ::packets::Match_ResponseBuyItem::packetID:
			this->Match_ResponseBuyItem();
			break;

		case ::packets::Match_RequestSellItem::packetID:
			this->Match_RequestSellItem();
			break;

		case ::packets::Match_ResponseSellItem::packetID:
			this->Match_ResponseSellItem();
			break;

		case ::packets::Match_RequestShopItemList::packetID:
			this->Match_RequestShopItemList();
			break;

		case ::packets::Match_ResponseShopItemList::packetID:
			this->Match_ResponseShopItemList();
			break;

		case ::packets::Match_RequestCharacterItemList::packetID:
			this->Match_RequestCharacterItemList();
			break;

		case ::packets::Match_RequestCharacterItemListForce::packetID:
			this->Match_RequestCharacterItemListForce();
			break;

		case ::packets::Match_ResponseCharacterItemList::packetID:
			this->Match_ResponseCharacterItemList();
			break;

		case ::packets::MatchRequestEquipItem::packetID:
			this->MatchRequestEquipItem();
			break;

		case ::packets::MatchResponseEquipItem::packetID:
			this->MatchResponseEquipItem();
			break;

		case ::packets::MatchRequestTakeoffItem::packetID:
			this->MatchRequestTakeoffItem();
			break;

		case ::packets::MatchResponseTakeoffItem::packetID:
			this->MatchResponseTakeoffItem();
			break;

		case ::packets::Match_RequestAccountItemList::packetID:
			this->Match_RequestAccountItemList();
			break;

		case ::packets::Match_ResponseAccountItemList::packetID:
			this->Match_ResponseAccountItemList();
			break;

		case ::packets::Match_RequestBringAccountItem::packetID:
			this->Match_RequestBringAccountItem();
			break;

		case ::packets::Match_ResponseBringAccountItem::packetID:
			this->Match_ResponseBringAccountItem();
			break;

		case ::packets::Match_RequestBringBackAccountItem::packetID:
			this->Match_RequestBringBackAccountItem();
			break;

		case ::packets::Match_ResponseBringBackAccountItem::packetID:
			this->Match_ResponseBringBackAccountItem();
			break;

		case ::packets::Match_ExpiredRentItem::packetID:
			this->Match_ExpiredRentItem();
			break;

		case ::packets::Match_ItemGamble::packetID:
			this->Match_ItemGamble();
			break;

		case ::packets::Match_GambleResultItem::packetID:
			this->Match_GambleResultItem();
			break;

		case ::packets::Match_Request_Suicide::packetID:
			this->Match_Request_Suicide();
			break;

		case ::packets::Match_Response_Suicide::packetID:
			this->Match_Response_Suicide();
			break;

		case ::packets::Match_Response_SuicideReserve::packetID:
			this->Match_Response_SuicideReserve();
			break;

		case ::packets::Match_Request_Obtain_WorldItem::packetID:
			this->Match_Request_Obtain_WorldItem();
			break;

		case ::packets::Match_WorldItem_Obtain::packetID:
			this->Match_WorldItem_Obtain();
			break;

		case ::packets::Match_WorldItem_Spawn::packetID:
			this->Match_WorldItem_Spawn();
			break;

		case ::packets::Match_Request_Spawn_WorldItem::packetID:
			this->Match_Request_Spawn_WorldItem();
			break;

		case ::packets::Match_Request_Spawn_WorldItem_UID::packetID:
			this->Match_Request_Spawn_WorldItem_UID();
			break;

		case ::packets::Match_Reset_TeamMembers::packetID:
			this->Match_Reset_TeamMembers();
			break;

		case ::packets::Match_Assign_Commander::packetID:
			this->Match_Assign_Commander();
			break;

		case ::packets::Match_Set_Observer::packetID:
			this->Match_Set_Observer();
			break;

		case ::packets::Match_Ladder_Request_Challenge::packetID:
			this->Match_Ladder_Request_Challenge();
			break;

		case ::packets::Match_Ladder_Response_Challenge::packetID:
			this->Match_Ladder_Response_Challenge();
			break;

		case ::packets::Match_Ladder_SearchRival::packetID:
			this->Match_Ladder_SearchRival();
			break;

		case ::packets::Match_Ladder_Request_CancelChallenge::packetID:
			this->Match_Ladder_Request_CancelChallenge();
			break;

		case ::packets::Match_Ladder_CancelChallenge::packetID:
			this->Match_Ladder_CancelChallenge();
			break;

		case ::packets::Ladder_Prepare::packetID:
			this->Ladder_Prepare();
			break;

		case ::packets::Ladder_Launch::packetID:
			this->Ladder_Launch();
			break;

		case ::packets::Match_RequestProposal::packetID:
			this->Match_RequestProposal();
			break;

		case ::packets::Match_ResponseProposal::packetID:
			this->Match_ResponseProposal();
			break;

		case ::packets::Match_AskAgreement::packetID:
			this->Match_AskAgreement();
			break;

		case ::packets::Match_ReplyAgreement::packetID:
			this->Match_ReplyAgreement();
			break;

		case ::packets::Match_Friend_Add::packetID:
			this->Match_Friend_Add();
			break;

		case ::packets::Match_Friend_Remove::packetID:
			this->Match_Friend_Remove();
			break;

		case ::packets::Match_Friend_List::packetID:
			this->Match_Friend_List();
			break;

		case ::packets::Match_Response_FriendList::packetID:
			this->Match_Response_FriendList();
			break;

		case ::packets::Match_Friend_Msg::packetID:
			this->Match_Friend_Msg();
			break;

		case ::packets::Match_Clan_RequestCreateClan::packetID:
			this->Match_Clan_RequestCreateClan();
			break;

		case ::packets::Match_Clan_ResponseCreateClan::packetID:
			this->Match_Clan_ResponseCreateClan();
			break;

		case ::packets::Match_Clan_AskSponsorAgreement::packetID:
			this->Match_Clan_AskSponsorAgreement();
			break;

		case ::packets::Match_Clan_AnswerSponsorAgreement::packetID:
			this->Match_Clan_AnswerSponsorAgreement();
			break;

		case ::packets::Match_Clan_RequestAgreedCreateClan::packetID:
			this->Match_Clan_RequestAgreedCreateClan();
			break;

		case ::packets::Match_Clan_AgreedResponseCreateClan::packetID:
			this->Match_Clan_AgreedResponseCreateClan();
			break;

		case ::packets::Match_Clan_RequestCloseClan::packetID:
			this->Match_Clan_RequestCloseClan();
			break;

		case ::packets::Match_Clan_ResponseCloseClan::packetID:
			this->Match_Clan_ResponseCloseClan();
			break;

		case ::packets::Match_Clan_RequestJoinClan::packetID:
			this->Match_Clan_RequestJoinClan();
			break;

		case ::packets::Match_Clan_ResponseJoinClan::packetID:
			this->Match_Clan_ResponseJoinClan();
			break;

		case ::packets::Match_Clan_AskJoinAgreement::packetID:
			this->Match_Clan_AskJoinAgreement();
			break;

		case ::packets::Match_Clan_AnswerJoinAgreement::packetID:
			this->Match_Clan_AnswerJoinAgreement();
			break;

		case ::packets::Match_Clan_RequestAgreedJoinClan::packetID:
			this->Match_Clan_RequestAgreedJoinClan();
			break;

		case ::packets::Match_Clan_ResponseAgreedJoinClan::packetID:
			this->Match_Clan_ResponseAgreedJoinClan();
			break;

		case ::packets::Match_Clan_RequestLeaveClan::packetID:
			this->Match_Clan_RequestLeaveClan();
			break;

		case ::packets::Match_Clan_ResponseLeaveClan::packetID:
			this->Match_Clan_ResponseLeaveClan();
			break;

		case ::packets::Match_Clan_UpdateCharClanInfo::packetID:
			this->Match_Clan_UpdateCharClanInfo();
			break;

		case ::packets::Match_Clan_Master_RequestChangeGrade::packetID:
			this->Match_Clan_Master_RequestChangeGrade();
			break;

		case ::packets::Match_Clan_Master_ResponseChangeGrade::packetID:
			this->Match_Clan_Master_ResponseChangeGrade();
			break;

		case ::packets::Match_Clan_Admin_RequestExpelMember::packetID:
			this->Match_Clan_Admin_RequestExpelMember();
			break;

		case ::packets::Match_Clan_Admin_ResponseLeaveMember::packetID:
			this->Match_Clan_Admin_ResponseLeaveMember();
			break;

		case ::packets::Match_Clan_Request_Msg::packetID:
			this->Match_Clan_Request_Msg();
			break;

		case ::packets::Match_Clan_Msg::packetID:
			this->Match_Clan_Msg();
			break;

		case ::packets::Match_Clan_Request_ClanMemberList::packetID:
			this->Match_Clan_Request_ClanMemberList();
			break;

		case ::packets::Match_Clan_Response_ClanMemberList::packetID:
			this->Match_Clan_Response_ClanMemberList();
			break;

		case ::packets::Match_Clan_Request_Clan_Info::packetID:
			this->Match_Clan_Request_Clan_Info();
			break;

		case ::packets::Match_Clan_Response_Clan_Info::packetID:
			this->Match_Clan_Response_Clan_Info();
			break;

		case ::packets::Match_Clan_Standby_ClanList::packetID:
			this->Match_Clan_Standby_ClanList();
			break;

		case ::packets::Match_Clan_Member_Connected::packetID:
			this->Match_Clan_Member_Connected();
			break;

		case ::packets::Match_Clan_Request_EmblemURL::packetID:
			this->Match_Clan_Request_EmblemURL();
			break;

		case ::packets::Match_Clan_Response_EmblemURL::packetID:
			this->Match_Clan_Response_EmblemURL();
			break;

		case ::packets::Match_Clan_Local_EmblemReady::packetID:
			this->Match_Clan_Local_EmblemReady();
			break;

		case ::packets::MC_MATCH_CLAN_ACCOUNCE_DELETE::packetID:
			this->MC_MATCH_CLAN_ACCOUNCE_DELETE();
			break;

		case ::packets::Match_Callvote::packetID:
			this->Match_Callvote();
			break;

		case ::packets::Match_NotifyCallvote::packetID:
			this->Match_NotifyCallvote();
			break;

		case ::packets::Match_NotifyVoteResult::packetID:
			this->Match_NotifyVoteResult();
			break;

		case ::packets::Match_VoteYes::packetID:
			this->Match_VoteYes();
			break;

		case ::packets::Match_VoteNo::packetID:
			this->Match_VoteNo();
			break;

		case ::packets::Votestop::packetID:
			this->Votestop();
			break;

		case ::packets::Match_Broadcast_ClanRenewVictories::packetID:
			this->Match_Broadcast_ClanRenewVictories();
			break;

		case ::packets::Match_Broadcast_ClanInterruptVictories::packetID:
			this->Match_Broadcast_ClanInterruptVictories();
			break;

		case ::packets::Match_Broadcast_DuelRenewVictories::packetID:
			this->Match_Broadcast_DuelRenewVictories();
			break;

		case ::packets::Match_Broadcast_DuelInterruptVictories::packetID:
			this->Match_Broadcast_DuelInterruptVictories();
			break;

		case ::packets::Match_Assign_Berserker::packetID:
			this->Match_Assign_Berserker();
			break;

		case ::packets::Match_Duel_QueueInfo::packetID:
			this->Match_Duel_QueueInfo();
			break;

		case ::packets::Match_Quest_Ping::packetID:
			this->Match_Quest_Ping();
			break;

		case ::packets::Match_Quest_Pong::packetID:
			this->Match_Quest_Pong();
			break;

		case ::packets::MC_QUEST_NPCLIST::packetID:
			this->MC_QUEST_NPCLIST();
			break;

		case ::packets::Event_ChangeMaster::packetID:
			this->Event_ChangeMaster();
			break;

		case ::packets::Event_ChangePassword::packetID:
			this->Event_ChangePassword();
			break;

		case ::packets::Event_RequestJJang::packetID:
			this->Event_RequestJJang();
			break;

		case ::packets::Event_RemoveJJang::packetID:
			this->Event_RemoveJJang();
			break;

		case ::packets::Event_UpdateJJang::packetID:
			this->Event_UpdateJJang();
			break;

		case ::packets::Quest_NPCSpawn::packetID:
			this->Quest_NPCSpawn();
			break;

		case ::packets::Quest_Entrust_NPC_Control::packetID:
			this->Quest_Entrust_NPC_Control();
			break;

		case ::packets::Quest_Checksum_NPCInfo::packetID:
			this->Quest_Checksum_NPCInfo();
			break;

		case ::packets::Quest_Request_NPCDead::packetID:
			this->Quest_Request_NPCDead();
			break;

		case ::packets::Quest_NPCDead::packetID:
			this->Quest_NPCDead();
			break;

		case ::packets::Quest_RefreshPlayerStatus::packetID:
			this->Quest_RefreshPlayerStatus();
			break;

		case ::packets::Quest_NPC_AllClear::packetID:
			this->Quest_NPC_AllClear();
			break;

		case ::packets::Quest_Round_Start::packetID:
			this->Quest_Round_Start();
			break;

		case ::packets::Quest_RequestDead::packetID:
			this->Quest_RequestDead();
			break;

		case ::packets::Quest_PlayerDead::packetID:
			this->Quest_PlayerDead();
			break;

		case ::packets::Quest_ObtainQuestItem::packetID:
			this->Quest_ObtainQuestItem();
			break;

		case ::packets::Quest_ObtainZItem::packetID:
			this->Quest_ObtainZItem();
			break;

		case ::packets::Quest_State_Mapset::packetID:
			this->Quest_State_Mapset();
			break;

		case ::packets::Quest_Stage_GameInfo::packetID:
			this->Quest_Stage_GameInfo();
			break;

		case ::packets::Quest_SectorBonus::packetID:
			this->Quest_SectorBonus();
			break;

		case ::packets::Quest_GameInfo::packetID:
			this->Quest_GameInfo();
			break;

		case ::packets::Quest_Combat_State::packetID:
			this->Quest_Combat_State();
			break;

		case ::packets::Quest_Sector_Start::packetID:
			this->Quest_Sector_Start();
			break;

		case ::packets::Quest_Complete::packetID:
			this->Quest_Complete();
			break;

		case ::packets::Quest_Failed::packetID:
			this->Quest_Failed();
			break;

		case ::packets::Quest_Request_Moveto_Portal::packetID:
			this->Quest_Request_Moveto_Portal();
			break;

		case ::packets::Quest_Moveto_Portal::packetID:
			this->Quest_Moveto_Portal();
			break;

		case ::packets::Quest_Readyto_NewSector::packetID:
			this->Quest_Readyto_NewSector();
			break;

		case ::packets::Quest_Peer_NPC_BasicInfo::packetID:
			this->Quest_Peer_NPC_BasicInfo();
			break;

		case ::packets::Quest_Peer_NPC_HPInfo::packetID:
			this->Quest_Peer_NPC_HPInfo();
			break;

		case ::packets::Quest_Peer_NPC_Attack_Melee::packetID:
			this->Quest_Peer_NPC_Attack_Melee();
			break;

		case ::packets::Quest_Peer_NPC_Attack_Range::packetID:
			this->Quest_Peer_NPC_Attack_Range();
			break;

		case ::packets::Quest_Peer_NPC_Skill_Start::packetID:
			this->Quest_Peer_NPC_Skill_Start();
			break;

		case ::packets::Quest_Peer_NPC_Skill_Execute::packetID:
			this->Quest_Peer_NPC_Skill_Execute();
			break;

		case ::packets::Quest_Peer_NPC_Dead::packetID:
			this->Quest_Peer_NPC_Dead();
			break;

		case ::packets::Quest_Test_RequestNPCSpawn::packetID:
			this->Quest_Test_RequestNPCSpawn();
			break;

		case ::packets::Quest_Test_ClearNPC::packetID:
			this->Quest_Test_ClearNPC();
			break;

		case ::packets::Quest_Test_SectorClear::packetID:
			this->Quest_Test_SectorClear();
			break;

		case ::packets::Quest_Test_Finish::packetID:
			this->Quest_Test_Finish();
			break;

		case ::packets::Test_BirdTest1::packetID:
			this->Test_BirdTest1();
			break;

		case ::packets::Test_PeerTest_Ping::packetID:
			this->Test_PeerTest_Ping();
			break;

		case ::packets::Test_PeerTest_Pong::packetID:
			this->Test_PeerTest_Pong();
			break;

		case ::packets::Admin_Announce::packetID:
			this->Admin_Announce();
			break;

		case ::packets::Admin_PingToAll::packetID:
			this->Admin_PingToAll();
			break;

		case ::packets::Admin_RequestServerInfo::packetID:
			this->Admin_RequestServerInfo();
			break;

		case ::packets::Admin_ResponseServerInfo::packetID:
			this->Admin_ResponseServerInfo();
			break;

		case ::packets::Admin_Halt::packetID:
			this->Admin_Halt();
			break;

		case ::packets::Admin_Terminal::packetID:
			this->Admin_Terminal();
			break;

		case ::packets::Admin_RequestUpdateAccountUGrade::packetID:
			this->Admin_RequestUpdateAccountUGrade();
			break;

		case ::packets::Admin_ResponseUpdateAccountUGrade::packetID:
			this->Admin_ResponseUpdateAccountUGrade();
			break;

		case ::packets::Admin_RequestBanPlayer::packetID:
			this->Admin_RequestBanPlayer();
			break;

		case ::packets::Admin_ResponseBanPlayer::packetID:
			this->Admin_ResponseBanPlayer();
			break;

		case ::packets::Admin_RequestSwitchLadderGame::packetID:
			this->Admin_RequestSwitchLadderGame();
			break;

		case ::packets::Admin_Hide::packetID:
			this->Admin_Hide();
			break;

		case ::packets::Admin_ReloadClientHash::packetID:
			this->Admin_ReloadClientHash();
			break;

		case ::packets::MC_ADMIN_RESET_ALL_HACKING_BLOCK::packetID:
			this->MC_ADMIN_RESET_ALL_HACKING_BLOCK();
			break;

		case ::packets::MC_ADMIN_RELOAD_GAMBLEITEM::packetID:
			this->MC_ADMIN_RELOAD_GAMBLEITEM();
			break;

		case ::packets::MC_ADMIN_DUMP_GAMBLEITEM_LOG::packetID:
			this->MC_ADMIN_DUMP_GAMBLEITEM_LOG();
			break;

		case ::packets::MC_ADMIN_ASSASIN::packetID:
			this->MC_ADMIN_ASSASIN();
			break;

		case ::packets::Net_RequestUID::packetID:
			this->Net_RequestUID();
			break;

		case ::packets::Net_ResponseUID::packetID:
			this->Net_ResponseUID();
			break;

		case ::packets::Peer_Open::packetID:
			this->Peer_Open();
			break;

		case ::packets::Peer_Move::packetID:
			this->Peer_Move();
			break;

		case ::packets::Peer_ObjectChangeWeapon::packetID:
			this->Peer_ObjectChangeWeapon();
			break;

		case ::packets::Peer_ObjectChangeParts::packetID:
			this->Peer_ObjectChangeParts();
			break;

		case ::packets::Peer_ObjectAttack::packetID:
			this->Peer_ObjectAttack();
			break;

		case ::packets::Peer_ObjectDamage::packetID:
			this->Peer_ObjectDamage();
			break;

		case ::packets::Peer_Chat::packetID:
			this->Peer_Chat();
			break;

		case ::packets::Peer_ChatIcon::packetID:
			this->Peer_ChatIcon();
			break;

		case ::packets::Peer_Reaction::packetID:
			this->Peer_Reaction();
			break;

		case ::packets::Peer_EnchantDamage::packetID:
			this->Peer_EnchantDamage();
			break;

		case ::packets::Peer_Shot::packetID:
			this->Peer_Shot();
			break;

		case ::packets::Peer_Shot_Melee::packetID:
			this->Peer_Shot_Melee();
			break;

		case ::packets::Peer_Shot_Sp::packetID:
			this->Peer_Shot_Sp();
			break;

		case ::packets::Peer_Reload::packetID:
			this->Peer_Reload();
			break;

		case ::packets::Peer_ObjectSpMotion::packetID:
			this->Peer_ObjectSpMotion();
			break;

		case ::packets::Peer_ChangeCharacter::packetID:
			this->Peer_ChangeCharacter();
			break;

		case ::packets::Peer_Die::packetID:
			this->Peer_Die();
			break;

		case ::packets::Peer_Spawn::packetID:
			this->Peer_Spawn();
			break;

		case ::packets::Peer_Dash::packetID:
			this->Peer_Dash();
			break;

		case ::packets::Peer_ObjectSkill::packetID:
			this->Peer_ObjectSkill();
			break;

		case ::packets::Peer_CharacterBasicInfo::packetID:
			this->Peer_CharacterBasicInfo();
			break;

		case ::packets::Peer_CharacterHPInfo::packetID:
			this->Peer_CharacterHPInfo();
			break;

		case ::packets::Peer_CharacterHPAPInfo::packetID:
			this->Peer_CharacterHPAPInfo();
			break;

		case ::packets::Peer_UDPTest::packetID:
			this->Peer_UDPTest();
			break;

		case ::packets::Peer_UDPTestReply::packetID:
			this->Peer_UDPTestReply();
			break;

		case ::packets::Peer_Ping::packetID:
			this->Peer_Ping();
			break;

		case ::packets::Peer_Pong::packetID:
			this->Peer_Pong();
			break;

		case ::packets::Agent_Connect::packetID:
			this->Agent_Connect();
			break;

		case ::packets::Agent_Disconnect::packetID:
			this->Agent_Disconnect();
			break;

		case ::packets::Agent_LocalLogin::packetID:
			this->Agent_LocalLogin();
			break;

		case ::packets::Match_RegisterAgent::packetID:
			this->Match_RegisterAgent();
			break;

		case ::packets::Match_UnRegisterAgent::packetID:
			this->Match_UnRegisterAgent();
			break;

		case ::packets::Match_Agent_RequestLiveCheck::packetID:
			this->Match_Agent_RequestLiveCheck();
			break;

		case ::packets::Match_Agent_ResponseLiveCheck::packetID:
			this->Match_Agent_ResponseLiveCheck();
			break;

		case ::packets::Agent_StageReserve::packetID:
			this->Agent_StageReserve();
			break;

		case ::packets::Agent_StageRelease::packetID:
			this->Agent_StageRelease();
			break;

		case ::packets::Agent_StageReady::packetID:
			this->Agent_StageReady();
			break;

		case ::packets::Agent_RelayPeer::packetID:
			this->Agent_RelayPeer();
			break;

		case ::packets::Agent_PeerReady::packetID:
			this->Agent_PeerReady();
			break;

		case ::packets::Agent_LocateToClient::packetID:
			this->Agent_LocateToClient();
			break;

		case ::packets::Agent_ResponseLogin::packetID:
			this->Agent_ResponseLogin();
			break;

		case ::packets::Agent_PeerBindTCP::packetID:
			this->Agent_PeerBindTCP();
			break;

		case ::packets::Agent_PeerBindUDP::packetID:
			this->Agent_PeerBindUDP();
			break;

		case ::packets::Agent_PeerUnbind::packetID:
			this->Agent_PeerUnbind();
			break;

		case ::packets::Agent_Error::packetID:
			this->Agent_Error();
			break;

		case ::packets::Agent_TunnelingTCP::packetID:
			this->Agent_TunnelingTCP();
			break;

		case ::packets::Agent_TunnelingUDP::packetID:
			this->Agent_TunnelingUDP();
			break;

		case ::packets::Agent_AllowTunnelingTCP::packetID:
			this->Agent_AllowTunnelingTCP();
			break;

		case ::packets::Agent_AllowTunnelingUDP::packetID:
			this->Agent_AllowTunnelingUDP();
			break;

		case ::packets::Agent_DebugPing::packetID:
			this->Agent_DebugPing();
			break;

		case ::packets::Agent_DebugTest::packetID:
			this->Agent_DebugTest();
			break;

		case ::packets::Peer_Ping_Time::packetID:
			this->Peer_Ping_Time();
			break;

		case ::packets::Peer_Pong_Time::packetID:
			this->Peer_Pong_Time();
			break;

		case ::packets::Announce_::packetID:
			this->Announce_();
			break;

		case ::packets::Announce_Schedule::packetID:
			this->Announce_Schedule();
			break;

		case ::packets::Switchclanserverstatus_change::packetID:
			this->Switchclanserverstatus_change();
			break;

		case ::packets::Switchclanserverstatus_up_::packetID:
			this->Switchclanserverstatus_up_();
			break;

		case ::packets::MC_MATCH_SCHEDULE_STOP_SERVER::packetID:
			this->MC_MATCH_SCHEDULE_STOP_SERVER();
			break;

		case ::packets::test::packetID:
			this->test();
			break;

		case ::packets::MC_RESPONSE_KEEPER_MANAGER_CONNECT::packetID:
			this->MC_RESPONSE_KEEPER_MANAGER_CONNECT();
			break;

		case ::packets::MC_REQUEST_KEEPERMGR_ANNOUNCE::packetID:
			this->MC_REQUEST_KEEPERMGR_ANNOUNCE();
			break;

		case ::packets::MC_REQUEST_KEEPER_ANNOUNCE::packetID:
			this->MC_REQUEST_KEEPER_ANNOUNCE();
			break;

		case ::packets::Checkping::packetID:
			this->Checkping();
			break;

		case ::packets::requestmatchserverstatus::packetID:
			this->requestmatchserverstatus();
			break;

		case ::packets::responsematchserverststus::packetID:
			this->responsematchserverststus();
			break;

		case ::packets::MC_REQUEST_DOWNLOAD_SERVER_PATCH_FILE::packetID:
			this->MC_REQUEST_DOWNLOAD_SERVER_PATCH_FILE();
			break;

		case ::packets::MC_REQUEST_STOP_SERVER::packetID:
			this->MC_REQUEST_STOP_SERVER();
			break;

		case ::packets::MC_REQUEST_CONNECTION_STATE::packetID:
			this->MC_REQUEST_CONNECTION_STATE();
			break;

		case ::packets::MC_RESPONSE_CONNECTION_STATE::packetID:
			this->MC_RESPONSE_CONNECTION_STATE();
			break;

		case ::packets::MC_REQUEST_SERVER_HEARBEAT::packetID:
			this->MC_REQUEST_SERVER_HEARBEAT();
			break;

		case ::packets::MC_RESPONSE_SERVER_HEARHEAT::packetID:
			this->MC_RESPONSE_SERVER_HEARHEAT();
			break;

		case ::packets::MC_REQUEST_START_SERVER::packetID:
			this->MC_REQUEST_START_SERVER();
			break;

		case ::packets::MC_REQUEST_KEEPER_CONNECT_MATCHSERVER::packetID:
			this->MC_REQUEST_KEEPER_CONNECT_MATCHSERVER();
			break;

		case ::packets::MC_RESPONSE_KEEPER_CONNECT_MATCHSERVER::packetID:
			this->MC_RESPONSE_KEEPER_CONNECT_MATCHSERVER();
			break;

		case ::packets::MC_REQUEST_REFRESH_SERVER::packetID:
			this->MC_REQUEST_REFRESH_SERVER();
			break;

		case ::packets::MC_REQUEST_PREPARE_SERVER_PATCH::packetID:
			this->MC_REQUEST_PREPARE_SERVER_PATCH();
			break;

		case ::packets::MC_REQUEST_SERVER_PATCH::packetID:
			this->MC_REQUEST_SERVER_PATCH();
			break;

		case ::packets::MC_REQUEST_LAST_JOB_STATE::packetID:
			this->MC_REQUEST_LAST_JOB_STATE();
			break;

		case ::packets::MC_RESPONSE_LAST_JOB_STATE::packetID:
			this->MC_RESPONSE_LAST_JOB_STATE();
			break;

		case ::packets::MC_REQUEST_CONFIG_STATE::packetID:
			this->MC_REQUEST_CONFIG_STATE();
			break;

		case ::packets::MC_RESPONSE_CONFIG_STATE::packetID:
			this->MC_RESPONSE_CONFIG_STATE();
			break;

		case ::packets::MC_REQUEST_SET_ONE_CONFIG::packetID:
			this->MC_REQUEST_SET_ONE_CONFIG();
			break;

		case ::packets::MC_RESPONSE_SET_ONE_CONFIG::packetID:
			this->MC_RESPONSE_SET_ONE_CONFIG();
			break;

		case ::packets::MC_REQUEST_STOP_AGENT_SERVER::packetID:
			this->MC_REQUEST_STOP_AGENT_SERVER();
			break;

		case ::packets::MC_REQUEST_START_AGENT_SERVER::packetID:
			this->MC_REQUEST_START_AGENT_SERVER();
			break;

		case ::packets::MC_REQUEST_DOWNLOAD_AGENT_PATCH_FILE::packetID:
			this->MC_REQUEST_DOWNLOAD_AGENT_PATCH_FILE();
			break;

		case ::packets::MC_REQUEST_PREPARE_AGENT_PATCH::packetID:
			this->MC_REQUEST_PREPARE_AGENT_PATCH();
			break;

		case ::packets::MC_REQUEST_AGENT_PATCH::packetID:
			this->MC_REQUEST_AGENT_PATCH();
			break;

		case ::packets::MC_REQUEST_RESET_PATCH::packetID:
			this->MC_REQUEST_RESET_PATCH();
			break;

		case ::packets::MC_REQUEST_DISCONNECT_SERVER::packetID:
			this->MC_REQUEST_DISCONNECT_SERVER();
			break;

		case ::packets::MC_REQUEST_REBOOT_WINDOWS::packetID:
			this->MC_REQUEST_REBOOT_WINDOWS();
			break;

		case ::packets::MC_REQUEST_ANNOUNCE_STOP_SERVER::packetID:
			this->MC_REQUEST_ANNOUNCE_STOP_SERVER();
			break;

		case ::packets::MC_RESPONSE_ANNOUNCE_STOP_SERVER::packetID:
			this->MC_RESPONSE_ANNOUNCE_STOP_SERVER();
			break;

		case ::packets::MC_REQUEST_KEEPER_MANAGER_SCHEDULE::packetID:
			this->MC_REQUEST_KEEPER_MANAGER_SCHEDULE();
			break;

		case ::packets::MC_RESPONSE_KEEPER_MANAGER_SCHEDULE::packetID:
			this->MC_RESPONSE_KEEPER_MANAGER_SCHEDULE();
			break;

		case ::packets::MC_REQUEST_SERVER_AGENT_STATE::packetID:
			this->MC_REQUEST_SERVER_AGENT_STATE();
			break;

		case ::packets::MC_RESPONSE_SERVER_AGENT_STATE::packetID:
			this->MC_RESPONSE_SERVER_AGENT_STATE();
			break;

		case ::packets::MC_REQUEST_SERVER_STATUS::packetID:
			this->MC_REQUEST_SERVER_STATUS();
			break;

		case ::packets::MC_RESPONSE_SERVER_STATUS::packetID:
			this->MC_RESPONSE_SERVER_STATUS();
			break;

		case ::packets::MC_REQUEST_START_SERVER_SCHEDULE::packetID:
			this->MC_REQUEST_START_SERVER_SCHEDULE();
			break;

		case ::packets::MC_REQUEST_WRITE_CLIENT_CRC::packetID:
			this->MC_REQUEST_WRITE_CLIENT_CRC();
			break;

		case ::packets::MC_RESPONSE_WRITE_CLIENT_CRC::packetID:
			this->MC_RESPONSE_WRITE_CLIENT_CRC();
			break;

		case ::packets::MC_REQUEST_KEEPER_RELOAD_SERVER_CONFIG::packetID:
			this->MC_REQUEST_KEEPER_RELOAD_SERVER_CONFIG();
			break;

		case ::packets::MC_REQUEST_RELOAD_CONFIG::packetID:
			this->MC_REQUEST_RELOAD_CONFIG();
			break;

		case ::packets::MC_REQUEST_KEEPER_ADD_HASHMAP::packetID:
			this->MC_REQUEST_KEEPER_ADD_HASHMAP();
			break;

		case ::packets::MC_RESPONSE_KEEPER_ADD_HASHMAP::packetID:
			this->MC_RESPONSE_KEEPER_ADD_HASHMAP();
			break;

		case ::packets::MC_REQUEST_ADD_HASHMAP::packetID:
			this->MC_REQUEST_ADD_HASHMAP();
			break;

		case ::packets::MC_RESPONSE_ADD_HASHMAP::packetID:
			this->MC_RESPONSE_ADD_HASHMAP();
			break;

		case ::packets::Questitem::packetID:
			this->Questitem();
			break;

		case ::packets::Quest_item_response::packetID:
			this->Quest_item_response();
			break;

		case ::packets::Quest_item_buy::packetID:
			this->Quest_item_buy();
			break;

		case ::packets::Quest_item_responsebuy::packetID:
			this->Quest_item_responsebuy();
			break;

		case ::packets::Quest_item_sell::packetID:
			this->Quest_item_sell();
			break;

		case ::packets::Quest_item_responsesell::packetID:
			this->Quest_item_responsesell();
			break;

		case ::packets::Quest_Reward::packetID:
			this->Quest_Reward();
			break;

		case ::packets::Quest_Request_Sacrifice::packetID:
			this->Quest_Request_Sacrifice();
			break;

		case ::packets::Quest_Response_Sacrifice::packetID:
			this->Quest_Response_Sacrifice();
			break;

		case ::packets::Quest_Callback_Sacrifice::packetID:
			this->Quest_Callback_Sacrifice();
			break;

		case ::packets::Quest_Callback_Result::packetID:
			this->Quest_Callback_Result();
			break;

		case ::packets::Quest_Request_SlotInfo::packetID:
			this->Quest_Request_SlotInfo();
			break;

		case ::packets::Quest_Resonse_SlotInfo::packetID:
			this->Quest_Resonse_SlotInfo();
			break;

		case ::packets::Quest_RequestLevel::packetID:
			this->Quest_RequestLevel();
			break;

		case ::packets::Quest_ResponseLevel::packetID:
			this->Quest_ResponseLevel();
			break;

		case ::packets::Quest_Survival_Result::packetID:
			this->Quest_Survival_Result();
			break;

		case ::packets::Quest_Survival_Ranking::packetID:
			this->Quest_Survival_Ranking();
			break;

		case ::packets::Quest_Survuval_PrivateRanking::packetID:
			this->Quest_Survuval_PrivateRanking();
			break;

		case ::packets::Quest_Start_Fail::packetID:
			this->Quest_Start_Fail();
			break;

		case ::packets::monsterinfo::packetID:
			this->monsterinfo();
			break;

		case ::packets::Quest_Bible_Request::packetID:
			this->Quest_Bible_Request();
			break;

		case ::packets::Quest_Bible_Response::packetID:
			this->Quest_Bible_Response();
			break;

		case ::packets::MC_REQUEST_SERVER_LIST_INFO::packetID:
			this->MC_REQUEST_SERVER_LIST_INFO();
			break;

		case ::packets::MC_RESPONSE_SERVER_LIST_INFO::packetID:
			this->MC_RESPONSE_SERVER_LIST_INFO();
			break;

		case ::packets::MC_RESPONSE_BLOCK_COUNTRY_CODE_IP::packetID:
			this->MC_RESPONSE_BLOCK_COUNTRY_CODE_IP();
			break;

		case ::packets::MC_RESPONSE_BLOCK_COUNTRYCODE::packetID:
			this->MC_RESPONSE_BLOCK_COUNTRYCODE();
			break;

		case ::packets::MC_LOCAL_UPDATE_USE_COUNTRY_FILTER::packetID:
			this->MC_LOCAL_UPDATE_USE_COUNTRY_FILTER();
			break;

		case ::packets::MC_LOCAL_GET_DB_IP_TO_COUNTRY::packetID:
			this->MC_LOCAL_GET_DB_IP_TO_COUNTRY();
			break;

		case ::packets::MC_LOCAL_GET_DB_BLOCK_COUNTRY_CODE::packetID:
			this->MC_LOCAL_GET_DB_BLOCK_COUNTRY_CODE();
			break;

		case ::packets::MC_LOCAL_GET_DB_CUSTOM_IP::packetID:
			this->MC_LOCAL_GET_DB_CUSTOM_IP();
			break;

		case ::packets::MC_LOCAL_UPDAET_IP_TO_COUNTRY::packetID:
			this->MC_LOCAL_UPDAET_IP_TO_COUNTRY();
			break;

		case ::packets::MC_LOCAL_UPDAET_BLOCK_COUTRYCODE::packetID:
			this->MC_LOCAL_UPDAET_BLOCK_COUTRYCODE();
			break;

		case ::packets::MC_LOCAL_UPDAET_CUSTOM_IP::packetID:
			this->MC_LOCAL_UPDAET_CUSTOM_IP();
			break;

		case ::packets::MC_LOCAL_UPDATE_ACCEPT_INVALID_IP::packetID:
			this->MC_LOCAL_UPDATE_ACCEPT_INVALID_IP();
			break;

		case ::packets::MC_REQUEST_XTRAP_HASHVALUE::packetID:
			this->MC_REQUEST_XTRAP_HASHVALUE();
			break;

		case ::packets::MC_RESPONSE_XTRAP_HASHVALUE::packetID:
			this->MC_RESPONSE_XTRAP_HASHVALUE();
			break;

		case ::packets::MC_REQUEST_XTRAP_DETECTCRACK::packetID:
			this->MC_REQUEST_XTRAP_DETECTCRACK();
			break;

		case ::packets::MC_REQUEST_XTRAP_SEEDKEY::packetID:
			this->MC_REQUEST_XTRAP_SEEDKEY();
			break;

		case ::packets::MC_RESPONSE_XTRAP_SEEDKEY::packetID:
			this->MC_RESPONSE_XTRAP_SEEDKEY();
			break;

		case ::packets::MC_REQUEST_GAMEGUARD_AUTH_INDEX::packetID:
			this->MC_REQUEST_GAMEGUARD_AUTH_INDEX();
			break;

		case ::packets::MC_RESPONSE_GAMEGUARD_AUTH_INDEX::packetID:
			this->MC_RESPONSE_GAMEGUARD_AUTH_INDEX();
			break;

		case ::packets::MC_REQUEST_GAMEGUARD_AUTH_VALUE::packetID:
			this->MC_REQUEST_GAMEGUARD_AUTH_VALUE();
			break;

		case ::packets::MC_RESPONSE_GAMEGUARD_AUTH_VALUE::packetID:
			this->MC_RESPONSE_GAMEGUARD_AUTH_VALUE();
			break;

		case ::packets::MC_REQUEST_GIVE_ONESELF_UP::packetID:
			this->MC_REQUEST_GIVE_ONESELF_UP();
			break;

		case ::packets::MC_RESPONSE_GAMBLEITEMLIST::packetID:
			this->MC_RESPONSE_GAMBLEITEMLIST();
			break;

		case ::packets::MC_MATCH_ROUTE_UPDATE_STAGE_EQUIP_LOOK::packetID:
			this->MC_MATCH_ROUTE_UPDATE_STAGE_EQUIP_LOOK();
			break;

		case ::packets::MC_REQUEST_RESOURCE_CRC32::packetID:
			this->MC_REQUEST_RESOURCE_CRC32();
			break;

		case ::packets::MC_RESPONSE_RESOURCE_CRC32::packetID:
			this->MC_RESPONSE_RESOURCE_CRC32();
			break;
		}
	} catch(...) {
			this->OnFailedParse(packetID, parameters, length);
	}
}

}