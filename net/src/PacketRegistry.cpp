/*
 * NOTICE: Do not manually edit this file. It has been autogenerated by
 * protocol/parse.py. Any changes should me made there, instead of here.
 */
#include <boost/array.hpp>
#include <boost/format.hpp>
#include <boost/shared_array.hpp>
#include <net/PacketRegistry.h>
#include <net/protocol/all>

using namespace std;
using namespace boost;

// The following are implemented in security.cpp
// If they throw ANY exception, the packet's parsing will be broken,
// the packet will be dropped, and OnFailedParse will be signaled.
// The extraction method MUST modify *currentParam to point to the
// next element in the parameter string.
int32_t extract_int32(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
uint32_t extract_uint32(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
float extract_float(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
bool extract_bool(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
string extract_string(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
boost::array<float, 3> extract_position(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
boost::array<float, 3> extract_direction(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
uint32_t extract_color(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
uint64_t extract_MUID(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
tuple<shared_array<uint8_t> /* data */, size_t /* count */, size_t /* size */>
extract_blob(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
boost::array<uint16_t, 3> extract_vector(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
uint8_t extract_uint8(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
int16_t extract_int16(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
uint16_t extract_uint16(const uint8_t* paramStart, const uint8_t**currentParam, uint16_t packetLength);

namespace packet {

Registry::Registry()
{
}

Registry::~Registry()
{
}

void Registry::dispatch(uint16_t packetID,
                              const uint8_t* parameters,
                              uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	try {
		switch(packetID)
		{
		case protocol::Local_Info::packetID:
			{
				this->Local_Info();
				break;
			}
		case protocol::Local_Echo::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->Local_Echo(p0);
				break;
			}
		case protocol::Local_Login::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->Local_Login(p0, p1);
				break;
			}
		case protocol::Help::packetID:
			{
				this->Help();
				break;
			}
		case protocol::Version::packetID:
			{
				this->Version();
				break;
			}
		case protocol::DebugTest::packetID:
			{
				this->DebugTest();
				break;
			}
		case protocol::Net_Enum::packetID:
			{
				this->Net_Enum();
				break;
			}
		case protocol::Net_Connect::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->Net_Connect(p0);
				break;
			}
		case protocol::Net_Disconnect::packetID:
			{
				this->Net_Disconnect();
				break;
			}
		case protocol::Net_Clear::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Net_Clear(p0);
				break;
			}
		case protocol::Net_CheckPing::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Net_CheckPing(p0);
				break;
			}
		case protocol::Net_Ping::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				this->Net_Ping(p0);
				break;
			}
		case protocol::Net_Pong::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				this->Net_Pong(p0);
				break;
			}
		case protocol::HShield_Ping::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
				this->HShield_Ping(p0, p1);
				break;
			}
		case protocol::HShield_Pong::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
				this->HShield_Pong(p0, p1);
				break;
			}
		case protocol::Net_OnConnect::packetID:
			{
				this->Net_OnConnect();
				break;
			}
		case protocol::Net_OnDisConnect::packetID:
			{
				this->Net_OnDisConnect();
				break;
			}
		case protocol::Net_OnError::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Net_OnError(p0);
				break;
			}
		case protocol::Net_ConnectToZoneServer::packetID:
			{
				this->Net_ConnectToZoneServer();
				break;
			}
		case protocol::Net_RequestInfo::packetID:
			{
				this->Net_RequestInfo();
				break;
			}
		case protocol::Net_ResponseInfo::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->Net_ResponseInfo(p0);
				break;
			}
		case protocol::Net_Echo::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->Net_Echo(p0);
				break;
			}
		case protocol::Match_Announce::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->Match_Announce(p0, p1);
				break;
			}
		case protocol::Clock_Synchronize::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				this->Clock_Synchronize(p0);
				break;
			}
		case protocol::Match_Login::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				uint32_t p3 = extract_uint32(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p4 = extract_blob(parameters, &paramPtr, length);
				this->Match_Login(p0, p1, p2, p3, p4);
				break;
			}
		case protocol::Match_ResponseLogin::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				array<uint16_t, 3> p2 = extract_vector(parameters, &paramPtr, length);
				std::string p3 = extract_string(parameters, &paramPtr, length);
				uint8_t p4 = extract_uint8(parameters, &paramPtr, length);
				uint8_t p5 = extract_uint8(parameters, &paramPtr, length);
				uint64_t p6 = extract_MUID(parameters, &paramPtr, length);
				bool p7 = extract_bool(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p8 = extract_blob(parameters, &paramPtr, length);
				this->Match_ResponseLogin(p0, p1, p2, p3, p4, p5, p6, p7, p8);
				break;
			}
		case protocol::Match_Response_Result::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Match_Response_Result(p0);
				break;
			}
		case protocol::Match_LoginNetmarble::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				uint32_t p3 = extract_uint32(parameters, &paramPtr, length);
				this->Match_LoginNetmarble(p0, p1, p2, p3);
				break;
			}
		case protocol::Match_LoginNetmarbleJP::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				uint32_t p3 = extract_uint32(parameters, &paramPtr, length);
				this->Match_LoginNetmarbleJP(p0, p1, p2, p3);
				break;
			}
		case protocol::Match_LoginFromDBAgent::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				std::string p2 = extract_string(parameters, &paramPtr, length);
				int32_t p3 = extract_int32(parameters, &paramPtr, length);
				bool p4 = extract_bool(parameters, &paramPtr, length);
				uint32_t p5 = extract_uint32(parameters, &paramPtr, length);
				this->Match_LoginFromDBAgent(p0, p1, p2, p3, p4, p5);
				break;
			}
		case protocol::Match_LoginFailedFromDBAgent::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->Match_LoginFailedFromDBAgent(p0, p1);
				break;
			}
		case protocol::Match_FinH::packetID:
			{
				this->Match_FinH();
				break;
			}
		case protocol::MC_MATCH_DISCONNMSG::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				this->MC_MATCH_DISCONNMSG(p0);
				break;
			}
		case protocol::MC_MATCH_LOGIN_NHNUSA::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				uint32_t p3 = extract_uint32(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p4 = extract_blob(parameters, &paramPtr, length);
				this->MC_MATCH_LOGIN_NHNUSA(p0, p1, p2, p3, p4);
				break;
			}
		case protocol::MC_MATCH_LOGIN_GAMEON_JP::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				uint32_t p3 = extract_uint32(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p4 = extract_blob(parameters, &paramPtr, length);
				this->MC_MATCH_LOGIN_GAMEON_JP(p0, p1, p2, p3, p4);
				break;
			}
		case protocol::Match_ObjectCache::packetID:
			{
				uint8_t p0 = extract_uint8(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
				this->Match_ObjectCache(p0, p1);
				break;
			}
		case protocol::Match_BridgePeer::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p2 = extract_uint32(parameters, &paramPtr, length);
				this->Match_BridgePeer(p0, p1, p2);
				break;
			}
		case protocol::Match_BridgePeerACK::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->Match_BridgePeerACK(p0, p1);
				break;
			}
		case protocol::MatchServer_RequestRecommandedChannel::packetID:
			{
				this->MatchServer_RequestRecommandedChannel();
				break;
			}
		case protocol::MatchServer_ResponseRecommandedChannel::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->MatchServer_ResponseRecommandedChannel(p0);
				break;
			}
		case protocol::Channel_Join::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->Channel_Join(p0, p1);
				break;
			}
		case protocol::Channel_ResponseJoin::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				std::string p2 = extract_string(parameters, &paramPtr, length);
				bool p3 = extract_bool(parameters, &paramPtr, length);
				this->Channel_ResponseJoin(p0, p1, p2, p3);
				break;
			}
		case protocol::Channel_RequestJoinFromName::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				std::string p3 = extract_string(parameters, &paramPtr, length);
				this->Channel_RequestJoinFromName(p0, p1, p2, p3);
				break;
			}
		case protocol::Channel_Leave::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->Channel_Leave(p0, p1);
				break;
			}
		case protocol::Channel_ListStart::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				this->Channel_ListStart(p0, p1, p2);
				break;
			}
		case protocol::Channel_ListStop::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Channel_ListStop(p0);
				break;
			}
		case protocol::Channel_List::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Channel_List(p0);
				break;
			}
		case protocol::Channel_Request_Chat::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				std::string p2 = extract_string(parameters, &paramPtr, length);
				this->Channel_Request_Chat(p0, p1, p2);
				break;
			}
		case protocol::Channel_Chat::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				std::string p2 = extract_string(parameters, &paramPtr, length);
				int32_t p3 = extract_int32(parameters, &paramPtr, length);
				this->Channel_Chat(p0, p1, p2, p3);
				break;
			}
		case protocol::Channel_PlayerDumb::packetID:
			{
				this->Channel_PlayerDumb();
				break;
			}
		case protocol::Channel_Request_Rule::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Channel_Request_Rule(p0);
				break;
			}
		case protocol::Channel_Response_Rule::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->Channel_Response_Rule(p0, p1);
				break;
			}
		case protocol::Channel_RequestAllPlayerList::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				uint32_t p2 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p3 = extract_uint32(parameters, &paramPtr, length);
				this->Channel_RequestAllPlayerList(p0, p1, p2, p3);
				break;
			}
		case protocol::Channel_ResponseAllPlayerList::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
				this->Channel_ResponseAllPlayerList(p0, p1);
				break;
			}
		case protocol::Stage_Create::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				bool p2 = extract_bool(parameters, &paramPtr, length);
				std::string p3 = extract_string(parameters, &paramPtr, length);
				this->Stage_Create(p0, p1, p2, p3);
				break;
			}
		case protocol::Stage_RequestJoin::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->Stage_RequestJoin(p0, p1);
				break;
			}
		case protocol::Stage_RequestPrivateJoin::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				std::string p2 = extract_string(parameters, &paramPtr, length);
				this->Stage_RequestPrivateJoin(p0, p1, p2);
				break;
			}
		case protocol::Stage_Join::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				uint32_t p2 = extract_uint32(parameters, &paramPtr, length);
				std::string p3 = extract_string(parameters, &paramPtr, length);
				this->Stage_Join(p0, p1, p2, p3);
				break;
			}
		case protocol::Stage_Leave::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Stage_Leave(p0);
				break;
			}
		case protocol::Stage_Request_PlayerList::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Stage_Request_PlayerList(p0);
				break;
			}
		case protocol::Stage_Follow::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->Stage_Follow(p0);
				break;
			}
		case protocol::Stage_Response_Follow::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Stage_Response_Follow(p0);
				break;
			}
		case protocol::Stage_ResponseJoin::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Stage_ResponseJoin(p0);
				break;
			}
		case protocol::Stage_RequirePassword::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->Stage_RequirePassword(p0, p1);
				break;
			}
		case protocol::RequestGameInfo::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->RequestGameInfo(p0, p1);
				break;
			}
		case protocol::ResponseGameInfo::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p3 = extract_blob(parameters, &paramPtr, length);
				this->ResponseGameInfo(p0, p1, p2, p3);
				break;
			}
		case protocol::Stage_ResponseCreate::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Stage_ResponseCreate(p0);
				break;
			}
		case protocol::Stage_Request_EnterBattle::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->Stage_Request_EnterBattle(p0, p1);
				break;
			}
		case protocol::Stage_EnterBattle::packetID:
			{
				uint8_t p0 = extract_uint8(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
				this->Stage_EnterBattle(p0, p1);
				break;
			}
		case protocol::Stage_LeaveBattle::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Stage_LeaveBattle(p0);
				break;
			}
		case protocol::Stage_Start::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				this->Stage_Start(p0, p1, p2);
				break;
			}
		case protocol::Stage_Map::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->Stage_Map(p0, p1);
				break;
			}
		case protocol::Stage_Chat::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				std::string p2 = extract_string(parameters, &paramPtr, length);
				this->Stage_Chat(p0, p1, p2);
				break;
			}
		case protocol::Stage_RequestQuickJoin::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
				this->Stage_RequestQuickJoin(p0, p1);
				break;
			}
		case protocol::Stage_ResponseQuickJoin::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->Stage_ResponseQuickJoin(p0, p1);
				break;
			}
		case protocol::Stage_StageGo::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				this->Stage_StageGo(p0);
				break;
			}
		case protocol::Stage_State::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				int32_t p3 = extract_int32(parameters, &paramPtr, length);
				this->Stage_State(p0, p1, p2, p3);
				break;
			}
		case protocol::Stage_Team::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				uint32_t p2 = extract_uint32(parameters, &paramPtr, length);
				this->Stage_Team(p0, p1, p2);
				break;
			}
		case protocol::Stage_Master::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->Stage_Master(p0, p1);
				break;
			}
		case protocol::Stage_ListStart::packetID:
			{
				this->Stage_ListStart();
				break;
			}
		case protocol::Stage_ListStop::packetID:
			{
				this->Stage_ListStop();
				break;
			}
		case protocol::Stage_List::packetID:
			{
				array<uint16_t, 3> p0 = extract_vector(parameters, &paramPtr, length);
				array<uint16_t, 3> p1 = extract_vector(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);
				this->Stage_List(p0, p1, p2);
				break;
			}
		case protocol::Stage_RequestStageList::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				this->Stage_RequestStageList(p0, p1, p2);
				break;
			}
		case protocol::Channel_RequestPlayerList::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				this->Channel_RequestPlayerList(p0, p1, p2);
				break;
			}
		case protocol::Channel_ResponsePlayerList::packetID:
			{
				uint8_t p0 = extract_uint8(parameters, &paramPtr, length);
				uint8_t p1 = extract_uint8(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);
				this->Channel_ResponsePlayerList(p0, p1, p2);
				break;
			}
		case protocol::Stage_RequestStageSetting::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Stage_RequestStageSetting(p0);
				break;
			}
		case protocol::Stage_ResponseStageSetting::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);
				int32_t p3 = extract_int32(parameters, &paramPtr, length);
				uint64_t p4 = extract_MUID(parameters, &paramPtr, length);
				this->Stage_ResponseStageSetting(p0, p1, p2, p3, p4);
				break;
			}
		case protocol::Stage_StageSetting::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);
				this->Stage_StageSetting(p0, p1, p2);
				break;
			}
		case protocol::Stage_Launch::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->Stage_Launch(p0, p1);
				break;
			}
		case protocol::Stage_Finish::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Stage_Finish(p0);
				break;
			}
		case protocol::Stage_RequestPeerList::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->Stage_RequestPeerList(p0, p1);
				break;
			}
		case protocol::Stage_ResponsePeerList::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
				this->Stage_ResponsePeerList(p0, p1);
				break;
			}
		case protocol::Loading_Complete::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->Loading_Complete(p0, p1);
				break;
			}
		case protocol::Match_RequestPeerRelay::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->Match_RequestPeerRelay(p0, p1);
				break;
			}
		case protocol::Match_ResponsePeerRelay::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Match_ResponsePeerRelay(p0);
				break;
			}
		case protocol::Stage_RoundState::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				int32_t p3 = extract_int32(parameters, &paramPtr, length);
				this->Stage_RoundState(p0, p1, p2, p3);
				break;
			}
		case protocol::Game_Kill::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Game_Kill(p0);
				break;
			}
		case protocol::Game_Requst_Spawn::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				array<float, 3> p1 = extract_position(parameters, &paramPtr, length);
				array<float, 3> p2 = extract_direction(parameters, &paramPtr, length);
				this->Game_Requst_Spawn(p0, p1, p2);
				break;
			}
		case protocol::Game_LevelUp::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->Game_LevelUp(p0, p1);
				break;
			}
		case protocol::Game_LevelDown::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->Game_LevelDown(p0, p1);
				break;
			}
		case protocol::Game_Dead::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
				uint64_t p2 = extract_MUID(parameters, &paramPtr, length);
				uint32_t p3 = extract_uint32(parameters, &paramPtr, length);
				this->Game_Dead(p0, p1, p2, p3);
				break;
			}
		case protocol::Game_TeamBonus::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
				this->Game_TeamBonus(p0, p1);
				break;
			}
		case protocol::Game_RequestTimeSync::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				this->Game_RequestTimeSync(p0);
				break;
			}
		case protocol::Game_ResponseTimeSync::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
				this->Game_ResponseTimeSync(p0, p1);
				break;
			}
		case protocol::Game_ReportTimeSync::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
				this->Game_ReportTimeSync(p0, p1);
				break;
			}
		case protocol::Stage_RequestForcedEntry::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->Stage_RequestForcedEntry(p0, p1);
				break;
			}
		case protocol::Stage_ResponseForcedEntry::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Stage_ResponseForcedEntry(p0);
				break;
			}
		case protocol::Stage_RoundFinishInfo::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p3 = extract_blob(parameters, &paramPtr, length);
				this->Stage_RoundFinishInfo(p0, p1, p2, p3);
				break;
			}
		case protocol::Match_Notify::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				this->Match_Notify(p0);
				break;
			}
		case protocol::Match_Whisper::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				std::string p2 = extract_string(parameters, &paramPtr, length);
				this->Match_Whisper(p0, p1, p2);
				break;
			}
		case protocol::Match_Where::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->Match_Where(p0);
				break;
			}
		case protocol::Match_UserOption::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				this->Match_UserOption(p0);
				break;
			}
		case protocol::ChatRoom_Create::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->ChatRoom_Create(p0, p1);
				break;
			}
		case protocol::ChatRoom_Join::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->ChatRoom_Join(p0, p1);
				break;
			}
		case protocol::ChatRoom_Leave::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->ChatRoom_Leave(p0, p1);
				break;
			}
		case protocol::ChatRoom_SelectWrite::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->ChatRoom_SelectWrite(p0);
				break;
			}
		case protocol::ChatRoom_Invite::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				std::string p2 = extract_string(parameters, &paramPtr, length);
				this->ChatRoom_Invite(p0, p1, p2);
				break;
			}
		case protocol::ChatRoom_Chat::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				std::string p2 = extract_string(parameters, &paramPtr, length);
				this->ChatRoom_Chat(p0, p1, p2);
				break;
			}
		case protocol::Match_RequestAccountCharList::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Match_RequestAccountCharList(p0);
				break;
			}
		case protocol::Match_ResponseAccountCharList::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Match_ResponseAccountCharList(p0);
				break;
			}
		case protocol::Match_RequestAccountCharInfo::packetID:
			{
				array<uint16_t, 3> p0 = extract_vector(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->Match_RequestAccountCharInfo(p0, p1);
				break;
			}
		case protocol::Match_ResponseAccountCharInfo::packetID:
			{
				array<uint16_t, 3> p0 = extract_vector(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
				this->Match_ResponseAccountCharInfo(p0, p1);
				break;
			}
		case protocol::Match_RequestSelectChar::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				this->Match_RequestSelectChar(p0, p1, p2);
				break;
			}
		case protocol::Match_ResponseSelectChar::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);
				this->Match_ResponseSelectChar(p0, p1, p2);
				break;
			}
		case protocol::Match_RequestCharInfo::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
				this->Match_RequestCharInfo(p0, p1);
				break;
			}
		case protocol::Match_ResponseCharInfo::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
				this->Match_ResponseCharInfo(p0, p1);
				break;
			}
		case protocol::Match_RequestDeleteChar::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				std::string p3 = extract_string(parameters, &paramPtr, length);
				this->Match_RequestDeleteChar(p0, p1, p2, p3);
				break;
			}
		case protocol::Match_ResponseDeleteChar::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Match_ResponseDeleteChar(p0);
				break;
			}
		case protocol::Match_RequestCreateChar::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				std::string p3 = extract_string(parameters, &paramPtr, length);
				uint32_t p4 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p5 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p6 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p7 = extract_uint32(parameters, &paramPtr, length);
				this->Match_RequestCreateChar(p0, p1, p2, p3, p4, p5, p6, p7);
				break;
			}
		case protocol::Match_ResponseCreateChar::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->Match_ResponseCreateChar(p0, p1);
				break;
			}
		case protocol::Match_RequestCopyToTestServer::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Match_RequestCopyToTestServer(p0);
				break;
			}
		case protocol::Match_ResponseCopyToTestServer::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Match_ResponseCopyToTestServer(p0);
				break;
			}
		case protocol::Match_RequestCharInfoDetail::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->Match_RequestCharInfoDetail(p0, p1);
				break;
			}
		case protocol::Match_ResponseCharInfoDetail::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Match_ResponseCharInfoDetail(p0);
				break;
			}
		case protocol::Match_RequestSimpleCharInfo::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Match_RequestSimpleCharInfo(p0);
				break;
			}
		case protocol::Match_ResponseSimpleCharInfo::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
				this->Match_ResponseSimpleCharInfo(p0, p1);
				break;
			}
		case protocol::Match_RequestMySimpleCharInfo::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Match_RequestMySimpleCharInfo(p0);
				break;
			}
		case protocol::Match_ResponseMySimpleCharInfo::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Match_ResponseMySimpleCharInfo(p0);
				break;
			}
		case protocol::Match_RequestBuyItem::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
				this->Match_RequestBuyItem(p0, p1);
				break;
			}
		case protocol::Match_ResponseBuyItem::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Match_ResponseBuyItem(p0);
				break;
			}
		case protocol::Match_RequestSellItem::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->Match_RequestSellItem(p0, p1);
				break;
			}
		case protocol::Match_ResponseSellItem::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Match_ResponseSellItem(p0);
				break;
			}
		case protocol::Match_RequestShopItemList::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				this->Match_RequestShopItemList(p0, p1, p2);
				break;
			}
		case protocol::Match_ResponseShopItemList::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
				this->Match_ResponseShopItemList(p0, p1);
				break;
			}
		case protocol::Match_RequestCharacterItemList::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Match_RequestCharacterItemList(p0);
				break;
			}
		case protocol::Match_RequestCharacterItemListForce::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Match_RequestCharacterItemListForce(p0);
				break;
			}
		case protocol::Match_ResponseCharacterItemList::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p3 = extract_blob(parameters, &paramPtr, length);
				this->Match_ResponseCharacterItemList(p0, p1, p2, p3);
				break;
			}
		case protocol::MatchRequestEquipItem::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				uint32_t p2 = extract_uint32(parameters, &paramPtr, length);
				int32_t p3 = extract_int32(parameters, &paramPtr, length);
				this->MatchRequestEquipItem(p0, p1, p2, p3);
				break;
			}
		case protocol::MatchResponseEquipItem::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->MatchResponseEquipItem(p0);
				break;
			}
		case protocol::MatchRequestTakeoffItem::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				this->MatchRequestTakeoffItem(p0, p1, p2);
				break;
			}
		case protocol::MatchResponseTakeoffItem::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->MatchResponseTakeoffItem(p0);
				break;
			}
		case protocol::Match_RequestAccountItemList::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Match_RequestAccountItemList(p0);
				break;
			}
		case protocol::Match_ResponseAccountItemList::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Match_ResponseAccountItemList(p0);
				break;
			}
		case protocol::Match_RequestBringAccountItem::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->Match_RequestBringAccountItem(p0, p1);
				break;
			}
		case protocol::Match_ResponseBringAccountItem::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Match_ResponseBringAccountItem(p0);
				break;
			}
		case protocol::Match_RequestBringBackAccountItem::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->Match_RequestBringBackAccountItem(p0, p1);
				break;
			}
		case protocol::Match_ResponseBringBackAccountItem::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Match_ResponseBringBackAccountItem(p0);
				break;
			}
		case protocol::Match_ExpiredRentItem::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Match_ExpiredRentItem(p0);
				break;
			}
		case protocol::Match_ItemGamble::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Match_ItemGamble(p0);
				break;
			}
		case protocol::Match_GambleResultItem::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
				this->Match_GambleResultItem(p0, p1);
				break;
			}
		case protocol::Match_Request_Suicide::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Match_Request_Suicide(p0);
				break;
			}
		case protocol::Match_Response_Suicide::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->Match_Response_Suicide(p0, p1);
				break;
			}
		case protocol::Match_Response_SuicideReserve::packetID:
			{
				this->Match_Response_SuicideReserve();
				break;
			}
		case protocol::Match_Request_Obtain_WorldItem::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->Match_Request_Obtain_WorldItem(p0, p1);
				break;
			}
		case protocol::Match_WorldItem_Obtain::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->Match_WorldItem_Obtain(p0, p1);
				break;
			}
		case protocol::Match_WorldItem_Spawn::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Match_WorldItem_Spawn(p0);
				break;
			}
		case protocol::Match_Request_Spawn_WorldItem::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				array<float, 3> p2 = extract_position(parameters, &paramPtr, length);
				float p3 = extract_float(parameters, &paramPtr, length);
				this->Match_Request_Spawn_WorldItem(p0, p1, p2, p3);
				break;
			}
		case protocol::Match_Request_Spawn_WorldItem_UID::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Match_Request_Spawn_WorldItem_UID(p0);
				break;
			}
		case protocol::Match_Reset_TeamMembers::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Match_Reset_TeamMembers(p0);
				break;
			}
		case protocol::Match_Assign_Commander::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->Match_Assign_Commander(p0, p1);
				break;
			}
		case protocol::Match_Set_Observer::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Match_Set_Observer(p0);
				break;
			}
		case protocol::Match_Ladder_Request_Challenge::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);
				this->Match_Ladder_Request_Challenge(p0, p1, p2);
				break;
			}
		case protocol::Match_Ladder_Response_Challenge::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Match_Ladder_Response_Challenge(p0);
				break;
			}
		case protocol::Match_Ladder_SearchRival::packetID:
			{
				this->Match_Ladder_SearchRival();
				break;
			}
		case protocol::Match_Ladder_Request_CancelChallenge::packetID:
			{
				this->Match_Ladder_Request_CancelChallenge();
				break;
			}
		case protocol::Match_Ladder_CancelChallenge::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->Match_Ladder_CancelChallenge(p0);
				break;
			}
		case protocol::Ladder_Prepare::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->Ladder_Prepare(p0, p1);
				break;
			}
		case protocol::Ladder_Launch::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->Ladder_Launch(p0, p1);
				break;
			}
		case protocol::Match_RequestProposal::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				int32_t p3 = extract_int32(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p4 = extract_blob(parameters, &paramPtr, length);
				this->Match_RequestProposal(p0, p1, p2, p3, p4);
				break;
			}
		case protocol::Match_ResponseProposal::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				this->Match_ResponseProposal(p0, p1, p2);
				break;
			}
		case protocol::Match_AskAgreement::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				int32_t p3 = extract_int32(parameters, &paramPtr, length);
				this->Match_AskAgreement(p0, p1, p2, p3);
				break;
			}
		case protocol::Match_ReplyAgreement::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				std::string p2 = extract_string(parameters, &paramPtr, length);
				int32_t p3 = extract_int32(parameters, &paramPtr, length);
				int32_t p4 = extract_int32(parameters, &paramPtr, length);
				bool p5 = extract_bool(parameters, &paramPtr, length);
				this->Match_ReplyAgreement(p0, p1, p2, p3, p4, p5);
				break;
			}
		case protocol::Match_Friend_Add::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->Match_Friend_Add(p0);
				break;
			}
		case protocol::Match_Friend_Remove::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->Match_Friend_Remove(p0);
				break;
			}
		case protocol::Match_Friend_List::packetID:
			{
				this->Match_Friend_List();
				break;
			}
		case protocol::Match_Response_FriendList::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Match_Response_FriendList(p0);
				break;
			}
		case protocol::Match_Friend_Msg::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->Match_Friend_Msg(p0);
				break;
			}
		case protocol::Match_Clan_RequestCreateClan::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				std::string p2 = extract_string(parameters, &paramPtr, length);
				std::string p3 = extract_string(parameters, &paramPtr, length);
				std::string p4 = extract_string(parameters, &paramPtr, length);
				std::string p5 = extract_string(parameters, &paramPtr, length);
				std::string p6 = extract_string(parameters, &paramPtr, length);
				this->Match_Clan_RequestCreateClan(p0, p1, p2, p3, p4, p5, p6);
				break;
			}
		case protocol::Match_Clan_ResponseCreateClan::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->Match_Clan_ResponseCreateClan(p0, p1);
				break;
			}
		case protocol::Match_Clan_AskSponsorAgreement::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				uint64_t p2 = extract_MUID(parameters, &paramPtr, length);
				std::string p3 = extract_string(parameters, &paramPtr, length);
				this->Match_Clan_AskSponsorAgreement(p0, p1, p2, p3);
				break;
			}
		case protocol::Match_Clan_AnswerSponsorAgreement::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				std::string p2 = extract_string(parameters, &paramPtr, length);
				bool p3 = extract_bool(parameters, &paramPtr, length);
				this->Match_Clan_AnswerSponsorAgreement(p0, p1, p2, p3);
				break;
			}
		case protocol::Match_Clan_RequestAgreedCreateClan::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				std::string p2 = extract_string(parameters, &paramPtr, length);
				std::string p3 = extract_string(parameters, &paramPtr, length);
				std::string p4 = extract_string(parameters, &paramPtr, length);
				std::string p5 = extract_string(parameters, &paramPtr, length);
				this->Match_Clan_RequestAgreedCreateClan(p0, p1, p2, p3, p4, p5);
				break;
			}
		case protocol::Match_Clan_AgreedResponseCreateClan::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Match_Clan_AgreedResponseCreateClan(p0);
				break;
			}
		case protocol::Match_Clan_RequestCloseClan::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->Match_Clan_RequestCloseClan(p0, p1);
				break;
			}
		case protocol::Match_Clan_ResponseCloseClan::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Match_Clan_ResponseCloseClan(p0);
				break;
			}
		case protocol::Match_Clan_RequestJoinClan::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				std::string p2 = extract_string(parameters, &paramPtr, length);
				this->Match_Clan_RequestJoinClan(p0, p1, p2);
				break;
			}
		case protocol::Match_Clan_ResponseJoinClan::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Match_Clan_ResponseJoinClan(p0);
				break;
			}
		case protocol::Match_Clan_AskJoinAgreement::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				std::string p2 = extract_string(parameters, &paramPtr, length);
				this->Match_Clan_AskJoinAgreement(p0, p1, p2);
				break;
			}
		case protocol::Match_Clan_AnswerJoinAgreement::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				bool p2 = extract_bool(parameters, &paramPtr, length);
				this->Match_Clan_AnswerJoinAgreement(p0, p1, p2);
				break;
			}
		case protocol::Match_Clan_RequestAgreedJoinClan::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				std::string p2 = extract_string(parameters, &paramPtr, length);
				this->Match_Clan_RequestAgreedJoinClan(p0, p1, p2);
				break;
			}
		case protocol::Match_Clan_ResponseAgreedJoinClan::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Match_Clan_ResponseAgreedJoinClan(p0);
				break;
			}
		case protocol::Match_Clan_RequestLeaveClan::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Match_Clan_RequestLeaveClan(p0);
				break;
			}
		case protocol::Match_Clan_ResponseLeaveClan::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Match_Clan_ResponseLeaveClan(p0);
				break;
			}
		case protocol::Match_Clan_UpdateCharClanInfo::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Match_Clan_UpdateCharClanInfo(p0);
				break;
			}
		case protocol::Match_Clan_Master_RequestChangeGrade::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				int32_t p3 = extract_int32(parameters, &paramPtr, length);
				this->Match_Clan_Master_RequestChangeGrade(p0, p1, p2, p3);
				break;
			}
		case protocol::Match_Clan_Master_ResponseChangeGrade::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Match_Clan_Master_ResponseChangeGrade(p0);
				break;
			}
		case protocol::Match_Clan_Admin_RequestExpelMember::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->Match_Clan_Admin_RequestExpelMember(p0, p1);
				break;
			}
		case protocol::Match_Clan_Admin_ResponseLeaveMember::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Match_Clan_Admin_ResponseLeaveMember(p0);
				break;
			}
		case protocol::Match_Clan_Request_Msg::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->Match_Clan_Request_Msg(p0, p1);
				break;
			}
		case protocol::Match_Clan_Msg::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->Match_Clan_Msg(p0, p1);
				break;
			}
		case protocol::Match_Clan_Request_ClanMemberList::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Match_Clan_Request_ClanMemberList(p0);
				break;
			}
		case protocol::Match_Clan_Response_ClanMemberList::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Match_Clan_Response_ClanMemberList(p0);
				break;
			}
		case protocol::Match_Clan_Request_Clan_Info::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->Match_Clan_Request_Clan_Info(p0, p1);
				break;
			}
		case protocol::Match_Clan_Response_Clan_Info::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Match_Clan_Response_Clan_Info(p0);
				break;
			}
		case protocol::Match_Clan_Standby_ClanList::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);
				this->Match_Clan_Standby_ClanList(p0, p1, p2);
				break;
			}
		case protocol::Match_Clan_Member_Connected::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->Match_Clan_Member_Connected(p0);
				break;
			}
		case protocol::Match_Clan_Request_EmblemURL::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Match_Clan_Request_EmblemURL(p0);
				break;
			}
		case protocol::Match_Clan_Response_EmblemURL::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				std::string p2 = extract_string(parameters, &paramPtr, length);
				this->Match_Clan_Response_EmblemURL(p0, p1, p2);
				break;
			}
		case protocol::Match_Clan_Local_EmblemReady::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->Match_Clan_Local_EmblemReady(p0, p1);
				break;
			}
		case protocol::MC_MATCH_CLAN_ACCOUNCE_DELETE::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->MC_MATCH_CLAN_ACCOUNCE_DELETE(p0);
				break;
			}
		case protocol::Match_Callvote::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->Match_Callvote(p0, p1);
				break;
			}
		case protocol::Match_NotifyCallvote::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->Match_NotifyCallvote(p0, p1);
				break;
			}
		case protocol::Match_NotifyVoteResult::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->Match_NotifyVoteResult(p0, p1);
				break;
			}
		case protocol::Match_VoteYes::packetID:
			{
				this->Match_VoteYes();
				break;
			}
		case protocol::Match_VoteNo::packetID:
			{
				this->Match_VoteNo();
				break;
			}
		case protocol::Votestop::packetID:
			{
				this->Votestop();
				break;
			}
		case protocol::Match_Broadcast_ClanRenewVictories::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				this->Match_Broadcast_ClanRenewVictories(p0, p1, p2);
				break;
			}
		case protocol::Match_Broadcast_ClanInterruptVictories::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				this->Match_Broadcast_ClanInterruptVictories(p0, p1, p2);
				break;
			}
		case protocol::Match_Broadcast_DuelRenewVictories::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				int32_t p3 = extract_int32(parameters, &paramPtr, length);
				this->Match_Broadcast_DuelRenewVictories(p0, p1, p2, p3);
				break;
			}
		case protocol::Match_Broadcast_DuelInterruptVictories::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				this->Match_Broadcast_DuelInterruptVictories(p0, p1, p2);
				break;
			}
		case protocol::Match_Assign_Berserker::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Match_Assign_Berserker(p0);
				break;
			}
		case protocol::Match_Duel_QueueInfo::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Match_Duel_QueueInfo(p0);
				break;
			}
		case protocol::Match_Quest_Ping::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				this->Match_Quest_Ping(p0);
				break;
			}
		case protocol::Match_Quest_Pong::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				this->Match_Quest_Pong(p0);
				break;
			}
		case protocol::MC_QUEST_NPCLIST::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->MC_QUEST_NPCLIST(p0, p1);
				break;
			}
		case protocol::Event_ChangeMaster::packetID:
			{
				this->Event_ChangeMaster();
				break;
			}
		case protocol::Event_ChangePassword::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->Event_ChangePassword(p0);
				break;
			}
		case protocol::Event_RequestJJang::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->Event_RequestJJang(p0);
				break;
			}
		case protocol::Event_RemoveJJang::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->Event_RemoveJJang(p0);
				break;
			}
		case protocol::Event_UpdateJJang::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				bool p1 = extract_bool(parameters, &paramPtr, length);
				this->Event_UpdateJJang(p0, p1);
				break;
			}
		case protocol::Quest_NPCSpawn::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				uint8_t p2 = extract_uint8(parameters, &paramPtr, length);
				uint8_t p3 = extract_uint8(parameters, &paramPtr, length);
				this->Quest_NPCSpawn(p0, p1, p2, p3);
				break;
			}
		case protocol::Quest_Entrust_NPC_Control::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->Quest_Entrust_NPC_Control(p0, p1);
				break;
			}
		case protocol::Quest_Checksum_NPCInfo::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
				this->Quest_Checksum_NPCInfo(p0, p1);
				break;
			}
		case protocol::Quest_NPCDead::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->Quest_NPCDead(p0, p1);
				break;
			}
		case protocol::Quest_RefreshPlayerStatus::packetID:
			{
				this->Quest_RefreshPlayerStatus();
				break;
			}
		case protocol::Quest_NPC_AllClear::packetID:
			{
				this->Quest_NPC_AllClear();
				break;
			}
		case protocol::Quest_Round_Start::packetID:
			{
				uint8_t p0 = extract_uint8(parameters, &paramPtr, length);
				this->Quest_Round_Start(p0);
				break;
			}
		case protocol::Quest_RequestDead::packetID:
			{
				this->Quest_RequestDead();
				break;
			}
		case protocol::Quest_PlayerDead::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Quest_PlayerDead(p0);
				break;
			}
		case protocol::Quest_ObtainQuestItem::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				this->Quest_ObtainQuestItem(p0);
				break;
			}
		case protocol::Quest_ObtainZItem::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				this->Quest_ObtainZItem(p0);
				break;
			}
		case protocol::Quest_State_Mapset::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				array<uint16_t, 3> p1 = extract_vector(parameters, &paramPtr, length);
				this->Quest_State_Mapset(p0, p1);
				break;
			}
		case protocol::Quest_Stage_GameInfo::packetID:
			{
				array<uint16_t, 3> p0 = extract_vector(parameters, &paramPtr, length);
				array<uint16_t, 3> p1 = extract_vector(parameters, &paramPtr, length);
				uint32_t p2 = extract_uint32(parameters, &paramPtr, length);
				this->Quest_Stage_GameInfo(p0, p1, p2);
				break;
			}
		case protocol::Quest_SectorBonus::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p2 = extract_uint32(parameters, &paramPtr, length);
				this->Quest_SectorBonus(p0, p1, p2);
				break;
			}
		case protocol::Quest_GameInfo::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Quest_GameInfo(p0);
				break;
			}
		case protocol::Quest_Combat_State::packetID:
			{
				array<uint16_t, 3> p0 = extract_vector(parameters, &paramPtr, length);
				this->Quest_Combat_State(p0);
				break;
			}
		case protocol::Quest_Sector_Start::packetID:
			{
				array<uint16_t, 3> p0 = extract_vector(parameters, &paramPtr, length);
				uint8_t p1 = extract_uint8(parameters, &paramPtr, length);
				this->Quest_Sector_Start(p0, p1);
				break;
			}
		case protocol::Quest_Complete::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Quest_Complete(p0);
				break;
			}
		case protocol::Quest_Failed::packetID:
			{
				this->Quest_Failed();
				break;
			}
		case protocol::Quest_Request_Moveto_Portal::packetID:
			{
				array<uint16_t, 3> p0 = extract_vector(parameters, &paramPtr, length);
				this->Quest_Request_Moveto_Portal(p0);
				break;
			}
		case protocol::Quest_Moveto_Portal::packetID:
			{
				array<uint16_t, 3> p0 = extract_vector(parameters, &paramPtr, length);
				uint8_t p1 = extract_uint8(parameters, &paramPtr, length);
				uint64_t p2 = extract_MUID(parameters, &paramPtr, length);
				this->Quest_Moveto_Portal(p0, p1, p2);
				break;
			}
		case protocol::Quest_Readyto_NewSector::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Quest_Readyto_NewSector(p0);
				break;
			}
		case protocol::Quest_Peer_NPC_BasicInfo::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Quest_Peer_NPC_BasicInfo(p0);
				break;
			}
		case protocol::Quest_Peer_NPC_HPInfo::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
				this->Quest_Peer_NPC_HPInfo(p0, p1);
				break;
			}
		case protocol::Quest_Peer_NPC_Attack_Melee::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Quest_Peer_NPC_Attack_Melee(p0);
				break;
			}
		case protocol::Quest_Peer_NPC_Attack_Range::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
				this->Quest_Peer_NPC_Attack_Range(p0, p1);
				break;
			}
		case protocol::Quest_Peer_NPC_Skill_Start::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				uint64_t p2 = extract_MUID(parameters, &paramPtr, length);
				array<float, 3> p3 = extract_position(parameters, &paramPtr, length);
				this->Quest_Peer_NPC_Skill_Start(p0, p1, p2, p3);
				break;
			}
		case protocol::Quest_Peer_NPC_Skill_Execute::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				uint64_t p2 = extract_MUID(parameters, &paramPtr, length);
				array<float, 3> p3 = extract_position(parameters, &paramPtr, length);
				this->Quest_Peer_NPC_Skill_Execute(p0, p1, p2, p3);
				break;
			}
		case protocol::Quest_Peer_NPC_Dead::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->Quest_Peer_NPC_Dead(p0, p1);
				break;
			}
		case protocol::Quest_Test_RequestNPCSpawn::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->Quest_Test_RequestNPCSpawn(p0, p1);
				break;
			}
		case protocol::Quest_Test_ClearNPC::packetID:
			{
				this->Quest_Test_ClearNPC();
				break;
			}
		case protocol::Quest_Test_SectorClear::packetID:
			{
				this->Quest_Test_SectorClear();
				break;
			}
		case protocol::Quest_Test_Finish::packetID:
			{
				this->Quest_Test_Finish();
				break;
			}
		case protocol::Test_BirdTest1::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);
				this->Test_BirdTest1(p0, p1, p2);
				break;
			}
		case protocol::Test_PeerTest_Ping::packetID:
			{
				this->Test_PeerTest_Ping();
				break;
			}
		case protocol::Test_PeerTest_Pong::packetID:
			{
				this->Test_PeerTest_Pong();
				break;
			}
		case protocol::Admin_Announce::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				uint32_t p2 = extract_uint32(parameters, &paramPtr, length);
				this->Admin_Announce(p0, p1, p2);
				break;
			}
		case protocol::Admin_PingToAll::packetID:
			{
				this->Admin_PingToAll();
				break;
			}
		case protocol::Admin_RequestServerInfo::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Admin_RequestServerInfo(p0);
				break;
			}
		case protocol::Admin_ResponseServerInfo::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Admin_ResponseServerInfo(p0);
				break;
			}
		case protocol::Admin_Halt::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Admin_Halt(p0);
				break;
			}
		case protocol::Admin_Terminal::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->Admin_Terminal(p0, p1);
				break;
			}
		case protocol::Admin_RequestUpdateAccountUGrade::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->Admin_RequestUpdateAccountUGrade(p0, p1);
				break;
			}
		case protocol::Admin_ResponseUpdateAccountUGrade::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->Admin_ResponseUpdateAccountUGrade(p0, p1);
				break;
			}
		case protocol::Admin_RequestBanPlayer::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->Admin_RequestBanPlayer(p0, p1);
				break;
			}
		case protocol::Admin_ResponseBanPlayer::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Admin_ResponseBanPlayer(p0);
				break;
			}
		case protocol::Admin_RequestSwitchLadderGame::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				bool p1 = extract_bool(parameters, &paramPtr, length);
				this->Admin_RequestSwitchLadderGame(p0, p1);
				break;
			}
		case protocol::Admin_Hide::packetID:
			{
				this->Admin_Hide();
				break;
			}
		case protocol::Admin_ReloadClientHash::packetID:
			{
				this->Admin_ReloadClientHash();
				break;
			}
		case protocol::MC_ADMIN_RESET_ALL_HACKING_BLOCK::packetID:
			{
				this->MC_ADMIN_RESET_ALL_HACKING_BLOCK();
				break;
			}
		case protocol::MC_ADMIN_RELOAD_GAMBLEITEM::packetID:
			{
				this->MC_ADMIN_RELOAD_GAMBLEITEM();
				break;
			}
		case protocol::MC_ADMIN_DUMP_GAMBLEITEM_LOG::packetID:
			{
				this->MC_ADMIN_DUMP_GAMBLEITEM_LOG();
				break;
			}
		case protocol::MC_ADMIN_ASSASIN::packetID:
			{
				this->MC_ADMIN_ASSASIN();
				break;
			}
		case protocol::Net_RequestUID::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Net_RequestUID(p0);
				break;
			}
		case protocol::Net_ResponseUID::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->Net_ResponseUID(p0, p1);
				break;
			}
		case protocol::Peer_Open::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Peer_Open(p0);
				break;
			}
		case protocol::Peer_ObjectChangeWeapon::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Peer_ObjectChangeWeapon(p0);
				break;
			}
		case protocol::Peer_ObjectChangeParts::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->Peer_ObjectChangeParts(p0, p1);
				break;
			}
		case protocol::Peer_ObjectDamage::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->Peer_ObjectDamage(p0, p1);
				break;
			}
		case protocol::Peer_Chat::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->Peer_Chat(p0, p1);
				break;
			}
		case protocol::Peer_ChatIcon::packetID:
			{
				bool p0 = extract_bool(parameters, &paramPtr, length);
				this->Peer_ChatIcon(p0);
				break;
			}
		case protocol::Peer_Reaction::packetID:
			{
				float p0 = extract_float(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->Peer_Reaction(p0, p1);
				break;
			}
		case protocol::Peer_EnchantDamage::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->Peer_EnchantDamage(p0, p1);
				break;
			}
		case protocol::Peer_Shot::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Peer_Shot(p0);
				break;
			}
		case protocol::Peer_Shot_Melee::packetID:
			{
				float p0 = extract_float(parameters, &paramPtr, length);
				array<float, 3> p1 = extract_position(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				this->Peer_Shot_Melee(p0, p1, p2);
				break;
			}
		case protocol::Peer_Reload::packetID:
			{
				this->Peer_Reload();
				break;
			}
		case protocol::Peer_ObjectSpMotion::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Peer_ObjectSpMotion(p0);
				break;
			}
		case protocol::Peer_ChangeCharacter::packetID:
			{
				this->Peer_ChangeCharacter();
				break;
			}
		case protocol::Peer_Die::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Peer_Die(p0);
				break;
			}
		case protocol::Peer_Spawn::packetID:
			{
				array<float, 3> p0 = extract_position(parameters, &paramPtr, length);
				array<float, 3> p1 = extract_direction(parameters, &paramPtr, length);
				this->Peer_Spawn(p0, p1);
				break;
			}
		case protocol::Peer_Dash::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Peer_Dash(p0);
				break;
			}
		case protocol::Peer_ObjectSkill::packetID:
			{
				float p0 = extract_float(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				this->Peer_ObjectSkill(p0, p1, p2);
				break;
			}
		case protocol::Peer_CharacterBasicInfo::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Peer_CharacterBasicInfo(p0);
				break;
			}
		case protocol::Peer_CharacterHPInfo::packetID:
			{
				float p0 = extract_float(parameters, &paramPtr, length);
				this->Peer_CharacterHPInfo(p0);
				break;
			}
		case protocol::Peer_CharacterHPAPInfo::packetID:
			{
				float p0 = extract_float(parameters, &paramPtr, length);
				float p1 = extract_float(parameters, &paramPtr, length);
				this->Peer_CharacterHPAPInfo(p0, p1);
				break;
			}
		case protocol::Peer_UDPTest::packetID:
			{
				this->Peer_UDPTest();
				break;
			}
		case protocol::Peer_UDPTestReply::packetID:
			{
				this->Peer_UDPTestReply();
				break;
			}
		case protocol::Peer_Ping::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				this->Peer_Ping(p0);
				break;
			}
		case protocol::Peer_Pong::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				this->Peer_Pong(p0);
				break;
			}
		case protocol::Agent_Connect::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->Agent_Connect(p0, p1);
				break;
			}
		case protocol::Agent_Disconnect::packetID:
			{
				this->Agent_Disconnect();
				break;
			}
		case protocol::Agent_LocalLogin::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->Agent_LocalLogin(p0, p1);
				break;
			}
		case protocol::Match_RegisterAgent::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				this->Match_RegisterAgent(p0, p1, p2);
				break;
			}
		case protocol::Match_UnRegisterAgent::packetID:
			{
				this->Match_UnRegisterAgent();
				break;
			}
		case protocol::Match_Agent_RequestLiveCheck::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p2 = extract_uint32(parameters, &paramPtr, length);
				this->Match_Agent_RequestLiveCheck(p0, p1, p2);
				break;
			}
		case protocol::Match_Agent_ResponseLiveCheck::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				this->Match_Agent_ResponseLiveCheck(p0);
				break;
			}
		case protocol::Agent_StageReserve::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Agent_StageReserve(p0);
				break;
			}
		case protocol::Agent_StageRelease::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Agent_StageRelease(p0);
				break;
			}
		case protocol::Agent_StageReady::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Agent_StageReady(p0);
				break;
			}
		case protocol::Agent_RelayPeer::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p2 = extract_MUID(parameters, &paramPtr, length);
				this->Agent_RelayPeer(p0, p1, p2);
				break;
			}
		case protocol::Agent_PeerReady::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->Agent_PeerReady(p0, p1);
				break;
			}
		case protocol::Agent_LocateToClient::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				int32_t p3 = extract_int32(parameters, &paramPtr, length);
				this->Agent_LocateToClient(p0, p1, p2, p3);
				break;
			}
		case protocol::Agent_ResponseLogin::packetID:
			{
				this->Agent_ResponseLogin();
				break;
			}
		case protocol::Agent_PeerBindTCP::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Agent_PeerBindTCP(p0);
				break;
			}
		case protocol::Agent_PeerBindUDP::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				uint32_t p2 = extract_uint32(parameters, &paramPtr, length);
				std::string p3 = extract_string(parameters, &paramPtr, length);
				uint32_t p4 = extract_uint32(parameters, &paramPtr, length);
				this->Agent_PeerBindUDP(p0, p1, p2, p3, p4);
				break;
			}
		case protocol::Agent_PeerUnbind::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Agent_PeerUnbind(p0);
				break;
			}
		case protocol::Agent_Error::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Agent_Error(p0);
				break;
			}
		case protocol::Agent_TunnelingTCP::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);
				this->Agent_TunnelingTCP(p0, p1, p2);
				break;
			}
		case protocol::Agent_TunnelingUDP::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);
				this->Agent_TunnelingUDP(p0, p1, p2);
				break;
			}
		case protocol::Agent_AllowTunnelingTCP::packetID:
			{
				this->Agent_AllowTunnelingTCP();
				break;
			}
		case protocol::Agent_AllowTunnelingUDP::packetID:
			{
				this->Agent_AllowTunnelingUDP();
				break;
			}
		case protocol::Agent_DebugPing::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Agent_DebugPing(p0);
				break;
			}
		case protocol::Agent_DebugTest::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->Agent_DebugTest(p0);
				break;
			}
		case protocol::Peer_Ping_Time::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				this->Peer_Ping_Time(p0);
				break;
			}
		case protocol::Peer_Pong_Time::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
				this->Peer_Pong_Time(p0, p1);
				break;
			}
		case protocol::Announce_::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->Announce_(p0);
				break;
			}
		case protocol::Announce_Schedule::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->Announce_Schedule(p0);
				break;
			}
		case protocol::Switchclanserverstatus_change::packetID:
			{
				this->Switchclanserverstatus_change();
				break;
			}
		case protocol::Switchclanserverstatus_up_::packetID:
			{
				this->Switchclanserverstatus_up_();
				break;
			}
		case protocol::MC_MATCH_SCHEDULE_STOP_SERVER::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->MC_MATCH_SCHEDULE_STOP_SERVER(p0);
				break;
			}
		case protocol::test::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->test(p0);
				break;
			}
		case protocol::MC_RESPONSE_KEEPER_MANAGER_CONNECT::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->MC_RESPONSE_KEEPER_MANAGER_CONNECT(p0);
				break;
			}
		case protocol::MC_REQUEST_KEEPERMGR_ANNOUNCE::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->MC_REQUEST_KEEPERMGR_ANNOUNCE(p0);
				break;
			}
		case protocol::MC_REQUEST_KEEPER_ANNOUNCE::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->MC_REQUEST_KEEPER_ANNOUNCE(p0);
				break;
			}
		case protocol::Checkping::packetID:
			{
				this->Checkping();
				break;
			}
		case protocol::requestmatchserverstatus::packetID:
			{
				this->requestmatchserverstatus();
				break;
			}
		case protocol::responsematchserverststus::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				uint8_t p2 = extract_uint8(parameters, &paramPtr, length);
				this->responsematchserverststus(p0, p1, p2);
				break;
			}
		case protocol::MC_REQUEST_DOWNLOAD_SERVER_PATCH_FILE::packetID:
			{
				this->MC_REQUEST_DOWNLOAD_SERVER_PATCH_FILE();
				break;
			}
		case protocol::MC_REQUEST_STOP_SERVER::packetID:
			{
				this->MC_REQUEST_STOP_SERVER();
				break;
			}
		case protocol::MC_REQUEST_CONNECTION_STATE::packetID:
			{
				this->MC_REQUEST_CONNECTION_STATE();
				break;
			}
		case protocol::MC_RESPONSE_CONNECTION_STATE::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->MC_RESPONSE_CONNECTION_STATE(p0);
				break;
			}
		case protocol::MC_REQUEST_SERVER_HEARBEAT::packetID:
			{
				this->MC_REQUEST_SERVER_HEARBEAT();
				break;
			}
		case protocol::MC_RESPONSE_SERVER_HEARHEAT::packetID:
			{
				this->MC_RESPONSE_SERVER_HEARHEAT();
				break;
			}
		case protocol::MC_REQUEST_START_SERVER::packetID:
			{
				this->MC_REQUEST_START_SERVER();
				break;
			}
		case protocol::MC_REQUEST_KEEPER_CONNECT_MATCHSERVER::packetID:
			{
				this->MC_REQUEST_KEEPER_CONNECT_MATCHSERVER();
				break;
			}
		case protocol::MC_RESPONSE_KEEPER_CONNECT_MATCHSERVER::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->MC_RESPONSE_KEEPER_CONNECT_MATCHSERVER(p0);
				break;
			}
		case protocol::MC_REQUEST_REFRESH_SERVER::packetID:
			{
				this->MC_REQUEST_REFRESH_SERVER();
				break;
			}
		case protocol::MC_REQUEST_PREPARE_SERVER_PATCH::packetID:
			{
				this->MC_REQUEST_PREPARE_SERVER_PATCH();
				break;
			}
		case protocol::MC_REQUEST_SERVER_PATCH::packetID:
			{
				this->MC_REQUEST_SERVER_PATCH();
				break;
			}
		case protocol::MC_REQUEST_LAST_JOB_STATE::packetID:
			{
				this->MC_REQUEST_LAST_JOB_STATE();
				break;
			}
		case protocol::MC_RESPONSE_LAST_JOB_STATE::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->MC_RESPONSE_LAST_JOB_STATE(p0, p1);
				break;
			}
		case protocol::MC_REQUEST_CONFIG_STATE::packetID:
			{
				this->MC_REQUEST_CONFIG_STATE();
				break;
			}
		case protocol::MC_RESPONSE_CONFIG_STATE::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				int32_t p3 = extract_int32(parameters, &paramPtr, length);
				int32_t p4 = extract_int32(parameters, &paramPtr, length);
				this->MC_RESPONSE_CONFIG_STATE(p0, p1, p2, p3, p4);
				break;
			}
		case protocol::MC_REQUEST_SET_ONE_CONFIG::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->MC_REQUEST_SET_ONE_CONFIG(p0, p1);
				break;
			}
		case protocol::MC_RESPONSE_SET_ONE_CONFIG::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->MC_RESPONSE_SET_ONE_CONFIG(p0, p1);
				break;
			}
		case protocol::MC_REQUEST_STOP_AGENT_SERVER::packetID:
			{
				this->MC_REQUEST_STOP_AGENT_SERVER();
				break;
			}
		case protocol::MC_REQUEST_START_AGENT_SERVER::packetID:
			{
				this->MC_REQUEST_START_AGENT_SERVER();
				break;
			}
		case protocol::MC_REQUEST_DOWNLOAD_AGENT_PATCH_FILE::packetID:
			{
				this->MC_REQUEST_DOWNLOAD_AGENT_PATCH_FILE();
				break;
			}
		case protocol::MC_REQUEST_PREPARE_AGENT_PATCH::packetID:
			{
				this->MC_REQUEST_PREPARE_AGENT_PATCH();
				break;
			}
		case protocol::MC_REQUEST_AGENT_PATCH::packetID:
			{
				this->MC_REQUEST_AGENT_PATCH();
				break;
			}
		case protocol::MC_REQUEST_RESET_PATCH::packetID:
			{
				this->MC_REQUEST_RESET_PATCH();
				break;
			}
		case protocol::MC_REQUEST_DISCONNECT_SERVER::packetID:
			{
				this->MC_REQUEST_DISCONNECT_SERVER();
				break;
			}
		case protocol::MC_REQUEST_REBOOT_WINDOWS::packetID:
			{
				this->MC_REQUEST_REBOOT_WINDOWS();
				break;
			}
		case protocol::MC_REQUEST_ANNOUNCE_STOP_SERVER::packetID:
			{
				this->MC_REQUEST_ANNOUNCE_STOP_SERVER();
				break;
			}
		case protocol::MC_RESPONSE_ANNOUNCE_STOP_SERVER::packetID:
			{
				this->MC_RESPONSE_ANNOUNCE_STOP_SERVER();
				break;
			}
		case protocol::MC_REQUEST_KEEPER_MANAGER_SCHEDULE::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				int32_t p3 = extract_int32(parameters, &paramPtr, length);
				int32_t p4 = extract_int32(parameters, &paramPtr, length);
				int32_t p5 = extract_int32(parameters, &paramPtr, length);
				int32_t p6 = extract_int32(parameters, &paramPtr, length);
				int32_t p7 = extract_int32(parameters, &paramPtr, length);
				std::string p8 = extract_string(parameters, &paramPtr, length);
				this->MC_REQUEST_KEEPER_MANAGER_SCHEDULE(p0, p1, p2, p3, p4, p5, p6, p7, p8);
				break;
			}
		case protocol::MC_RESPONSE_KEEPER_MANAGER_SCHEDULE::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				array<uint16_t, 3> p1 = extract_vector(parameters, &paramPtr, length);
				this->MC_RESPONSE_KEEPER_MANAGER_SCHEDULE(p0, p1);
				break;
			}
		case protocol::MC_REQUEST_SERVER_AGENT_STATE::packetID:
			{
				this->MC_REQUEST_SERVER_AGENT_STATE();
				break;
			}
		case protocol::MC_RESPONSE_SERVER_AGENT_STATE::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->MC_RESPONSE_SERVER_AGENT_STATE(p0, p1);
				break;
			}
		case protocol::MC_REQUEST_SERVER_STATUS::packetID:
			{
				this->MC_REQUEST_SERVER_STATUS();
				break;
			}
		case protocol::MC_REQUEST_START_SERVER_SCHEDULE::packetID:
			{
				this->MC_REQUEST_START_SERVER_SCHEDULE();
				break;
			}
		case protocol::MC_REQUEST_WRITE_CLIENT_CRC::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				this->MC_REQUEST_WRITE_CLIENT_CRC(p0);
				break;
			}
		case protocol::MC_RESPONSE_WRITE_CLIENT_CRC::packetID:
			{
				bool p0 = extract_bool(parameters, &paramPtr, length);
				this->MC_RESPONSE_WRITE_CLIENT_CRC(p0);
				break;
			}
		case protocol::MC_REQUEST_KEEPER_RELOAD_SERVER_CONFIG::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->MC_REQUEST_KEEPER_RELOAD_SERVER_CONFIG(p0);
				break;
			}
		case protocol::MC_REQUEST_RELOAD_CONFIG::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->MC_REQUEST_RELOAD_CONFIG(p0);
				break;
			}
		case protocol::MC_REQUEST_KEEPER_ADD_HASHMAP::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->MC_REQUEST_KEEPER_ADD_HASHMAP(p0);
				break;
			}
		case protocol::MC_RESPONSE_KEEPER_ADD_HASHMAP::packetID:
			{
				bool p0 = extract_bool(parameters, &paramPtr, length);
				this->MC_RESPONSE_KEEPER_ADD_HASHMAP(p0);
				break;
			}
		case protocol::MC_REQUEST_ADD_HASHMAP::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->MC_REQUEST_ADD_HASHMAP(p0);
				break;
			}
		case protocol::MC_RESPONSE_ADD_HASHMAP::packetID:
			{
				bool p0 = extract_bool(parameters, &paramPtr, length);
				this->MC_RESPONSE_ADD_HASHMAP(p0);
				break;
			}
		case protocol::Questitem::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Questitem(p0);
				break;
			}
		case protocol::Quest_item_response::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Quest_item_response(p0);
				break;
			}
		case protocol::Quest_item_buy::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->Quest_item_buy(p0, p1);
				break;
			}
		case protocol::Quest_item_responsebuy::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->Quest_item_responsebuy(p0, p1);
				break;
			}
		case protocol::Quest_item_sell::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				this->Quest_item_sell(p0, p1, p2);
				break;
			}
		case protocol::Quest_item_responsesell::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->Quest_item_responsesell(p0, p1);
				break;
			}
		case protocol::Quest_Reward::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p3 = extract_blob(parameters, &paramPtr, length);
				this->Quest_Reward(p0, p1, p2, p3);
				break;
			}
		case protocol::Quest_Request_Sacrifice::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				this->Quest_Request_Sacrifice(p0, p1, p2);
				break;
			}
		case protocol::Quest_Response_Sacrifice::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				int32_t p3 = extract_int32(parameters, &paramPtr, length);
				this->Quest_Response_Sacrifice(p0, p1, p2, p3);
				break;
			}
		case protocol::Quest_Callback_Sacrifice::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				this->Quest_Callback_Sacrifice(p0, p1, p2);
				break;
			}
		case protocol::Quest_Callback_Result::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				int32_t p3 = extract_int32(parameters, &paramPtr, length);
				this->Quest_Callback_Result(p0, p1, p2, p3);
				break;
			}
		case protocol::Quest_Request_SlotInfo::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Quest_Request_SlotInfo(p0);
				break;
			}
		case protocol::Quest_Resonse_SlotInfo::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				uint64_t p2 = extract_MUID(parameters, &paramPtr, length);
				int32_t p3 = extract_int32(parameters, &paramPtr, length);
				this->Quest_Resonse_SlotInfo(p0, p1, p2, p3);
				break;
			}
		case protocol::Quest_RequestLevel::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Quest_RequestLevel(p0);
				break;
			}
		case protocol::Quest_ResponseLevel::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				this->Quest_ResponseLevel(p0);
				break;
			}
		case protocol::Quest_Survival_Result::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				this->Quest_Survival_Result(p0, p1);
				break;
			}
		case protocol::Quest_Survival_Ranking::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->Quest_Survival_Ranking(p0);
				break;
			}
		case protocol::Quest_Survuval_PrivateRanking::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
				this->Quest_Survuval_PrivateRanking(p0, p1);
				break;
			}
		case protocol::Quest_Start_Fail::packetID:
			{
				int32_t p0 = extract_int32(parameters, &paramPtr, length);
				uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
				this->Quest_Start_Fail(p0, p1);
				break;
			}
		case protocol::monsterinfo::packetID:
			{
				array<uint16_t, 3> p0 = extract_vector(parameters, &paramPtr, length);
				this->monsterinfo(p0);
				break;
			}
		case protocol::Quest_Bible_Request::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				this->Quest_Bible_Request(p0);
				break;
			}
		case protocol::Quest_Bible_Response::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				tuple<shared_array<uint8_t>, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
				this->Quest_Bible_Response(p0, p1);
				break;
			}
		case protocol::MC_REQUEST_SERVER_LIST_INFO::packetID:
			{
				this->MC_REQUEST_SERVER_LIST_INFO();
				break;
			}
		case protocol::MC_RESPONSE_SERVER_LIST_INFO::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->MC_RESPONSE_SERVER_LIST_INFO(p0);
				break;
			}
		case protocol::MC_RESPONSE_BLOCK_COUNTRY_CODE_IP::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				std::string p1 = extract_string(parameters, &paramPtr, length);
				this->MC_RESPONSE_BLOCK_COUNTRY_CODE_IP(p0, p1);
				break;
			}
		case protocol::MC_RESPONSE_BLOCK_COUNTRYCODE::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->MC_RESPONSE_BLOCK_COUNTRYCODE(p0);
				break;
			}
		case protocol::MC_LOCAL_UPDATE_USE_COUNTRY_FILTER::packetID:
			{
				this->MC_LOCAL_UPDATE_USE_COUNTRY_FILTER();
				break;
			}
		case protocol::MC_LOCAL_GET_DB_IP_TO_COUNTRY::packetID:
			{
				this->MC_LOCAL_GET_DB_IP_TO_COUNTRY();
				break;
			}
		case protocol::MC_LOCAL_GET_DB_BLOCK_COUNTRY_CODE::packetID:
			{
				this->MC_LOCAL_GET_DB_BLOCK_COUNTRY_CODE();
				break;
			}
		case protocol::MC_LOCAL_GET_DB_CUSTOM_IP::packetID:
			{
				this->MC_LOCAL_GET_DB_CUSTOM_IP();
				break;
			}
		case protocol::MC_LOCAL_UPDAET_IP_TO_COUNTRY::packetID:
			{
				this->MC_LOCAL_UPDAET_IP_TO_COUNTRY();
				break;
			}
		case protocol::MC_LOCAL_UPDAET_BLOCK_COUTRYCODE::packetID:
			{
				this->MC_LOCAL_UPDAET_BLOCK_COUTRYCODE();
				break;
			}
		case protocol::MC_LOCAL_UPDAET_CUSTOM_IP::packetID:
			{
				this->MC_LOCAL_UPDAET_CUSTOM_IP();
				break;
			}
		case protocol::MC_LOCAL_UPDATE_ACCEPT_INVALID_IP::packetID:
			{
				this->MC_LOCAL_UPDATE_ACCEPT_INVALID_IP();
				break;
			}
		case protocol::MC_REQUEST_XTRAP_HASHVALUE::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->MC_REQUEST_XTRAP_HASHVALUE(p0);
				break;
			}
		case protocol::MC_RESPONSE_XTRAP_HASHVALUE::packetID:
			{
				std::string p0 = extract_string(parameters, &paramPtr, length);
				this->MC_RESPONSE_XTRAP_HASHVALUE(p0);
				break;
			}
		case protocol::MC_REQUEST_XTRAP_DETECTCRACK::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->MC_REQUEST_XTRAP_DETECTCRACK(p0);
				break;
			}
		case protocol::MC_REQUEST_XTRAP_SEEDKEY::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->MC_REQUEST_XTRAP_SEEDKEY(p0);
				break;
			}
		case protocol::MC_RESPONSE_XTRAP_SEEDKEY::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->MC_RESPONSE_XTRAP_SEEDKEY(p0);
				break;
			}
		case protocol::MC_REQUEST_GAMEGUARD_AUTH_INDEX::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p2 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p3 = extract_uint32(parameters, &paramPtr, length);
				this->MC_REQUEST_GAMEGUARD_AUTH_INDEX(p0, p1, p2, p3);
				break;
			}
		case protocol::MC_RESPONSE_GAMEGUARD_AUTH_INDEX::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p2 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p3 = extract_uint32(parameters, &paramPtr, length);
				this->MC_RESPONSE_GAMEGUARD_AUTH_INDEX(p0, p1, p2, p3);
				break;
			}
		case protocol::MC_REQUEST_GAMEGUARD_AUTH_VALUE::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p2 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p3 = extract_uint32(parameters, &paramPtr, length);
				this->MC_REQUEST_GAMEGUARD_AUTH_VALUE(p0, p1, p2, p3);
				break;
			}
		case protocol::MC_RESPONSE_GAMEGUARD_AUTH_VALUE::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p2 = extract_uint32(parameters, &paramPtr, length);
				uint32_t p3 = extract_uint32(parameters, &paramPtr, length);
				this->MC_RESPONSE_GAMEGUARD_AUTH_VALUE(p0, p1, p2, p3);
				break;
			}
		case protocol::MC_REQUEST_GIVE_ONESELF_UP::packetID:
			{
				this->MC_REQUEST_GIVE_ONESELF_UP();
				break;
			}
		case protocol::MC_RESPONSE_GAMBLEITEMLIST::packetID:
			{
				tuple<shared_array<uint8_t>, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
				this->MC_RESPONSE_GAMBLEITEMLIST(p0);
				break;
			}
		case protocol::MC_MATCH_ROUTE_UPDATE_STAGE_EQUIP_LOOK::packetID:
			{
				uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
				int32_t p1 = extract_int32(parameters, &paramPtr, length);
				int32_t p2 = extract_int32(parameters, &paramPtr, length);
				this->MC_MATCH_ROUTE_UPDATE_STAGE_EQUIP_LOOK(p0, p1, p2);
				break;
			}
		case protocol::MC_REQUEST_RESOURCE_CRC32::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				this->MC_REQUEST_RESOURCE_CRC32(p0);
				break;
			}
		case protocol::MC_RESPONSE_RESOURCE_CRC32::packetID:
			{
				uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
				this->MC_RESPONSE_RESOURCE_CRC32(p0);
				break;
			}		}
	} catch(...) {
			this->OnFailedParse(packetID, parameters, length);
	}
}

}