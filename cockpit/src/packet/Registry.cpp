/*
 * NOTICE: Do not manually edit this file. It has been autogenerated by
 * protocol/parse.py. Any changes should me made there, instead of here.
 */

#include <boost/array.hpp>
#include <boost/format.hpp>
#include <util/buffer.h>
#include <cockpit/packet/Registry.h>
#include <cockpit/packet/protocol/all>

using namespace std;
using namespace boost;

// The following are implemented in security.cpp
// If they throw ANY exception, the packet's parsing will be broken,
// the packet will be dropped, and OnFailedParse will be signaled.
// The extraction method MUST modify *currentParam to point to the
// next element in the parameter string.
int32_t extract_int32(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
uint32_t extract_uint32(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
float extract_float(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
bool extract_bool(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
string extract_string(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
array<float, 3> extract_position(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
array<float, 3> extract_direction(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
uint32_t extract_color(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
uint64_t extract_MUID(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
tuple<Buffer /* data */, size_t /* count */, size_t /* size */>
extract_blob(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
boost::int8_t extract_int8(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
boost::uint8_t extract_uint8(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
int16_t extract_int16(const uint8_t* paramStart, const uint8_t** currentParam, uint16_t packetLength);
uint16_t extract_uint16(const uint8_t* paramStart, const uint8_t**currentParam, uint16_t packetLength);

namespace cockpit {
namespace packet {

Registry::~Registry()
{
}

static void do_nothing_0() {}
template <typename T1>
static void do_nothing_1(T1) {}
template <typename T1, typename T2>
static void do_nothing_2(T1, T2) {}
template <typename T1, typename T2, typename T3>
static void do_nothing_3(T1, T2, T3) {}
template <typename T1, typename T2, typename T3, typename T4>
static void do_nothing_4(T1, T2, T3, T4) {}
template <typename T1, typename T2, typename T3, typename T4, typename T5>
static void do_nothing_5(T1, T2, T3, T4, T5) {}
template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6>
static void do_nothing_6(T1, T2, T3, T4, T5, T6) {}
template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7>
static void do_nothing_7(T1, T2, T3, T4, T5, T6, T7) {}
template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8>
static void do_nothing_8(T1, T2, T3, T4, T5, T6, T7, T8) {}
template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
static void do_nothing_9(T1, T2, T3, T4, T5, T6, T7, T8, T9) {}

Registry::Registry()
	:
	Net_Ping(do_nothing_1< boost::uint32_t >),
	Net_Pong(do_nothing_1< boost::uint32_t >),
	Match_Announce(do_nothing_2< boost::uint32_t, const std::string& >),
	Clock_Synchronize(do_nothing_1< boost::uint32_t >),
	Match_Login(do_nothing_4< const std::string&, const std::string&, boost::int32_t, boost::uint32_t >),
	Match_ResponseLogin(do_nothing_8< boost::int32_t, const std::string&, boost::int8_t, const std::string&, boost::uint8_t, boost::uint8_t, boost::uint64_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Match_Response_Result(do_nothing_1< boost::int32_t >),
	Match_LoginNetmarble(do_nothing_4< const std::string&, const std::string&, boost::int32_t, boost::uint32_t >),
	MC_MATCH_DISCONNMSG(do_nothing_1< boost::uint32_t >),
	MC_MATCH_LOGIN_NHNUSA(do_nothing_5< const std::string&, const std::string&, boost::int32_t, boost::uint32_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	MC_MATCH_LOGIN_GAMEON_JP(do_nothing_5< const std::string&, const std::string&, boost::int32_t, boost::uint32_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Match_ObjectCache(do_nothing_2< boost::uint8_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Match_BridgePeer(do_nothing_3< boost::uint64_t, boost::uint32_t, boost::uint32_t >),
	Match_BridgePeerACK(do_nothing_2< boost::uint64_t, boost::int32_t >),
	MatchServer_RequestRecommandedChannel(do_nothing_0),
	MatchServer_ResponseRecommandedChannel(do_nothing_1< boost::uint64_t >),
	Channel_Join(do_nothing_2< boost::uint64_t, boost::uint64_t >),
	Channel_ResponseJoin(do_nothing_4< boost::uint64_t, boost::int32_t, const std::string&, bool >),
	Channel_RequestJoinFromName(do_nothing_4< boost::uint64_t, boost::int32_t, boost::int32_t, const std::string& >),
	Channel_Leave(do_nothing_2< boost::uint64_t, boost::uint64_t >),
	Channel_ListStart(do_nothing_3< boost::uint64_t, boost::int32_t, boost::int32_t >),
	Channel_ListStop(do_nothing_1< boost::uint64_t >),
	Channel_List(do_nothing_1< boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Channel_Request_Chat(do_nothing_3< boost::uint64_t, boost::uint64_t, const std::string& >),
	Channel_Chat(do_nothing_4< boost::uint64_t, const std::string&, const std::string&, boost::int32_t >),
	Channel_Request_Rule(do_nothing_1< boost::uint64_t >),
	Channel_Response_Rule(do_nothing_2< boost::uint64_t, const std::string& >),
	Channel_RequestAllPlayerList(do_nothing_4< boost::uint64_t, boost::uint64_t, boost::uint32_t, boost::uint32_t >),
	Channel_ResponseAllPlayerList(do_nothing_2< boost::uint64_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Stage_Create(do_nothing_4< boost::uint64_t, const std::string&, bool, const std::string& >),
	Stage_RequestJoin(do_nothing_2< boost::uint64_t, boost::uint64_t >),
	Stage_RequestPrivateJoin(do_nothing_3< boost::uint64_t, boost::uint64_t, const std::string& >),
	Stage_Join(do_nothing_4< boost::uint64_t, boost::uint64_t, boost::uint32_t, const std::string& >),
	Stage_Leave(do_nothing_1< boost::uint64_t >),
	Stage_Request_PlayerList(do_nothing_1< boost::uint64_t >),
	Stage_Follow(do_nothing_1< const std::string& >),
	Stage_Response_Follow(do_nothing_1< boost::int32_t >),
	Stage_ResponseJoin(do_nothing_1< boost::int32_t >),
	Stage_RequirePassword(do_nothing_2< boost::uint64_t, const std::string& >),
	RequestGameInfo(do_nothing_2< boost::uint64_t, boost::uint64_t >),
	ResponseGameInfo(do_nothing_4< boost::uint64_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */>, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */>, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Stage_ResponseCreate(do_nothing_1< boost::int32_t >),
	Stage_Request_EnterBattle(do_nothing_2< boost::uint64_t, boost::uint64_t >),
	Stage_EnterBattle(do_nothing_2< boost::uint8_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Stage_LeaveBattle(do_nothing_1< boost::uint64_t >),
	Stage_Start(do_nothing_3< boost::uint64_t, boost::uint64_t, boost::int32_t >),
	Stage_Map(do_nothing_2< boost::uint64_t, const std::string& >),
	Stage_Chat(do_nothing_3< boost::uint64_t, boost::uint64_t, const std::string& >),
	Stage_RequestQuickJoin(do_nothing_2< boost::uint64_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Stage_ResponseQuickJoin(do_nothing_2< boost::int32_t, boost::uint64_t >),
	Stage_StageGo(do_nothing_1< boost::uint32_t >),
	Stage_State(do_nothing_4< boost::uint64_t, boost::uint64_t, boost::int32_t, boost::int32_t >),
	Stage_Team(do_nothing_3< boost::uint64_t, boost::uint64_t, boost::uint32_t >),
	Stage_Master(do_nothing_2< boost::uint64_t, boost::uint64_t >),
	Stage_ListStart(do_nothing_0),
	Stage_ListStop(do_nothing_0),
	Stage_List(do_nothing_3< boost::int8_t, boost::int8_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Stage_RequestStageList(do_nothing_3< boost::uint64_t, boost::uint64_t, boost::int32_t >),
	Channel_RequestPlayerList(do_nothing_3< boost::uint64_t, boost::uint64_t, boost::int32_t >),
	Channel_ResponsePlayerList(do_nothing_3< boost::uint8_t, boost::uint8_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Stage_RequestStageSetting(do_nothing_1< boost::uint64_t >),
	Stage_ResponseStageSetting(do_nothing_5< boost::uint64_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */>, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */>, boost::int32_t, boost::uint64_t >),
	Stage_StageSetting(do_nothing_3< boost::uint64_t, boost::uint64_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Stage_Launch(do_nothing_2< boost::uint64_t, const std::string& >),
	Stage_Finish(do_nothing_1< boost::uint64_t >),
	Stage_RequestPeerList(do_nothing_2< boost::uint64_t, boost::uint64_t >),
	Stage_ResponsePeerList(do_nothing_2< boost::uint64_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Loading_Complete(do_nothing_2< boost::uint64_t, boost::int32_t >),
	Match_RequestPeerRelay(do_nothing_2< boost::uint64_t, boost::uint64_t >),
	Match_ResponsePeerRelay(do_nothing_1< boost::uint64_t >),
	Stage_RoundState(do_nothing_4< boost::uint64_t, boost::int32_t, boost::int32_t, boost::int32_t >),
	Game_Kill(do_nothing_1< boost::uint64_t >),
	Game_Requst_Spawn(do_nothing_3< boost::uint64_t, const boost::array<float, 3>&, const boost::array<float, 3>& >),
	Game_LevelUp(do_nothing_2< boost::uint64_t, boost::int32_t >),
	Game_LevelDown(do_nothing_2< boost::uint64_t, boost::int32_t >),
	Game_Dead(do_nothing_4< boost::uint64_t, boost::uint32_t, boost::uint64_t, boost::uint32_t >),
	Game_TeamBonus(do_nothing_2< boost::uint64_t, boost::uint32_t >),
	Game_RequestTimeSync(do_nothing_1< boost::uint32_t >),
	Game_ResponseTimeSync(do_nothing_2< boost::uint32_t, boost::uint32_t >),
	Game_ReportTimeSync(do_nothing_2< boost::uint32_t, boost::uint32_t >),
	Stage_RequestForcedEntry(do_nothing_2< boost::uint64_t, boost::uint64_t >),
	Stage_ResponseForcedEntry(do_nothing_1< boost::int32_t >),
	Stage_RoundFinishInfo(do_nothing_4< boost::uint64_t, boost::uint64_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */>, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Match_Notify(do_nothing_1< boost::uint32_t >),
	Match_Whisper(do_nothing_3< const std::string&, const std::string&, const std::string& >),
	Match_Where(do_nothing_1< const std::string& >),
	Match_UserOption(do_nothing_1< boost::uint32_t >),
	ChatRoom_Create(do_nothing_2< boost::uint64_t, const std::string& >),
	ChatRoom_Join(do_nothing_2< const std::string&, const std::string& >),
	ChatRoom_Leave(do_nothing_2< const std::string&, const std::string& >),
	ChatRoom_SelectWrite(do_nothing_1< const std::string& >),
	ChatRoom_Invite(do_nothing_3< const std::string&, const std::string&, const std::string& >),
	ChatRoom_Chat(do_nothing_3< const std::string&, const std::string&, const std::string& >),
	Match_RequestAccountCharList(do_nothing_1< boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Match_ResponseAccountCharList(do_nothing_1< boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Match_RequestAccountCharInfo(do_nothing_2< boost::int8_t, boost::int32_t >),
	Match_ResponseAccountCharInfo(do_nothing_2< boost::int8_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Match_RequestSelectChar(do_nothing_3< boost::uint64_t, boost::uint32_t, boost::int32_t >),
	Match_ResponseSelectChar(do_nothing_3< boost::int32_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */>, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Match_RequestCharInfo(do_nothing_2< boost::uint64_t, boost::uint32_t >),
	Match_ResponseCharInfo(do_nothing_2< boost::uint64_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Match_RequestDeleteChar(do_nothing_4< boost::uint64_t, boost::uint32_t, boost::int32_t, const std::string& >),
	Match_ResponseDeleteChar(do_nothing_1< boost::int32_t >),
	Match_RequestCreateChar(do_nothing_8< boost::uint64_t, boost::uint32_t, boost::int32_t, const std::string&, boost::uint32_t, boost::uint32_t, boost::uint32_t, boost::uint32_t >),
	Match_ResponseCreateChar(do_nothing_2< boost::int32_t, const std::string& >),
	Match_RequestBuyItem(do_nothing_2< boost::uint64_t, boost::uint32_t >),
	Match_ResponseBuyItem(do_nothing_1< boost::int32_t >),
	Match_RequestSellItem(do_nothing_2< boost::uint64_t, boost::uint64_t >),
	Match_ResponseSellItem(do_nothing_1< boost::int32_t >),
	Match_RequestShopItemList(do_nothing_3< boost::uint64_t, boost::int32_t, boost::int32_t >),
	Match_ResponseShopItemList(do_nothing_2< boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */>, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Match_RequestCharacterItemList(do_nothing_1< boost::uint64_t >),
	Match_RequestCharacterItemListForce(do_nothing_1< boost::uint64_t >),
	Match_ResponseCharacterItemList(do_nothing_4< boost::int32_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */>, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */>, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	MatchRequestEquipItem(do_nothing_4< boost::uint64_t, boost::uint64_t, boost::uint32_t, boost::int32_t >),
	MatchResponseEquipItem(do_nothing_1< boost::int32_t >),
	MatchRequestTakeoffItem(do_nothing_3< boost::uint64_t, boost::uint32_t, boost::int32_t >),
	MatchResponseTakeoffItem(do_nothing_1< boost::int32_t >),
	Match_RequestAccountItemList(do_nothing_1< boost::uint64_t >),
	Match_ResponseAccountItemList(do_nothing_1< boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Match_RequestBringAccountItem(do_nothing_2< boost::uint64_t, boost::int32_t >),
	Match_ResponseBringAccountItem(do_nothing_1< boost::int32_t >),
	Match_RequestBringBackAccountItem(do_nothing_2< boost::uint64_t, boost::uint64_t >),
	Match_ResponseBringBackAccountItem(do_nothing_1< boost::int32_t >),
	Match_ExpiredRentItem(do_nothing_1< boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Match_ItemGamble(do_nothing_1< boost::uint64_t >),
	Match_GambleResultItem(do_nothing_2< boost::uint32_t, boost::uint32_t >),
	Match_Request_Suicide(do_nothing_1< boost::uint64_t >),
	Match_Response_Suicide(do_nothing_2< boost::int32_t, boost::uint64_t >),
	Match_Response_SuicideReserve(do_nothing_0),
	Match_Request_Obtain_WorldItem(do_nothing_2< boost::uint64_t, boost::int32_t >),
	Match_WorldItem_Obtain(do_nothing_2< boost::uint64_t, boost::int32_t >),
	Match_WorldItem_Spawn(do_nothing_1< boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Match_Request_Spawn_WorldItem(do_nothing_4< boost::uint64_t, boost::int32_t, const boost::array<float, 3>&, float >),
	Match_Request_Spawn_WorldItem_UID(do_nothing_1< boost::int32_t >),
	Match_Reset_TeamMembers(do_nothing_1< boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Match_Assign_Commander(do_nothing_2< boost::uint64_t, boost::uint64_t >),
	Match_Set_Observer(do_nothing_1< boost::uint64_t >),
	Match_Ladder_Request_Challenge(do_nothing_3< boost::int32_t, boost::uint32_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Match_Ladder_Response_Challenge(do_nothing_1< boost::int32_t >),
	Match_Ladder_SearchRival(do_nothing_0),
	Match_Ladder_Request_CancelChallenge(do_nothing_0),
	Match_Ladder_CancelChallenge(do_nothing_1< const std::string& >),
	Ladder_Prepare(do_nothing_2< boost::uint64_t, boost::int32_t >),
	Ladder_Launch(do_nothing_2< boost::uint64_t, const std::string& >),
	Match_RequestProposal(do_nothing_5< boost::uint64_t, boost::int32_t, boost::int32_t, boost::int32_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Match_ResponseProposal(do_nothing_3< boost::int32_t, boost::int32_t, boost::int32_t >),
	Match_AskAgreement(do_nothing_4< boost::uint64_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */>, boost::int32_t, boost::int32_t >),
	Match_ReplyAgreement(do_nothing_6< boost::uint64_t, boost::uint64_t, const std::string&, boost::int32_t, boost::int32_t, bool >),
	Match_Friend_Add(do_nothing_1< const std::string& >),
	Match_Friend_Remove(do_nothing_1< const std::string& >),
	Match_Friend_List(do_nothing_0),
	Match_Response_FriendList(do_nothing_1< boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Match_Friend_Msg(do_nothing_1< const std::string& >),
	Match_Clan_RequestCreateClan(do_nothing_7< boost::uint64_t, boost::int32_t, const std::string&, const std::string&, const std::string&, const std::string&, const std::string& >),
	Match_Clan_ResponseCreateClan(do_nothing_2< boost::int32_t, boost::int32_t >),
	Match_Clan_AskSponsorAgreement(do_nothing_4< boost::int32_t, const std::string&, boost::uint64_t, const std::string& >),
	Match_Clan_AnswerSponsorAgreement(do_nothing_4< boost::int32_t, boost::uint64_t, const std::string&, bool >),
	Match_Clan_RequestAgreedCreateClan(do_nothing_6< boost::uint64_t, const std::string&, const std::string&, const std::string&, const std::string&, const std::string& >),
	Match_Clan_AgreedResponseCreateClan(do_nothing_1< boost::int32_t >),
	Match_Clan_RequestCloseClan(do_nothing_2< boost::uint64_t, const std::string& >),
	Match_Clan_ResponseCloseClan(do_nothing_1< boost::int32_t >),
	Match_Clan_RequestJoinClan(do_nothing_3< boost::uint64_t, const std::string&, const std::string& >),
	Match_Clan_ResponseJoinClan(do_nothing_1< boost::int32_t >),
	Match_Clan_AskJoinAgreement(do_nothing_3< const std::string&, boost::uint64_t, const std::string& >),
	Match_Clan_AnswerJoinAgreement(do_nothing_3< boost::uint64_t, const std::string&, bool >),
	Match_Clan_RequestAgreedJoinClan(do_nothing_3< boost::uint64_t, const std::string&, const std::string& >),
	Match_Clan_ResponseAgreedJoinClan(do_nothing_1< boost::int32_t >),
	Match_Clan_RequestLeaveClan(do_nothing_1< boost::uint64_t >),
	Match_Clan_ResponseLeaveClan(do_nothing_1< boost::int32_t >),
	Match_Clan_UpdateCharClanInfo(do_nothing_1< boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Match_Clan_Master_RequestChangeGrade(do_nothing_4< boost::uint64_t, const std::string&, boost::int32_t, boost::int32_t >),
	Match_Clan_Master_ResponseChangeGrade(do_nothing_1< boost::int32_t >),
	Match_Clan_Admin_RequestExpelMember(do_nothing_2< boost::uint64_t, const std::string& >),
	Match_Clan_Admin_ResponseLeaveMember(do_nothing_1< boost::int32_t >),
	Match_Clan_Request_Msg(do_nothing_2< boost::uint64_t, const std::string& >),
	Match_Clan_Msg(do_nothing_2< const std::string&, const std::string& >),
	Match_Clan_Request_ClanMemberList(do_nothing_1< boost::uint64_t >),
	Match_Clan_Response_ClanMemberList(do_nothing_1< boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Match_Clan_Request_Clan_Info(do_nothing_2< boost::uint64_t, const std::string& >),
	Match_Clan_Response_Clan_Info(do_nothing_1< boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Match_Clan_Standby_ClanList(do_nothing_3< boost::int32_t, boost::int32_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Match_Clan_Member_Connected(do_nothing_1< const std::string& >),
	Match_Clan_Request_EmblemURL(do_nothing_1< boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Match_Clan_Response_EmblemURL(do_nothing_3< boost::int32_t, boost::int32_t, const std::string& >),
	Match_Clan_Local_EmblemReady(do_nothing_2< boost::int32_t, const std::string& >),
	MC_MATCH_CLAN_ACCOUNCE_DELETE(do_nothing_1< const std::string& >),
	Match_Callvote(do_nothing_2< const std::string&, const std::string& >),
	Match_NotifyCallvote(do_nothing_2< const std::string&, const std::string& >),
	Match_NotifyVoteResult(do_nothing_2< const std::string&, boost::int32_t >),
	Match_VoteYes(do_nothing_0),
	Match_VoteNo(do_nothing_0),
	Votestop(do_nothing_0),
	Match_Broadcast_ClanRenewVictories(do_nothing_3< const std::string&, const std::string&, boost::int32_t >),
	Match_Broadcast_ClanInterruptVictories(do_nothing_3< const std::string&, const std::string&, boost::int32_t >),
	Match_Broadcast_DuelRenewVictories(do_nothing_4< const std::string&, const std::string&, boost::int32_t, boost::int32_t >),
	Match_Broadcast_DuelInterruptVictories(do_nothing_3< const std::string&, const std::string&, boost::int32_t >),
	Match_Assign_Berserker(do_nothing_1< boost::uint64_t >),
	Match_Duel_QueueInfo(do_nothing_1< boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Match_Quest_Ping(do_nothing_1< boost::uint32_t >),
	Match_Quest_Pong(do_nothing_1< boost::uint32_t >),
	MC_QUEST_NPCLIST(do_nothing_2< boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */>, boost::int32_t >),
	Event_ChangeMaster(do_nothing_0),
	Event_ChangePassword(do_nothing_1< const std::string& >),
	Event_RequestJJang(do_nothing_1< const std::string& >),
	Event_RemoveJJang(do_nothing_1< const std::string& >),
	Event_UpdateJJang(do_nothing_2< boost::uint64_t, bool >),
	Quest_NPCSpawn(do_nothing_4< boost::uint64_t, boost::uint64_t, boost::uint8_t, boost::uint8_t >),
	Quest_Entrust_NPC_Control(do_nothing_2< boost::uint64_t, boost::uint64_t >),
	Quest_Checksum_NPCInfo(do_nothing_2< boost::uint64_t, boost::uint32_t >),
	Quest_NPCDead(do_nothing_2< boost::uint64_t, boost::uint64_t >),
	Quest_RefreshPlayerStatus(do_nothing_0),
	Quest_NPC_AllClear(do_nothing_0),
	Quest_Round_Start(do_nothing_1< boost::uint8_t >),
	Quest_RequestDead(do_nothing_0),
	Quest_PlayerDead(do_nothing_1< boost::uint64_t >),
	Quest_ObtainQuestItem(do_nothing_1< boost::uint32_t >),
	Quest_ObtainZItem(do_nothing_1< boost::uint32_t >),
	Quest_State_Mapset(do_nothing_2< boost::uint64_t, boost::int8_t >),
	Quest_Stage_GameInfo(do_nothing_3< boost::int8_t, boost::int8_t, boost::uint32_t >),
	Quest_SectorBonus(do_nothing_3< boost::uint64_t, boost::uint32_t, boost::uint32_t >),
	Quest_GameInfo(do_nothing_1< boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Quest_Combat_State(do_nothing_1< boost::int8_t >),
	Quest_Sector_Start(do_nothing_2< boost::int8_t, boost::uint8_t >),
	Quest_Complete(do_nothing_1< boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Quest_Failed(do_nothing_0),
	Quest_Request_Moveto_Portal(do_nothing_1< boost::int8_t >),
	Quest_Moveto_Portal(do_nothing_3< boost::int8_t, boost::uint8_t, boost::uint64_t >),
	Quest_Readyto_NewSector(do_nothing_1< boost::uint64_t >),
	Quest_Peer_NPC_BasicInfo(do_nothing_1< boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Quest_Peer_NPC_HPInfo(do_nothing_2< boost::int32_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Quest_Peer_NPC_Attack_Melee(do_nothing_1< boost::uint64_t >),
	Quest_Peer_NPC_Attack_Range(do_nothing_2< boost::uint64_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Quest_Peer_NPC_Skill_Start(do_nothing_4< boost::uint64_t, boost::int32_t, boost::uint64_t, const boost::array<float, 3>& >),
	Quest_Peer_NPC_Skill_Execute(do_nothing_4< boost::uint64_t, boost::int32_t, boost::uint64_t, const boost::array<float, 3>& >),
	Quest_Peer_NPC_Dead(do_nothing_2< boost::uint64_t, boost::uint64_t >),
	Quest_Test_RequestNPCSpawn(do_nothing_2< boost::int32_t, boost::int32_t >),
	Quest_Test_ClearNPC(do_nothing_0),
	Quest_Test_SectorClear(do_nothing_0),
	Quest_Test_Finish(do_nothing_0),
	Admin_Announce(do_nothing_3< boost::uint64_t, const std::string&, boost::uint32_t >),
	Admin_RequestBanPlayer(do_nothing_2< boost::uint64_t, const std::string& >),
	Admin_ResponseBanPlayer(do_nothing_1< boost::int32_t >),
	Admin_Hide(do_nothing_0),
	MC_ADMIN_RESET_ALL_HACKING_BLOCK(do_nothing_0),
	MC_ADMIN_RELOAD_GAMBLEITEM(do_nothing_0),
	MC_ADMIN_ASSASIN(do_nothing_0),
	Agent_Connect(do_nothing_2< const std::string&, boost::int32_t >),
	Agent_Disconnect(do_nothing_0),
	Match_RegisterAgent(do_nothing_3< const std::string&, boost::int32_t, boost::int32_t >),
	Match_UnRegisterAgent(do_nothing_0),
	Match_Agent_RequestLiveCheck(do_nothing_3< boost::uint32_t, boost::uint32_t, boost::uint32_t >),
	Match_Agent_ResponseLiveCheck(do_nothing_1< boost::uint32_t >),
	Agent_StageReserve(do_nothing_1< boost::uint64_t >),
	Agent_StageRelease(do_nothing_1< boost::uint64_t >),
	Agent_StageReady(do_nothing_1< boost::uint64_t >),
	Agent_RelayPeer(do_nothing_3< boost::uint64_t, boost::uint64_t, boost::uint64_t >),
	Questitem(do_nothing_1< boost::uint64_t >),
	Quest_item_response(do_nothing_1< boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Quest_item_buy(do_nothing_2< boost::uint64_t, boost::int32_t >),
	Quest_item_responsebuy(do_nothing_2< boost::int32_t, boost::int32_t >),
	Quest_item_sell(do_nothing_3< boost::uint64_t, boost::int32_t, boost::int32_t >),
	Quest_item_responsesell(do_nothing_2< boost::int32_t, boost::int32_t >),
	Quest_Reward(do_nothing_4< boost::int32_t, boost::int32_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */>, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Quest_Request_Sacrifice(do_nothing_3< boost::uint64_t, boost::int32_t, boost::int32_t >),
	Quest_Response_Sacrifice(do_nothing_4< boost::int32_t, boost::uint64_t, boost::int32_t, boost::int32_t >),
	Quest_Callback_Sacrifice(do_nothing_3< boost::uint64_t, boost::int32_t, boost::int32_t >),
	Quest_Callback_Result(do_nothing_4< boost::int32_t, boost::uint64_t, boost::int32_t, boost::int32_t >),
	Quest_Request_SlotInfo(do_nothing_1< boost::uint64_t >),
	Quest_Resonse_SlotInfo(do_nothing_4< boost::uint64_t, boost::int32_t, boost::uint64_t, boost::int32_t >),
	Quest_RequestLevel(do_nothing_1< boost::uint64_t >),
	Quest_ResponseLevel(do_nothing_1< boost::int32_t >),
	Quest_Survival_Result(do_nothing_2< boost::int32_t, boost::int32_t >),
	Quest_Survival_Ranking(do_nothing_1< boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	Quest_Survuval_PrivateRanking(do_nothing_2< boost::uint32_t, boost::uint32_t >),
	Quest_Start_Fail(do_nothing_2< boost::int32_t, boost::uint64_t >),
	monsterinfo(do_nothing_1< boost::int8_t >),
	Quest_Bible_Request(do_nothing_1< boost::uint64_t >),
	Quest_Bible_Response(do_nothing_2< boost::uint64_t, boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	MC_REQUEST_GIVE_ONESELF_UP(do_nothing_0),
	MC_RESPONSE_GAMBLEITEMLIST(do_nothing_1< boost::tuple<Buffer /* data */, size_t /* count */, size_t /* size */> >),
	MC_MATCH_ROUTE_UPDATE_STAGE_EQUIP_LOOK(do_nothing_3< boost::uint64_t, boost::int32_t, boost::int32_t >),
	MC_REQUEST_RESOURCE_CRC32(do_nothing_1< boost::uint32_t >),
	MC_RESPONSE_RESOURCE_CRC32(do_nothing_1< boost::uint32_t >)
{
}


static void do_Net_Ping(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint32_t p0 = extract_uint32(parameters, &paramPtr, length);

	self->Net_Ping(p0);
}

static void do_Net_Pong(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint32_t p0 = extract_uint32(parameters, &paramPtr, length);

	self->Net_Pong(p0);
}

static void do_Match_Announce(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);

	self->Match_Announce(p0, p1);
}

static void do_Clock_Synchronize(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint32_t p0 = extract_uint32(parameters, &paramPtr, length);

	self->Clock_Synchronize(p0);
}

static void do_Match_Login(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);
	uint32_t p3 = extract_uint32(parameters, &paramPtr, length);

	self->Match_Login(p0, p1, p2, p3);
}

static void do_Match_ResponseLogin(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);
	int8_t p2 = extract_int8(parameters, &paramPtr, length);
	std::string p3 = extract_string(parameters, &paramPtr, length);
	uint8_t p4 = extract_uint8(parameters, &paramPtr, length);
	uint8_t p5 = extract_uint8(parameters, &paramPtr, length);
	uint64_t p6 = extract_MUID(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p7 = extract_blob(parameters, &paramPtr, length);

	self->Match_ResponseLogin(p0, p1, p2, p3, p4, p5, p6, p7);
}

static void do_Match_Response_Result(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);

	self->Match_Response_Result(p0);
}

static void do_Match_LoginNetmarble(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);
	uint32_t p3 = extract_uint32(parameters, &paramPtr, length);

	self->Match_LoginNetmarble(p0, p1, p2, p3);
}

static void do_MC_MATCH_DISCONNMSG(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint32_t p0 = extract_uint32(parameters, &paramPtr, length);

	self->MC_MATCH_DISCONNMSG(p0);
}

static void do_MC_MATCH_LOGIN_NHNUSA(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);
	uint32_t p3 = extract_uint32(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p4 = extract_blob(parameters, &paramPtr, length);

	self->MC_MATCH_LOGIN_NHNUSA(p0, p1, p2, p3, p4);
}

static void do_MC_MATCH_LOGIN_GAMEON_JP(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);
	uint32_t p3 = extract_uint32(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p4 = extract_blob(parameters, &paramPtr, length);

	self->MC_MATCH_LOGIN_GAMEON_JP(p0, p1, p2, p3, p4);
}

static void do_Match_ObjectCache(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint8_t p0 = extract_uint8(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);

	self->Match_ObjectCache(p0, p1);
}

static void do_Match_BridgePeer(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
	uint32_t p2 = extract_uint32(parameters, &paramPtr, length);

	self->Match_BridgePeer(p0, p1, p2);
}

static void do_Match_BridgePeerACK(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);

	self->Match_BridgePeerACK(p0, p1);
}

static void do_MatchServer_RequestRecommandedChannel(Registry* self, const uint8_t*, uint16_t)
{
	self->MatchServer_RequestRecommandedChannel();
}

static void do_MatchServer_ResponseRecommandedChannel(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->MatchServer_ResponseRecommandedChannel(p0);
}

static void do_Channel_Join(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);

	self->Channel_Join(p0, p1);
}

static void do_Channel_ResponseJoin(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);
	std::string p2 = extract_string(parameters, &paramPtr, length);
	bool p3 = extract_bool(parameters, &paramPtr, length);

	self->Channel_ResponseJoin(p0, p1, p2, p3);
}

static void do_Channel_RequestJoinFromName(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);
	std::string p3 = extract_string(parameters, &paramPtr, length);

	self->Channel_RequestJoinFromName(p0, p1, p2, p3);
}

static void do_Channel_Leave(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);

	self->Channel_Leave(p0, p1);
}

static void do_Channel_ListStart(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);

	self->Channel_ListStart(p0, p1, p2);
}

static void do_Channel_ListStop(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Channel_ListStop(p0);
}

static void do_Channel_List(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	tuple<Buffer, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);

	self->Channel_List(p0);
}

static void do_Channel_Request_Chat(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
	std::string p2 = extract_string(parameters, &paramPtr, length);

	self->Channel_Request_Chat(p0, p1, p2);
}

static void do_Channel_Chat(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);
	std::string p2 = extract_string(parameters, &paramPtr, length);
	int32_t p3 = extract_int32(parameters, &paramPtr, length);

	self->Channel_Chat(p0, p1, p2, p3);
}

static void do_Channel_Request_Rule(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Channel_Request_Rule(p0);
}

static void do_Channel_Response_Rule(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);

	self->Channel_Response_Rule(p0, p1);
}

static void do_Channel_RequestAllPlayerList(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
	uint32_t p2 = extract_uint32(parameters, &paramPtr, length);
	uint32_t p3 = extract_uint32(parameters, &paramPtr, length);

	self->Channel_RequestAllPlayerList(p0, p1, p2, p3);
}

static void do_Channel_ResponseAllPlayerList(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);

	self->Channel_ResponseAllPlayerList(p0, p1);
}

static void do_Stage_Create(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);
	bool p2 = extract_bool(parameters, &paramPtr, length);
	std::string p3 = extract_string(parameters, &paramPtr, length);

	self->Stage_Create(p0, p1, p2, p3);
}

static void do_Stage_RequestJoin(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);

	self->Stage_RequestJoin(p0, p1);
}

static void do_Stage_RequestPrivateJoin(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
	std::string p2 = extract_string(parameters, &paramPtr, length);

	self->Stage_RequestPrivateJoin(p0, p1, p2);
}

static void do_Stage_Join(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
	uint32_t p2 = extract_uint32(parameters, &paramPtr, length);
	std::string p3 = extract_string(parameters, &paramPtr, length);

	self->Stage_Join(p0, p1, p2, p3);
}

static void do_Stage_Leave(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Stage_Leave(p0);
}

static void do_Stage_Request_PlayerList(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Stage_Request_PlayerList(p0);
}

static void do_Stage_Follow(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);

	self->Stage_Follow(p0);
}

static void do_Stage_Response_Follow(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);

	self->Stage_Response_Follow(p0);
}

static void do_Stage_ResponseJoin(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);

	self->Stage_ResponseJoin(p0);
}

static void do_Stage_RequirePassword(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);

	self->Stage_RequirePassword(p0, p1);
}

static void do_RequestGameInfo(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);

	self->RequestGameInfo(p0, p1);
}

static void do_ResponseGameInfo(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p3 = extract_blob(parameters, &paramPtr, length);

	self->ResponseGameInfo(p0, p1, p2, p3);
}

static void do_Stage_ResponseCreate(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);

	self->Stage_ResponseCreate(p0);
}

static void do_Stage_Request_EnterBattle(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);

	self->Stage_Request_EnterBattle(p0, p1);
}

static void do_Stage_EnterBattle(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint8_t p0 = extract_uint8(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);

	self->Stage_EnterBattle(p0, p1);
}

static void do_Stage_LeaveBattle(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Stage_LeaveBattle(p0);
}

static void do_Stage_Start(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);

	self->Stage_Start(p0, p1, p2);
}

static void do_Stage_Map(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);

	self->Stage_Map(p0, p1);
}

static void do_Stage_Chat(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
	std::string p2 = extract_string(parameters, &paramPtr, length);

	self->Stage_Chat(p0, p1, p2);
}

static void do_Stage_RequestQuickJoin(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);

	self->Stage_RequestQuickJoin(p0, p1);
}

static void do_Stage_ResponseQuickJoin(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);

	self->Stage_ResponseQuickJoin(p0, p1);
}

static void do_Stage_StageGo(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint32_t p0 = extract_uint32(parameters, &paramPtr, length);

	self->Stage_StageGo(p0);
}

static void do_Stage_State(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);
	int32_t p3 = extract_int32(parameters, &paramPtr, length);

	self->Stage_State(p0, p1, p2, p3);
}

static void do_Stage_Team(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
	uint32_t p2 = extract_uint32(parameters, &paramPtr, length);

	self->Stage_Team(p0, p1, p2);
}

static void do_Stage_Master(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);

	self->Stage_Master(p0, p1);
}

static void do_Stage_ListStart(Registry* self, const uint8_t*, uint16_t)
{
	self->Stage_ListStart();
}

static void do_Stage_ListStop(Registry* self, const uint8_t*, uint16_t)
{
	self->Stage_ListStop();
}

static void do_Stage_List(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int8_t p0 = extract_int8(parameters, &paramPtr, length);
	int8_t p1 = extract_int8(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);

	self->Stage_List(p0, p1, p2);
}

static void do_Stage_RequestStageList(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);

	self->Stage_RequestStageList(p0, p1, p2);
}

static void do_Channel_RequestPlayerList(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);

	self->Channel_RequestPlayerList(p0, p1, p2);
}

static void do_Channel_ResponsePlayerList(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint8_t p0 = extract_uint8(parameters, &paramPtr, length);
	uint8_t p1 = extract_uint8(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);

	self->Channel_ResponsePlayerList(p0, p1, p2);
}

static void do_Stage_RequestStageSetting(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Stage_RequestStageSetting(p0);
}

static void do_Stage_ResponseStageSetting(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);
	int32_t p3 = extract_int32(parameters, &paramPtr, length);
	uint64_t p4 = extract_MUID(parameters, &paramPtr, length);

	self->Stage_ResponseStageSetting(p0, p1, p2, p3, p4);
}

static void do_Stage_StageSetting(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);

	self->Stage_StageSetting(p0, p1, p2);
}

static void do_Stage_Launch(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);

	self->Stage_Launch(p0, p1);
}

static void do_Stage_Finish(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Stage_Finish(p0);
}

static void do_Stage_RequestPeerList(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);

	self->Stage_RequestPeerList(p0, p1);
}

static void do_Stage_ResponsePeerList(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);

	self->Stage_ResponsePeerList(p0, p1);
}

static void do_Loading_Complete(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);

	self->Loading_Complete(p0, p1);
}

static void do_Match_RequestPeerRelay(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);

	self->Match_RequestPeerRelay(p0, p1);
}

static void do_Match_ResponsePeerRelay(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Match_ResponsePeerRelay(p0);
}

static void do_Stage_RoundState(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);
	int32_t p3 = extract_int32(parameters, &paramPtr, length);

	self->Stage_RoundState(p0, p1, p2, p3);
}

static void do_Game_Kill(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Game_Kill(p0);
}

static void do_Game_Requst_Spawn(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	array<float, 3> p1 = extract_position(parameters, &paramPtr, length);
	array<float, 3> p2 = extract_direction(parameters, &paramPtr, length);

	self->Game_Requst_Spawn(p0, p1, p2);
}

static void do_Game_LevelUp(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);

	self->Game_LevelUp(p0, p1);
}

static void do_Game_LevelDown(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);

	self->Game_LevelDown(p0, p1);
}

static void do_Game_Dead(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
	uint64_t p2 = extract_MUID(parameters, &paramPtr, length);
	uint32_t p3 = extract_uint32(parameters, &paramPtr, length);

	self->Game_Dead(p0, p1, p2, p3);
}

static void do_Game_TeamBonus(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint32_t p1 = extract_uint32(parameters, &paramPtr, length);

	self->Game_TeamBonus(p0, p1);
}

static void do_Game_RequestTimeSync(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint32_t p0 = extract_uint32(parameters, &paramPtr, length);

	self->Game_RequestTimeSync(p0);
}

static void do_Game_ResponseTimeSync(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
	uint32_t p1 = extract_uint32(parameters, &paramPtr, length);

	self->Game_ResponseTimeSync(p0, p1);
}

static void do_Game_ReportTimeSync(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
	uint32_t p1 = extract_uint32(parameters, &paramPtr, length);

	self->Game_ReportTimeSync(p0, p1);
}

static void do_Stage_RequestForcedEntry(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);

	self->Stage_RequestForcedEntry(p0, p1);
}

static void do_Stage_ResponseForcedEntry(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);

	self->Stage_ResponseForcedEntry(p0);
}

static void do_Stage_RoundFinishInfo(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p3 = extract_blob(parameters, &paramPtr, length);

	self->Stage_RoundFinishInfo(p0, p1, p2, p3);
}

static void do_Match_Notify(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint32_t p0 = extract_uint32(parameters, &paramPtr, length);

	self->Match_Notify(p0);
}

static void do_Match_Whisper(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);
	std::string p2 = extract_string(parameters, &paramPtr, length);

	self->Match_Whisper(p0, p1, p2);
}

static void do_Match_Where(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);

	self->Match_Where(p0);
}

static void do_Match_UserOption(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint32_t p0 = extract_uint32(parameters, &paramPtr, length);

	self->Match_UserOption(p0);
}

static void do_ChatRoom_Create(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);

	self->ChatRoom_Create(p0, p1);
}

static void do_ChatRoom_Join(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);

	self->ChatRoom_Join(p0, p1);
}

static void do_ChatRoom_Leave(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);

	self->ChatRoom_Leave(p0, p1);
}

static void do_ChatRoom_SelectWrite(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);

	self->ChatRoom_SelectWrite(p0);
}

static void do_ChatRoom_Invite(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);
	std::string p2 = extract_string(parameters, &paramPtr, length);

	self->ChatRoom_Invite(p0, p1, p2);
}

static void do_ChatRoom_Chat(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);
	std::string p2 = extract_string(parameters, &paramPtr, length);

	self->ChatRoom_Chat(p0, p1, p2);
}

static void do_Match_RequestAccountCharList(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	tuple<Buffer, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);

	self->Match_RequestAccountCharList(p0);
}

static void do_Match_ResponseAccountCharList(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	tuple<Buffer, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);

	self->Match_ResponseAccountCharList(p0);
}

static void do_Match_RequestAccountCharInfo(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int8_t p0 = extract_int8(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);

	self->Match_RequestAccountCharInfo(p0, p1);
}

static void do_Match_ResponseAccountCharInfo(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int8_t p0 = extract_int8(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);

	self->Match_ResponseAccountCharInfo(p0, p1);
}

static void do_Match_RequestSelectChar(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);

	self->Match_RequestSelectChar(p0, p1, p2);
}

static void do_Match_ResponseSelectChar(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);

	self->Match_ResponseSelectChar(p0, p1, p2);
}

static void do_Match_RequestCharInfo(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint32_t p1 = extract_uint32(parameters, &paramPtr, length);

	self->Match_RequestCharInfo(p0, p1);
}

static void do_Match_ResponseCharInfo(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);

	self->Match_ResponseCharInfo(p0, p1);
}

static void do_Match_RequestDeleteChar(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);
	std::string p3 = extract_string(parameters, &paramPtr, length);

	self->Match_RequestDeleteChar(p0, p1, p2, p3);
}

static void do_Match_ResponseDeleteChar(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);

	self->Match_ResponseDeleteChar(p0);
}

static void do_Match_RequestCreateChar(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);
	std::string p3 = extract_string(parameters, &paramPtr, length);
	uint32_t p4 = extract_uint32(parameters, &paramPtr, length);
	uint32_t p5 = extract_uint32(parameters, &paramPtr, length);
	uint32_t p6 = extract_uint32(parameters, &paramPtr, length);
	uint32_t p7 = extract_uint32(parameters, &paramPtr, length);

	self->Match_RequestCreateChar(p0, p1, p2, p3, p4, p5, p6, p7);
}

static void do_Match_ResponseCreateChar(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);

	self->Match_ResponseCreateChar(p0, p1);
}

static void do_Match_RequestBuyItem(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint32_t p1 = extract_uint32(parameters, &paramPtr, length);

	self->Match_RequestBuyItem(p0, p1);
}

static void do_Match_ResponseBuyItem(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);

	self->Match_ResponseBuyItem(p0);
}

static void do_Match_RequestSellItem(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);

	self->Match_RequestSellItem(p0, p1);
}

static void do_Match_ResponseSellItem(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);

	self->Match_ResponseSellItem(p0);
}

static void do_Match_RequestShopItemList(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);

	self->Match_RequestShopItemList(p0, p1, p2);
}

static void do_Match_ResponseShopItemList(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	tuple<Buffer, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);

	self->Match_ResponseShopItemList(p0, p1);
}

static void do_Match_RequestCharacterItemList(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Match_RequestCharacterItemList(p0);
}

static void do_Match_RequestCharacterItemListForce(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Match_RequestCharacterItemListForce(p0);
}

static void do_Match_ResponseCharacterItemList(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p3 = extract_blob(parameters, &paramPtr, length);

	self->Match_ResponseCharacterItemList(p0, p1, p2, p3);
}

static void do_MatchRequestEquipItem(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
	uint32_t p2 = extract_uint32(parameters, &paramPtr, length);
	int32_t p3 = extract_int32(parameters, &paramPtr, length);

	self->MatchRequestEquipItem(p0, p1, p2, p3);
}

static void do_MatchResponseEquipItem(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);

	self->MatchResponseEquipItem(p0);
}

static void do_MatchRequestTakeoffItem(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);

	self->MatchRequestTakeoffItem(p0, p1, p2);
}

static void do_MatchResponseTakeoffItem(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);

	self->MatchResponseTakeoffItem(p0);
}

static void do_Match_RequestAccountItemList(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Match_RequestAccountItemList(p0);
}

static void do_Match_ResponseAccountItemList(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	tuple<Buffer, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);

	self->Match_ResponseAccountItemList(p0);
}

static void do_Match_RequestBringAccountItem(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);

	self->Match_RequestBringAccountItem(p0, p1);
}

static void do_Match_ResponseBringAccountItem(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);

	self->Match_ResponseBringAccountItem(p0);
}

static void do_Match_RequestBringBackAccountItem(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);

	self->Match_RequestBringBackAccountItem(p0, p1);
}

static void do_Match_ResponseBringBackAccountItem(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);

	self->Match_ResponseBringBackAccountItem(p0);
}

static void do_Match_ExpiredRentItem(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	tuple<Buffer, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);

	self->Match_ExpiredRentItem(p0);
}

static void do_Match_ItemGamble(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Match_ItemGamble(p0);
}

static void do_Match_GambleResultItem(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
	uint32_t p1 = extract_uint32(parameters, &paramPtr, length);

	self->Match_GambleResultItem(p0, p1);
}

static void do_Match_Request_Suicide(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Match_Request_Suicide(p0);
}

static void do_Match_Response_Suicide(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);

	self->Match_Response_Suicide(p0, p1);
}

static void do_Match_Response_SuicideReserve(Registry* self, const uint8_t*, uint16_t)
{
	self->Match_Response_SuicideReserve();
}

static void do_Match_Request_Obtain_WorldItem(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);

	self->Match_Request_Obtain_WorldItem(p0, p1);
}

static void do_Match_WorldItem_Obtain(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);

	self->Match_WorldItem_Obtain(p0, p1);
}

static void do_Match_WorldItem_Spawn(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	tuple<Buffer, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);

	self->Match_WorldItem_Spawn(p0);
}

static void do_Match_Request_Spawn_WorldItem(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);
	array<float, 3> p2 = extract_position(parameters, &paramPtr, length);
	float p3 = extract_float(parameters, &paramPtr, length);

	self->Match_Request_Spawn_WorldItem(p0, p1, p2, p3);
}

static void do_Match_Request_Spawn_WorldItem_UID(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);

	self->Match_Request_Spawn_WorldItem_UID(p0);
}

static void do_Match_Reset_TeamMembers(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	tuple<Buffer, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);

	self->Match_Reset_TeamMembers(p0);
}

static void do_Match_Assign_Commander(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);

	self->Match_Assign_Commander(p0, p1);
}

static void do_Match_Set_Observer(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Match_Set_Observer(p0);
}

static void do_Match_Ladder_Request_Challenge(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);
	uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);

	self->Match_Ladder_Request_Challenge(p0, p1, p2);
}

static void do_Match_Ladder_Response_Challenge(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);

	self->Match_Ladder_Response_Challenge(p0);
}

static void do_Match_Ladder_SearchRival(Registry* self, const uint8_t*, uint16_t)
{
	self->Match_Ladder_SearchRival();
}

static void do_Match_Ladder_Request_CancelChallenge(Registry* self, const uint8_t*, uint16_t)
{
	self->Match_Ladder_Request_CancelChallenge();
}

static void do_Match_Ladder_CancelChallenge(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);

	self->Match_Ladder_CancelChallenge(p0);
}

static void do_Ladder_Prepare(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);

	self->Ladder_Prepare(p0, p1);
}

static void do_Ladder_Launch(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);

	self->Ladder_Launch(p0, p1);
}

static void do_Match_RequestProposal(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);
	int32_t p3 = extract_int32(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p4 = extract_blob(parameters, &paramPtr, length);

	self->Match_RequestProposal(p0, p1, p2, p3, p4);
}

static void do_Match_ResponseProposal(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);

	self->Match_ResponseProposal(p0, p1, p2);
}

static void do_Match_AskAgreement(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);
	int32_t p3 = extract_int32(parameters, &paramPtr, length);

	self->Match_AskAgreement(p0, p1, p2, p3);
}

static void do_Match_ReplyAgreement(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
	std::string p2 = extract_string(parameters, &paramPtr, length);
	int32_t p3 = extract_int32(parameters, &paramPtr, length);
	int32_t p4 = extract_int32(parameters, &paramPtr, length);
	bool p5 = extract_bool(parameters, &paramPtr, length);

	self->Match_ReplyAgreement(p0, p1, p2, p3, p4, p5);
}

static void do_Match_Friend_Add(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);

	self->Match_Friend_Add(p0);
}

static void do_Match_Friend_Remove(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);

	self->Match_Friend_Remove(p0);
}

static void do_Match_Friend_List(Registry* self, const uint8_t*, uint16_t)
{
	self->Match_Friend_List();
}

static void do_Match_Response_FriendList(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	tuple<Buffer, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);

	self->Match_Response_FriendList(p0);
}

static void do_Match_Friend_Msg(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);

	self->Match_Friend_Msg(p0);
}

static void do_Match_Clan_RequestCreateClan(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);
	std::string p2 = extract_string(parameters, &paramPtr, length);
	std::string p3 = extract_string(parameters, &paramPtr, length);
	std::string p4 = extract_string(parameters, &paramPtr, length);
	std::string p5 = extract_string(parameters, &paramPtr, length);
	std::string p6 = extract_string(parameters, &paramPtr, length);

	self->Match_Clan_RequestCreateClan(p0, p1, p2, p3, p4, p5, p6);
}

static void do_Match_Clan_ResponseCreateClan(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);

	self->Match_Clan_ResponseCreateClan(p0, p1);
}

static void do_Match_Clan_AskSponsorAgreement(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);
	uint64_t p2 = extract_MUID(parameters, &paramPtr, length);
	std::string p3 = extract_string(parameters, &paramPtr, length);

	self->Match_Clan_AskSponsorAgreement(p0, p1, p2, p3);
}

static void do_Match_Clan_AnswerSponsorAgreement(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
	std::string p2 = extract_string(parameters, &paramPtr, length);
	bool p3 = extract_bool(parameters, &paramPtr, length);

	self->Match_Clan_AnswerSponsorAgreement(p0, p1, p2, p3);
}

static void do_Match_Clan_RequestAgreedCreateClan(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);
	std::string p2 = extract_string(parameters, &paramPtr, length);
	std::string p3 = extract_string(parameters, &paramPtr, length);
	std::string p4 = extract_string(parameters, &paramPtr, length);
	std::string p5 = extract_string(parameters, &paramPtr, length);

	self->Match_Clan_RequestAgreedCreateClan(p0, p1, p2, p3, p4, p5);
}

static void do_Match_Clan_AgreedResponseCreateClan(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);

	self->Match_Clan_AgreedResponseCreateClan(p0);
}

static void do_Match_Clan_RequestCloseClan(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);

	self->Match_Clan_RequestCloseClan(p0, p1);
}

static void do_Match_Clan_ResponseCloseClan(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);

	self->Match_Clan_ResponseCloseClan(p0);
}

static void do_Match_Clan_RequestJoinClan(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);
	std::string p2 = extract_string(parameters, &paramPtr, length);

	self->Match_Clan_RequestJoinClan(p0, p1, p2);
}

static void do_Match_Clan_ResponseJoinClan(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);

	self->Match_Clan_ResponseJoinClan(p0);
}

static void do_Match_Clan_AskJoinAgreement(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
	std::string p2 = extract_string(parameters, &paramPtr, length);

	self->Match_Clan_AskJoinAgreement(p0, p1, p2);
}

static void do_Match_Clan_AnswerJoinAgreement(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);
	bool p2 = extract_bool(parameters, &paramPtr, length);

	self->Match_Clan_AnswerJoinAgreement(p0, p1, p2);
}

static void do_Match_Clan_RequestAgreedJoinClan(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);
	std::string p2 = extract_string(parameters, &paramPtr, length);

	self->Match_Clan_RequestAgreedJoinClan(p0, p1, p2);
}

static void do_Match_Clan_ResponseAgreedJoinClan(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);

	self->Match_Clan_ResponseAgreedJoinClan(p0);
}

static void do_Match_Clan_RequestLeaveClan(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Match_Clan_RequestLeaveClan(p0);
}

static void do_Match_Clan_ResponseLeaveClan(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);

	self->Match_Clan_ResponseLeaveClan(p0);
}

static void do_Match_Clan_UpdateCharClanInfo(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	tuple<Buffer, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);

	self->Match_Clan_UpdateCharClanInfo(p0);
}

static void do_Match_Clan_Master_RequestChangeGrade(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);
	int32_t p3 = extract_int32(parameters, &paramPtr, length);

	self->Match_Clan_Master_RequestChangeGrade(p0, p1, p2, p3);
}

static void do_Match_Clan_Master_ResponseChangeGrade(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);

	self->Match_Clan_Master_ResponseChangeGrade(p0);
}

static void do_Match_Clan_Admin_RequestExpelMember(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);

	self->Match_Clan_Admin_RequestExpelMember(p0, p1);
}

static void do_Match_Clan_Admin_ResponseLeaveMember(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);

	self->Match_Clan_Admin_ResponseLeaveMember(p0);
}

static void do_Match_Clan_Request_Msg(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);

	self->Match_Clan_Request_Msg(p0, p1);
}

static void do_Match_Clan_Msg(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);

	self->Match_Clan_Msg(p0, p1);
}

static void do_Match_Clan_Request_ClanMemberList(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Match_Clan_Request_ClanMemberList(p0);
}

static void do_Match_Clan_Response_ClanMemberList(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	tuple<Buffer, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);

	self->Match_Clan_Response_ClanMemberList(p0);
}

static void do_Match_Clan_Request_Clan_Info(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);

	self->Match_Clan_Request_Clan_Info(p0, p1);
}

static void do_Match_Clan_Response_Clan_Info(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	tuple<Buffer, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);

	self->Match_Clan_Response_Clan_Info(p0);
}

static void do_Match_Clan_Standby_ClanList(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);

	self->Match_Clan_Standby_ClanList(p0, p1, p2);
}

static void do_Match_Clan_Member_Connected(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);

	self->Match_Clan_Member_Connected(p0);
}

static void do_Match_Clan_Request_EmblemURL(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	tuple<Buffer, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);

	self->Match_Clan_Request_EmblemURL(p0);
}

static void do_Match_Clan_Response_EmblemURL(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);
	std::string p2 = extract_string(parameters, &paramPtr, length);

	self->Match_Clan_Response_EmblemURL(p0, p1, p2);
}

static void do_Match_Clan_Local_EmblemReady(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);

	self->Match_Clan_Local_EmblemReady(p0, p1);
}

static void do_MC_MATCH_CLAN_ACCOUNCE_DELETE(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);

	self->MC_MATCH_CLAN_ACCOUNCE_DELETE(p0);
}

static void do_Match_Callvote(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);

	self->Match_Callvote(p0, p1);
}

static void do_Match_NotifyCallvote(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);

	self->Match_NotifyCallvote(p0, p1);
}

static void do_Match_NotifyVoteResult(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);

	self->Match_NotifyVoteResult(p0, p1);
}

static void do_Match_VoteYes(Registry* self, const uint8_t*, uint16_t)
{
	self->Match_VoteYes();
}

static void do_Match_VoteNo(Registry* self, const uint8_t*, uint16_t)
{
	self->Match_VoteNo();
}

static void do_Votestop(Registry* self, const uint8_t*, uint16_t)
{
	self->Votestop();
}

static void do_Match_Broadcast_ClanRenewVictories(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);

	self->Match_Broadcast_ClanRenewVictories(p0, p1, p2);
}

static void do_Match_Broadcast_ClanInterruptVictories(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);

	self->Match_Broadcast_ClanInterruptVictories(p0, p1, p2);
}

static void do_Match_Broadcast_DuelRenewVictories(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);
	int32_t p3 = extract_int32(parameters, &paramPtr, length);

	self->Match_Broadcast_DuelRenewVictories(p0, p1, p2, p3);
}

static void do_Match_Broadcast_DuelInterruptVictories(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);

	self->Match_Broadcast_DuelInterruptVictories(p0, p1, p2);
}

static void do_Match_Assign_Berserker(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Match_Assign_Berserker(p0);
}

static void do_Match_Duel_QueueInfo(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	tuple<Buffer, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);

	self->Match_Duel_QueueInfo(p0);
}

static void do_Match_Quest_Ping(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint32_t p0 = extract_uint32(parameters, &paramPtr, length);

	self->Match_Quest_Ping(p0);
}

static void do_Match_Quest_Pong(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint32_t p0 = extract_uint32(parameters, &paramPtr, length);

	self->Match_Quest_Pong(p0);
}

static void do_MC_QUEST_NPCLIST(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	tuple<Buffer, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);

	self->MC_QUEST_NPCLIST(p0, p1);
}

static void do_Event_ChangeMaster(Registry* self, const uint8_t*, uint16_t)
{
	self->Event_ChangeMaster();
}

static void do_Event_ChangePassword(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);

	self->Event_ChangePassword(p0);
}

static void do_Event_RequestJJang(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);

	self->Event_RequestJJang(p0);
}

static void do_Event_RemoveJJang(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);

	self->Event_RemoveJJang(p0);
}

static void do_Event_UpdateJJang(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	bool p1 = extract_bool(parameters, &paramPtr, length);

	self->Event_UpdateJJang(p0, p1);
}

static void do_Quest_NPCSpawn(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
	uint8_t p2 = extract_uint8(parameters, &paramPtr, length);
	uint8_t p3 = extract_uint8(parameters, &paramPtr, length);

	self->Quest_NPCSpawn(p0, p1, p2, p3);
}

static void do_Quest_Entrust_NPC_Control(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);

	self->Quest_Entrust_NPC_Control(p0, p1);
}

static void do_Quest_Checksum_NPCInfo(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint32_t p1 = extract_uint32(parameters, &paramPtr, length);

	self->Quest_Checksum_NPCInfo(p0, p1);
}

static void do_Quest_NPCDead(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);

	self->Quest_NPCDead(p0, p1);
}

static void do_Quest_RefreshPlayerStatus(Registry* self, const uint8_t*, uint16_t)
{
	self->Quest_RefreshPlayerStatus();
}

static void do_Quest_NPC_AllClear(Registry* self, const uint8_t*, uint16_t)
{
	self->Quest_NPC_AllClear();
}

static void do_Quest_Round_Start(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint8_t p0 = extract_uint8(parameters, &paramPtr, length);

	self->Quest_Round_Start(p0);
}

static void do_Quest_RequestDead(Registry* self, const uint8_t*, uint16_t)
{
	self->Quest_RequestDead();
}

static void do_Quest_PlayerDead(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Quest_PlayerDead(p0);
}

static void do_Quest_ObtainQuestItem(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint32_t p0 = extract_uint32(parameters, &paramPtr, length);

	self->Quest_ObtainQuestItem(p0);
}

static void do_Quest_ObtainZItem(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint32_t p0 = extract_uint32(parameters, &paramPtr, length);

	self->Quest_ObtainZItem(p0);
}

static void do_Quest_State_Mapset(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int8_t p1 = extract_int8(parameters, &paramPtr, length);

	self->Quest_State_Mapset(p0, p1);
}

static void do_Quest_Stage_GameInfo(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int8_t p0 = extract_int8(parameters, &paramPtr, length);
	int8_t p1 = extract_int8(parameters, &paramPtr, length);
	uint32_t p2 = extract_uint32(parameters, &paramPtr, length);

	self->Quest_Stage_GameInfo(p0, p1, p2);
}

static void do_Quest_SectorBonus(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
	uint32_t p2 = extract_uint32(parameters, &paramPtr, length);

	self->Quest_SectorBonus(p0, p1, p2);
}

static void do_Quest_GameInfo(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	tuple<Buffer, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);

	self->Quest_GameInfo(p0);
}

static void do_Quest_Combat_State(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int8_t p0 = extract_int8(parameters, &paramPtr, length);

	self->Quest_Combat_State(p0);
}

static void do_Quest_Sector_Start(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int8_t p0 = extract_int8(parameters, &paramPtr, length);
	uint8_t p1 = extract_uint8(parameters, &paramPtr, length);

	self->Quest_Sector_Start(p0, p1);
}

static void do_Quest_Complete(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	tuple<Buffer, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);

	self->Quest_Complete(p0);
}

static void do_Quest_Failed(Registry* self, const uint8_t*, uint16_t)
{
	self->Quest_Failed();
}

static void do_Quest_Request_Moveto_Portal(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int8_t p0 = extract_int8(parameters, &paramPtr, length);

	self->Quest_Request_Moveto_Portal(p0);
}

static void do_Quest_Moveto_Portal(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int8_t p0 = extract_int8(parameters, &paramPtr, length);
	uint8_t p1 = extract_uint8(parameters, &paramPtr, length);
	uint64_t p2 = extract_MUID(parameters, &paramPtr, length);

	self->Quest_Moveto_Portal(p0, p1, p2);
}

static void do_Quest_Readyto_NewSector(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Quest_Readyto_NewSector(p0);
}

static void do_Quest_Peer_NPC_BasicInfo(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	tuple<Buffer, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);

	self->Quest_Peer_NPC_BasicInfo(p0);
}

static void do_Quest_Peer_NPC_HPInfo(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);

	self->Quest_Peer_NPC_HPInfo(p0, p1);
}

static void do_Quest_Peer_NPC_Attack_Melee(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Quest_Peer_NPC_Attack_Melee(p0);
}

static void do_Quest_Peer_NPC_Attack_Range(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);

	self->Quest_Peer_NPC_Attack_Range(p0, p1);
}

static void do_Quest_Peer_NPC_Skill_Start(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);
	uint64_t p2 = extract_MUID(parameters, &paramPtr, length);
	array<float, 3> p3 = extract_position(parameters, &paramPtr, length);

	self->Quest_Peer_NPC_Skill_Start(p0, p1, p2, p3);
}

static void do_Quest_Peer_NPC_Skill_Execute(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);
	uint64_t p2 = extract_MUID(parameters, &paramPtr, length);
	array<float, 3> p3 = extract_position(parameters, &paramPtr, length);

	self->Quest_Peer_NPC_Skill_Execute(p0, p1, p2, p3);
}

static void do_Quest_Peer_NPC_Dead(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);

	self->Quest_Peer_NPC_Dead(p0, p1);
}

static void do_Quest_Test_RequestNPCSpawn(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);

	self->Quest_Test_RequestNPCSpawn(p0, p1);
}

static void do_Quest_Test_ClearNPC(Registry* self, const uint8_t*, uint16_t)
{
	self->Quest_Test_ClearNPC();
}

static void do_Quest_Test_SectorClear(Registry* self, const uint8_t*, uint16_t)
{
	self->Quest_Test_SectorClear();
}

static void do_Quest_Test_Finish(Registry* self, const uint8_t*, uint16_t)
{
	self->Quest_Test_Finish();
}

static void do_Admin_Announce(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);
	uint32_t p2 = extract_uint32(parameters, &paramPtr, length);

	self->Admin_Announce(p0, p1, p2);
}

static void do_Admin_RequestBanPlayer(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	std::string p1 = extract_string(parameters, &paramPtr, length);

	self->Admin_RequestBanPlayer(p0, p1);
}

static void do_Admin_ResponseBanPlayer(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);

	self->Admin_ResponseBanPlayer(p0);
}

static void do_Admin_Hide(Registry* self, const uint8_t*, uint16_t)
{
	self->Admin_Hide();
}

static void do_MC_ADMIN_RESET_ALL_HACKING_BLOCK(Registry* self, const uint8_t*, uint16_t)
{
	self->MC_ADMIN_RESET_ALL_HACKING_BLOCK();
}

static void do_MC_ADMIN_RELOAD_GAMBLEITEM(Registry* self, const uint8_t*, uint16_t)
{
	self->MC_ADMIN_RELOAD_GAMBLEITEM();
}

static void do_MC_ADMIN_ASSASIN(Registry* self, const uint8_t*, uint16_t)
{
	self->MC_ADMIN_ASSASIN();
}

static void do_Agent_Connect(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);

	self->Agent_Connect(p0, p1);
}

static void do_Agent_Disconnect(Registry* self, const uint8_t*, uint16_t)
{
	self->Agent_Disconnect();
}

static void do_Match_RegisterAgent(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	std::string p0 = extract_string(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);

	self->Match_RegisterAgent(p0, p1, p2);
}

static void do_Match_UnRegisterAgent(Registry* self, const uint8_t*, uint16_t)
{
	self->Match_UnRegisterAgent();
}

static void do_Match_Agent_RequestLiveCheck(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
	uint32_t p1 = extract_uint32(parameters, &paramPtr, length);
	uint32_t p2 = extract_uint32(parameters, &paramPtr, length);

	self->Match_Agent_RequestLiveCheck(p0, p1, p2);
}

static void do_Match_Agent_ResponseLiveCheck(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint32_t p0 = extract_uint32(parameters, &paramPtr, length);

	self->Match_Agent_ResponseLiveCheck(p0);
}

static void do_Agent_StageReserve(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Agent_StageReserve(p0);
}

static void do_Agent_StageRelease(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Agent_StageRelease(p0);
}

static void do_Agent_StageReady(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Agent_StageReady(p0);
}

static void do_Agent_RelayPeer(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
	uint64_t p2 = extract_MUID(parameters, &paramPtr, length);

	self->Agent_RelayPeer(p0, p1, p2);
}

static void do_Questitem(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Questitem(p0);
}

static void do_Quest_item_response(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	tuple<Buffer, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);

	self->Quest_item_response(p0);
}

static void do_Quest_item_buy(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);

	self->Quest_item_buy(p0, p1);
}

static void do_Quest_item_responsebuy(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);

	self->Quest_item_responsebuy(p0, p1);
}

static void do_Quest_item_sell(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);

	self->Quest_item_sell(p0, p1, p2);
}

static void do_Quest_item_responsesell(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);

	self->Quest_item_responsesell(p0, p1);
}

static void do_Quest_Reward(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p2 = extract_blob(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p3 = extract_blob(parameters, &paramPtr, length);

	self->Quest_Reward(p0, p1, p2, p3);
}

static void do_Quest_Request_Sacrifice(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);

	self->Quest_Request_Sacrifice(p0, p1, p2);
}

static void do_Quest_Response_Sacrifice(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);
	int32_t p3 = extract_int32(parameters, &paramPtr, length);

	self->Quest_Response_Sacrifice(p0, p1, p2, p3);
}

static void do_Quest_Callback_Sacrifice(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);

	self->Quest_Callback_Sacrifice(p0, p1, p2);
}

static void do_Quest_Callback_Result(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);
	int32_t p3 = extract_int32(parameters, &paramPtr, length);

	self->Quest_Callback_Result(p0, p1, p2, p3);
}

static void do_Quest_Request_SlotInfo(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Quest_Request_SlotInfo(p0);
}

static void do_Quest_Resonse_SlotInfo(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);
	uint64_t p2 = extract_MUID(parameters, &paramPtr, length);
	int32_t p3 = extract_int32(parameters, &paramPtr, length);

	self->Quest_Resonse_SlotInfo(p0, p1, p2, p3);
}

static void do_Quest_RequestLevel(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Quest_RequestLevel(p0);
}

static void do_Quest_ResponseLevel(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);

	self->Quest_ResponseLevel(p0);
}

static void do_Quest_Survival_Result(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);

	self->Quest_Survival_Result(p0, p1);
}

static void do_Quest_Survival_Ranking(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	tuple<Buffer, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);

	self->Quest_Survival_Ranking(p0);
}

static void do_Quest_Survuval_PrivateRanking(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint32_t p0 = extract_uint32(parameters, &paramPtr, length);
	uint32_t p1 = extract_uint32(parameters, &paramPtr, length);

	self->Quest_Survuval_PrivateRanking(p0, p1);
}

static void do_Quest_Start_Fail(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int32_t p0 = extract_int32(parameters, &paramPtr, length);
	uint64_t p1 = extract_MUID(parameters, &paramPtr, length);

	self->Quest_Start_Fail(p0, p1);
}

static void do_monsterinfo(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	int8_t p0 = extract_int8(parameters, &paramPtr, length);

	self->monsterinfo(p0);
}

static void do_Quest_Bible_Request(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);

	self->Quest_Bible_Request(p0);
}

static void do_Quest_Bible_Response(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	tuple<Buffer, size_t, size_t> p1 = extract_blob(parameters, &paramPtr, length);

	self->Quest_Bible_Response(p0, p1);
}

static void do_MC_REQUEST_GIVE_ONESELF_UP(Registry* self, const uint8_t*, uint16_t)
{
	self->MC_REQUEST_GIVE_ONESELF_UP();
}

static void do_MC_RESPONSE_GAMBLEITEMLIST(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	tuple<Buffer, size_t, size_t> p0 = extract_blob(parameters, &paramPtr, length);

	self->MC_RESPONSE_GAMBLEITEMLIST(p0);
}

static void do_MC_MATCH_ROUTE_UPDATE_STAGE_EQUIP_LOOK(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint64_t p0 = extract_MUID(parameters, &paramPtr, length);
	int32_t p1 = extract_int32(parameters, &paramPtr, length);
	int32_t p2 = extract_int32(parameters, &paramPtr, length);

	self->MC_MATCH_ROUTE_UPDATE_STAGE_EQUIP_LOOK(p0, p1, p2);
}

static void do_MC_REQUEST_RESOURCE_CRC32(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint32_t p0 = extract_uint32(parameters, &paramPtr, length);

	self->MC_REQUEST_RESOURCE_CRC32(p0);
}

static void do_MC_RESPONSE_RESOURCE_CRC32(Registry* self, const uint8_t* parameters, uint16_t length)
{
	const uint8_t* paramPtr = parameters;

	uint32_t p0 = extract_uint32(parameters, &paramPtr, length);

	self->MC_RESPONSE_RESOURCE_CRC32(p0);
}

void Registry::dispatch(uint16_t packetID,
                              const uint8_t* parameters,
                              uint16_t length)
{
	try {
		switch(packetID)
		{
			case protocol::Net_Ping::packetID: return do_Net_Ping(this, parameters, length);
			case protocol::Net_Pong::packetID: return do_Net_Pong(this, parameters, length);
			case protocol::Match_Announce::packetID: return do_Match_Announce(this, parameters, length);
			case protocol::Clock_Synchronize::packetID: return do_Clock_Synchronize(this, parameters, length);
			case protocol::Match_Login::packetID: return do_Match_Login(this, parameters, length);
			case protocol::Match_ResponseLogin::packetID: return do_Match_ResponseLogin(this, parameters, length);
			case protocol::Match_Response_Result::packetID: return do_Match_Response_Result(this, parameters, length);
			case protocol::Match_LoginNetmarble::packetID: return do_Match_LoginNetmarble(this, parameters, length);
			case protocol::MC_MATCH_DISCONNMSG::packetID: return do_MC_MATCH_DISCONNMSG(this, parameters, length);
			case protocol::MC_MATCH_LOGIN_NHNUSA::packetID: return do_MC_MATCH_LOGIN_NHNUSA(this, parameters, length);
			case protocol::MC_MATCH_LOGIN_GAMEON_JP::packetID: return do_MC_MATCH_LOGIN_GAMEON_JP(this, parameters, length);
			case protocol::Match_ObjectCache::packetID: return do_Match_ObjectCache(this, parameters, length);
			case protocol::Match_BridgePeer::packetID: return do_Match_BridgePeer(this, parameters, length);
			case protocol::Match_BridgePeerACK::packetID: return do_Match_BridgePeerACK(this, parameters, length);
			case protocol::MatchServer_RequestRecommandedChannel::packetID: return do_MatchServer_RequestRecommandedChannel(this, parameters, length);
			case protocol::MatchServer_ResponseRecommandedChannel::packetID: return do_MatchServer_ResponseRecommandedChannel(this, parameters, length);
			case protocol::Channel_Join::packetID: return do_Channel_Join(this, parameters, length);
			case protocol::Channel_ResponseJoin::packetID: return do_Channel_ResponseJoin(this, parameters, length);
			case protocol::Channel_RequestJoinFromName::packetID: return do_Channel_RequestJoinFromName(this, parameters, length);
			case protocol::Channel_Leave::packetID: return do_Channel_Leave(this, parameters, length);
			case protocol::Channel_ListStart::packetID: return do_Channel_ListStart(this, parameters, length);
			case protocol::Channel_ListStop::packetID: return do_Channel_ListStop(this, parameters, length);
			case protocol::Channel_List::packetID: return do_Channel_List(this, parameters, length);
			case protocol::Channel_Request_Chat::packetID: return do_Channel_Request_Chat(this, parameters, length);
			case protocol::Channel_Chat::packetID: return do_Channel_Chat(this, parameters, length);
			case protocol::Channel_Request_Rule::packetID: return do_Channel_Request_Rule(this, parameters, length);
			case protocol::Channel_Response_Rule::packetID: return do_Channel_Response_Rule(this, parameters, length);
			case protocol::Channel_RequestAllPlayerList::packetID: return do_Channel_RequestAllPlayerList(this, parameters, length);
			case protocol::Channel_ResponseAllPlayerList::packetID: return do_Channel_ResponseAllPlayerList(this, parameters, length);
			case protocol::Stage_Create::packetID: return do_Stage_Create(this, parameters, length);
			case protocol::Stage_RequestJoin::packetID: return do_Stage_RequestJoin(this, parameters, length);
			case protocol::Stage_RequestPrivateJoin::packetID: return do_Stage_RequestPrivateJoin(this, parameters, length);
			case protocol::Stage_Join::packetID: return do_Stage_Join(this, parameters, length);
			case protocol::Stage_Leave::packetID: return do_Stage_Leave(this, parameters, length);
			case protocol::Stage_Request_PlayerList::packetID: return do_Stage_Request_PlayerList(this, parameters, length);
			case protocol::Stage_Follow::packetID: return do_Stage_Follow(this, parameters, length);
			case protocol::Stage_Response_Follow::packetID: return do_Stage_Response_Follow(this, parameters, length);
			case protocol::Stage_ResponseJoin::packetID: return do_Stage_ResponseJoin(this, parameters, length);
			case protocol::Stage_RequirePassword::packetID: return do_Stage_RequirePassword(this, parameters, length);
			case protocol::RequestGameInfo::packetID: return do_RequestGameInfo(this, parameters, length);
			case protocol::ResponseGameInfo::packetID: return do_ResponseGameInfo(this, parameters, length);
			case protocol::Stage_ResponseCreate::packetID: return do_Stage_ResponseCreate(this, parameters, length);
			case protocol::Stage_Request_EnterBattle::packetID: return do_Stage_Request_EnterBattle(this, parameters, length);
			case protocol::Stage_EnterBattle::packetID: return do_Stage_EnterBattle(this, parameters, length);
			case protocol::Stage_LeaveBattle::packetID: return do_Stage_LeaveBattle(this, parameters, length);
			case protocol::Stage_Start::packetID: return do_Stage_Start(this, parameters, length);
			case protocol::Stage_Map::packetID: return do_Stage_Map(this, parameters, length);
			case protocol::Stage_Chat::packetID: return do_Stage_Chat(this, parameters, length);
			case protocol::Stage_RequestQuickJoin::packetID: return do_Stage_RequestQuickJoin(this, parameters, length);
			case protocol::Stage_ResponseQuickJoin::packetID: return do_Stage_ResponseQuickJoin(this, parameters, length);
			case protocol::Stage_StageGo::packetID: return do_Stage_StageGo(this, parameters, length);
			case protocol::Stage_State::packetID: return do_Stage_State(this, parameters, length);
			case protocol::Stage_Team::packetID: return do_Stage_Team(this, parameters, length);
			case protocol::Stage_Master::packetID: return do_Stage_Master(this, parameters, length);
			case protocol::Stage_ListStart::packetID: return do_Stage_ListStart(this, parameters, length);
			case protocol::Stage_ListStop::packetID: return do_Stage_ListStop(this, parameters, length);
			case protocol::Stage_List::packetID: return do_Stage_List(this, parameters, length);
			case protocol::Stage_RequestStageList::packetID: return do_Stage_RequestStageList(this, parameters, length);
			case protocol::Channel_RequestPlayerList::packetID: return do_Channel_RequestPlayerList(this, parameters, length);
			case protocol::Channel_ResponsePlayerList::packetID: return do_Channel_ResponsePlayerList(this, parameters, length);
			case protocol::Stage_RequestStageSetting::packetID: return do_Stage_RequestStageSetting(this, parameters, length);
			case protocol::Stage_ResponseStageSetting::packetID: return do_Stage_ResponseStageSetting(this, parameters, length);
			case protocol::Stage_StageSetting::packetID: return do_Stage_StageSetting(this, parameters, length);
			case protocol::Stage_Launch::packetID: return do_Stage_Launch(this, parameters, length);
			case protocol::Stage_Finish::packetID: return do_Stage_Finish(this, parameters, length);
			case protocol::Stage_RequestPeerList::packetID: return do_Stage_RequestPeerList(this, parameters, length);
			case protocol::Stage_ResponsePeerList::packetID: return do_Stage_ResponsePeerList(this, parameters, length);
			case protocol::Loading_Complete::packetID: return do_Loading_Complete(this, parameters, length);
			case protocol::Match_RequestPeerRelay::packetID: return do_Match_RequestPeerRelay(this, parameters, length);
			case protocol::Match_ResponsePeerRelay::packetID: return do_Match_ResponsePeerRelay(this, parameters, length);
			case protocol::Stage_RoundState::packetID: return do_Stage_RoundState(this, parameters, length);
			case protocol::Game_Kill::packetID: return do_Game_Kill(this, parameters, length);
			case protocol::Game_Requst_Spawn::packetID: return do_Game_Requst_Spawn(this, parameters, length);
			case protocol::Game_LevelUp::packetID: return do_Game_LevelUp(this, parameters, length);
			case protocol::Game_LevelDown::packetID: return do_Game_LevelDown(this, parameters, length);
			case protocol::Game_Dead::packetID: return do_Game_Dead(this, parameters, length);
			case protocol::Game_TeamBonus::packetID: return do_Game_TeamBonus(this, parameters, length);
			case protocol::Game_RequestTimeSync::packetID: return do_Game_RequestTimeSync(this, parameters, length);
			case protocol::Game_ResponseTimeSync::packetID: return do_Game_ResponseTimeSync(this, parameters, length);
			case protocol::Game_ReportTimeSync::packetID: return do_Game_ReportTimeSync(this, parameters, length);
			case protocol::Stage_RequestForcedEntry::packetID: return do_Stage_RequestForcedEntry(this, parameters, length);
			case protocol::Stage_ResponseForcedEntry::packetID: return do_Stage_ResponseForcedEntry(this, parameters, length);
			case protocol::Stage_RoundFinishInfo::packetID: return do_Stage_RoundFinishInfo(this, parameters, length);
			case protocol::Match_Notify::packetID: return do_Match_Notify(this, parameters, length);
			case protocol::Match_Whisper::packetID: return do_Match_Whisper(this, parameters, length);
			case protocol::Match_Where::packetID: return do_Match_Where(this, parameters, length);
			case protocol::Match_UserOption::packetID: return do_Match_UserOption(this, parameters, length);
			case protocol::ChatRoom_Create::packetID: return do_ChatRoom_Create(this, parameters, length);
			case protocol::ChatRoom_Join::packetID: return do_ChatRoom_Join(this, parameters, length);
			case protocol::ChatRoom_Leave::packetID: return do_ChatRoom_Leave(this, parameters, length);
			case protocol::ChatRoom_SelectWrite::packetID: return do_ChatRoom_SelectWrite(this, parameters, length);
			case protocol::ChatRoom_Invite::packetID: return do_ChatRoom_Invite(this, parameters, length);
			case protocol::ChatRoom_Chat::packetID: return do_ChatRoom_Chat(this, parameters, length);
			case protocol::Match_RequestAccountCharList::packetID: return do_Match_RequestAccountCharList(this, parameters, length);
			case protocol::Match_ResponseAccountCharList::packetID: return do_Match_ResponseAccountCharList(this, parameters, length);
			case protocol::Match_RequestAccountCharInfo::packetID: return do_Match_RequestAccountCharInfo(this, parameters, length);
			case protocol::Match_ResponseAccountCharInfo::packetID: return do_Match_ResponseAccountCharInfo(this, parameters, length);
			case protocol::Match_RequestSelectChar::packetID: return do_Match_RequestSelectChar(this, parameters, length);
			case protocol::Match_ResponseSelectChar::packetID: return do_Match_ResponseSelectChar(this, parameters, length);
			case protocol::Match_RequestCharInfo::packetID: return do_Match_RequestCharInfo(this, parameters, length);
			case protocol::Match_ResponseCharInfo::packetID: return do_Match_ResponseCharInfo(this, parameters, length);
			case protocol::Match_RequestDeleteChar::packetID: return do_Match_RequestDeleteChar(this, parameters, length);
			case protocol::Match_ResponseDeleteChar::packetID: return do_Match_ResponseDeleteChar(this, parameters, length);
			case protocol::Match_RequestCreateChar::packetID: return do_Match_RequestCreateChar(this, parameters, length);
			case protocol::Match_ResponseCreateChar::packetID: return do_Match_ResponseCreateChar(this, parameters, length);
			case protocol::Match_RequestBuyItem::packetID: return do_Match_RequestBuyItem(this, parameters, length);
			case protocol::Match_ResponseBuyItem::packetID: return do_Match_ResponseBuyItem(this, parameters, length);
			case protocol::Match_RequestSellItem::packetID: return do_Match_RequestSellItem(this, parameters, length);
			case protocol::Match_ResponseSellItem::packetID: return do_Match_ResponseSellItem(this, parameters, length);
			case protocol::Match_RequestShopItemList::packetID: return do_Match_RequestShopItemList(this, parameters, length);
			case protocol::Match_ResponseShopItemList::packetID: return do_Match_ResponseShopItemList(this, parameters, length);
			case protocol::Match_RequestCharacterItemList::packetID: return do_Match_RequestCharacterItemList(this, parameters, length);
			case protocol::Match_RequestCharacterItemListForce::packetID: return do_Match_RequestCharacterItemListForce(this, parameters, length);
			case protocol::Match_ResponseCharacterItemList::packetID: return do_Match_ResponseCharacterItemList(this, parameters, length);
			case protocol::MatchRequestEquipItem::packetID: return do_MatchRequestEquipItem(this, parameters, length);
			case protocol::MatchResponseEquipItem::packetID: return do_MatchResponseEquipItem(this, parameters, length);
			case protocol::MatchRequestTakeoffItem::packetID: return do_MatchRequestTakeoffItem(this, parameters, length);
			case protocol::MatchResponseTakeoffItem::packetID: return do_MatchResponseTakeoffItem(this, parameters, length);
			case protocol::Match_RequestAccountItemList::packetID: return do_Match_RequestAccountItemList(this, parameters, length);
			case protocol::Match_ResponseAccountItemList::packetID: return do_Match_ResponseAccountItemList(this, parameters, length);
			case protocol::Match_RequestBringAccountItem::packetID: return do_Match_RequestBringAccountItem(this, parameters, length);
			case protocol::Match_ResponseBringAccountItem::packetID: return do_Match_ResponseBringAccountItem(this, parameters, length);
			case protocol::Match_RequestBringBackAccountItem::packetID: return do_Match_RequestBringBackAccountItem(this, parameters, length);
			case protocol::Match_ResponseBringBackAccountItem::packetID: return do_Match_ResponseBringBackAccountItem(this, parameters, length);
			case protocol::Match_ExpiredRentItem::packetID: return do_Match_ExpiredRentItem(this, parameters, length);
			case protocol::Match_ItemGamble::packetID: return do_Match_ItemGamble(this, parameters, length);
			case protocol::Match_GambleResultItem::packetID: return do_Match_GambleResultItem(this, parameters, length);
			case protocol::Match_Request_Suicide::packetID: return do_Match_Request_Suicide(this, parameters, length);
			case protocol::Match_Response_Suicide::packetID: return do_Match_Response_Suicide(this, parameters, length);
			case protocol::Match_Response_SuicideReserve::packetID: return do_Match_Response_SuicideReserve(this, parameters, length);
			case protocol::Match_Request_Obtain_WorldItem::packetID: return do_Match_Request_Obtain_WorldItem(this, parameters, length);
			case protocol::Match_WorldItem_Obtain::packetID: return do_Match_WorldItem_Obtain(this, parameters, length);
			case protocol::Match_WorldItem_Spawn::packetID: return do_Match_WorldItem_Spawn(this, parameters, length);
			case protocol::Match_Request_Spawn_WorldItem::packetID: return do_Match_Request_Spawn_WorldItem(this, parameters, length);
			case protocol::Match_Request_Spawn_WorldItem_UID::packetID: return do_Match_Request_Spawn_WorldItem_UID(this, parameters, length);
			case protocol::Match_Reset_TeamMembers::packetID: return do_Match_Reset_TeamMembers(this, parameters, length);
			case protocol::Match_Assign_Commander::packetID: return do_Match_Assign_Commander(this, parameters, length);
			case protocol::Match_Set_Observer::packetID: return do_Match_Set_Observer(this, parameters, length);
			case protocol::Match_Ladder_Request_Challenge::packetID: return do_Match_Ladder_Request_Challenge(this, parameters, length);
			case protocol::Match_Ladder_Response_Challenge::packetID: return do_Match_Ladder_Response_Challenge(this, parameters, length);
			case protocol::Match_Ladder_SearchRival::packetID: return do_Match_Ladder_SearchRival(this, parameters, length);
			case protocol::Match_Ladder_Request_CancelChallenge::packetID: return do_Match_Ladder_Request_CancelChallenge(this, parameters, length);
			case protocol::Match_Ladder_CancelChallenge::packetID: return do_Match_Ladder_CancelChallenge(this, parameters, length);
			case protocol::Ladder_Prepare::packetID: return do_Ladder_Prepare(this, parameters, length);
			case protocol::Ladder_Launch::packetID: return do_Ladder_Launch(this, parameters, length);
			case protocol::Match_RequestProposal::packetID: return do_Match_RequestProposal(this, parameters, length);
			case protocol::Match_ResponseProposal::packetID: return do_Match_ResponseProposal(this, parameters, length);
			case protocol::Match_AskAgreement::packetID: return do_Match_AskAgreement(this, parameters, length);
			case protocol::Match_ReplyAgreement::packetID: return do_Match_ReplyAgreement(this, parameters, length);
			case protocol::Match_Friend_Add::packetID: return do_Match_Friend_Add(this, parameters, length);
			case protocol::Match_Friend_Remove::packetID: return do_Match_Friend_Remove(this, parameters, length);
			case protocol::Match_Friend_List::packetID: return do_Match_Friend_List(this, parameters, length);
			case protocol::Match_Response_FriendList::packetID: return do_Match_Response_FriendList(this, parameters, length);
			case protocol::Match_Friend_Msg::packetID: return do_Match_Friend_Msg(this, parameters, length);
			case protocol::Match_Clan_RequestCreateClan::packetID: return do_Match_Clan_RequestCreateClan(this, parameters, length);
			case protocol::Match_Clan_ResponseCreateClan::packetID: return do_Match_Clan_ResponseCreateClan(this, parameters, length);
			case protocol::Match_Clan_AskSponsorAgreement::packetID: return do_Match_Clan_AskSponsorAgreement(this, parameters, length);
			case protocol::Match_Clan_AnswerSponsorAgreement::packetID: return do_Match_Clan_AnswerSponsorAgreement(this, parameters, length);
			case protocol::Match_Clan_RequestAgreedCreateClan::packetID: return do_Match_Clan_RequestAgreedCreateClan(this, parameters, length);
			case protocol::Match_Clan_AgreedResponseCreateClan::packetID: return do_Match_Clan_AgreedResponseCreateClan(this, parameters, length);
			case protocol::Match_Clan_RequestCloseClan::packetID: return do_Match_Clan_RequestCloseClan(this, parameters, length);
			case protocol::Match_Clan_ResponseCloseClan::packetID: return do_Match_Clan_ResponseCloseClan(this, parameters, length);
			case protocol::Match_Clan_RequestJoinClan::packetID: return do_Match_Clan_RequestJoinClan(this, parameters, length);
			case protocol::Match_Clan_ResponseJoinClan::packetID: return do_Match_Clan_ResponseJoinClan(this, parameters, length);
			case protocol::Match_Clan_AskJoinAgreement::packetID: return do_Match_Clan_AskJoinAgreement(this, parameters, length);
			case protocol::Match_Clan_AnswerJoinAgreement::packetID: return do_Match_Clan_AnswerJoinAgreement(this, parameters, length);
			case protocol::Match_Clan_RequestAgreedJoinClan::packetID: return do_Match_Clan_RequestAgreedJoinClan(this, parameters, length);
			case protocol::Match_Clan_ResponseAgreedJoinClan::packetID: return do_Match_Clan_ResponseAgreedJoinClan(this, parameters, length);
			case protocol::Match_Clan_RequestLeaveClan::packetID: return do_Match_Clan_RequestLeaveClan(this, parameters, length);
			case protocol::Match_Clan_ResponseLeaveClan::packetID: return do_Match_Clan_ResponseLeaveClan(this, parameters, length);
			case protocol::Match_Clan_UpdateCharClanInfo::packetID: return do_Match_Clan_UpdateCharClanInfo(this, parameters, length);
			case protocol::Match_Clan_Master_RequestChangeGrade::packetID: return do_Match_Clan_Master_RequestChangeGrade(this, parameters, length);
			case protocol::Match_Clan_Master_ResponseChangeGrade::packetID: return do_Match_Clan_Master_ResponseChangeGrade(this, parameters, length);
			case protocol::Match_Clan_Admin_RequestExpelMember::packetID: return do_Match_Clan_Admin_RequestExpelMember(this, parameters, length);
			case protocol::Match_Clan_Admin_ResponseLeaveMember::packetID: return do_Match_Clan_Admin_ResponseLeaveMember(this, parameters, length);
			case protocol::Match_Clan_Request_Msg::packetID: return do_Match_Clan_Request_Msg(this, parameters, length);
			case protocol::Match_Clan_Msg::packetID: return do_Match_Clan_Msg(this, parameters, length);
			case protocol::Match_Clan_Request_ClanMemberList::packetID: return do_Match_Clan_Request_ClanMemberList(this, parameters, length);
			case protocol::Match_Clan_Response_ClanMemberList::packetID: return do_Match_Clan_Response_ClanMemberList(this, parameters, length);
			case protocol::Match_Clan_Request_Clan_Info::packetID: return do_Match_Clan_Request_Clan_Info(this, parameters, length);
			case protocol::Match_Clan_Response_Clan_Info::packetID: return do_Match_Clan_Response_Clan_Info(this, parameters, length);
			case protocol::Match_Clan_Standby_ClanList::packetID: return do_Match_Clan_Standby_ClanList(this, parameters, length);
			case protocol::Match_Clan_Member_Connected::packetID: return do_Match_Clan_Member_Connected(this, parameters, length);
			case protocol::Match_Clan_Request_EmblemURL::packetID: return do_Match_Clan_Request_EmblemURL(this, parameters, length);
			case protocol::Match_Clan_Response_EmblemURL::packetID: return do_Match_Clan_Response_EmblemURL(this, parameters, length);
			case protocol::Match_Clan_Local_EmblemReady::packetID: return do_Match_Clan_Local_EmblemReady(this, parameters, length);
			case protocol::MC_MATCH_CLAN_ACCOUNCE_DELETE::packetID: return do_MC_MATCH_CLAN_ACCOUNCE_DELETE(this, parameters, length);
			case protocol::Match_Callvote::packetID: return do_Match_Callvote(this, parameters, length);
			case protocol::Match_NotifyCallvote::packetID: return do_Match_NotifyCallvote(this, parameters, length);
			case protocol::Match_NotifyVoteResult::packetID: return do_Match_NotifyVoteResult(this, parameters, length);
			case protocol::Match_VoteYes::packetID: return do_Match_VoteYes(this, parameters, length);
			case protocol::Match_VoteNo::packetID: return do_Match_VoteNo(this, parameters, length);
			case protocol::Votestop::packetID: return do_Votestop(this, parameters, length);
			case protocol::Match_Broadcast_ClanRenewVictories::packetID: return do_Match_Broadcast_ClanRenewVictories(this, parameters, length);
			case protocol::Match_Broadcast_ClanInterruptVictories::packetID: return do_Match_Broadcast_ClanInterruptVictories(this, parameters, length);
			case protocol::Match_Broadcast_DuelRenewVictories::packetID: return do_Match_Broadcast_DuelRenewVictories(this, parameters, length);
			case protocol::Match_Broadcast_DuelInterruptVictories::packetID: return do_Match_Broadcast_DuelInterruptVictories(this, parameters, length);
			case protocol::Match_Assign_Berserker::packetID: return do_Match_Assign_Berserker(this, parameters, length);
			case protocol::Match_Duel_QueueInfo::packetID: return do_Match_Duel_QueueInfo(this, parameters, length);
			case protocol::Match_Quest_Ping::packetID: return do_Match_Quest_Ping(this, parameters, length);
			case protocol::Match_Quest_Pong::packetID: return do_Match_Quest_Pong(this, parameters, length);
			case protocol::MC_QUEST_NPCLIST::packetID: return do_MC_QUEST_NPCLIST(this, parameters, length);
			case protocol::Event_ChangeMaster::packetID: return do_Event_ChangeMaster(this, parameters, length);
			case protocol::Event_ChangePassword::packetID: return do_Event_ChangePassword(this, parameters, length);
			case protocol::Event_RequestJJang::packetID: return do_Event_RequestJJang(this, parameters, length);
			case protocol::Event_RemoveJJang::packetID: return do_Event_RemoveJJang(this, parameters, length);
			case protocol::Event_UpdateJJang::packetID: return do_Event_UpdateJJang(this, parameters, length);
			case protocol::Quest_NPCSpawn::packetID: return do_Quest_NPCSpawn(this, parameters, length);
			case protocol::Quest_Entrust_NPC_Control::packetID: return do_Quest_Entrust_NPC_Control(this, parameters, length);
			case protocol::Quest_Checksum_NPCInfo::packetID: return do_Quest_Checksum_NPCInfo(this, parameters, length);
			case protocol::Quest_NPCDead::packetID: return do_Quest_NPCDead(this, parameters, length);
			case protocol::Quest_RefreshPlayerStatus::packetID: return do_Quest_RefreshPlayerStatus(this, parameters, length);
			case protocol::Quest_NPC_AllClear::packetID: return do_Quest_NPC_AllClear(this, parameters, length);
			case protocol::Quest_Round_Start::packetID: return do_Quest_Round_Start(this, parameters, length);
			case protocol::Quest_RequestDead::packetID: return do_Quest_RequestDead(this, parameters, length);
			case protocol::Quest_PlayerDead::packetID: return do_Quest_PlayerDead(this, parameters, length);
			case protocol::Quest_ObtainQuestItem::packetID: return do_Quest_ObtainQuestItem(this, parameters, length);
			case protocol::Quest_ObtainZItem::packetID: return do_Quest_ObtainZItem(this, parameters, length);
			case protocol::Quest_State_Mapset::packetID: return do_Quest_State_Mapset(this, parameters, length);
			case protocol::Quest_Stage_GameInfo::packetID: return do_Quest_Stage_GameInfo(this, parameters, length);
			case protocol::Quest_SectorBonus::packetID: return do_Quest_SectorBonus(this, parameters, length);
			case protocol::Quest_GameInfo::packetID: return do_Quest_GameInfo(this, parameters, length);
			case protocol::Quest_Combat_State::packetID: return do_Quest_Combat_State(this, parameters, length);
			case protocol::Quest_Sector_Start::packetID: return do_Quest_Sector_Start(this, parameters, length);
			case protocol::Quest_Complete::packetID: return do_Quest_Complete(this, parameters, length);
			case protocol::Quest_Failed::packetID: return do_Quest_Failed(this, parameters, length);
			case protocol::Quest_Request_Moveto_Portal::packetID: return do_Quest_Request_Moveto_Portal(this, parameters, length);
			case protocol::Quest_Moveto_Portal::packetID: return do_Quest_Moveto_Portal(this, parameters, length);
			case protocol::Quest_Readyto_NewSector::packetID: return do_Quest_Readyto_NewSector(this, parameters, length);
			case protocol::Quest_Peer_NPC_BasicInfo::packetID: return do_Quest_Peer_NPC_BasicInfo(this, parameters, length);
			case protocol::Quest_Peer_NPC_HPInfo::packetID: return do_Quest_Peer_NPC_HPInfo(this, parameters, length);
			case protocol::Quest_Peer_NPC_Attack_Melee::packetID: return do_Quest_Peer_NPC_Attack_Melee(this, parameters, length);
			case protocol::Quest_Peer_NPC_Attack_Range::packetID: return do_Quest_Peer_NPC_Attack_Range(this, parameters, length);
			case protocol::Quest_Peer_NPC_Skill_Start::packetID: return do_Quest_Peer_NPC_Skill_Start(this, parameters, length);
			case protocol::Quest_Peer_NPC_Skill_Execute::packetID: return do_Quest_Peer_NPC_Skill_Execute(this, parameters, length);
			case protocol::Quest_Peer_NPC_Dead::packetID: return do_Quest_Peer_NPC_Dead(this, parameters, length);
			case protocol::Quest_Test_RequestNPCSpawn::packetID: return do_Quest_Test_RequestNPCSpawn(this, parameters, length);
			case protocol::Quest_Test_ClearNPC::packetID: return do_Quest_Test_ClearNPC(this, parameters, length);
			case protocol::Quest_Test_SectorClear::packetID: return do_Quest_Test_SectorClear(this, parameters, length);
			case protocol::Quest_Test_Finish::packetID: return do_Quest_Test_Finish(this, parameters, length);
			case protocol::Admin_Announce::packetID: return do_Admin_Announce(this, parameters, length);
			case protocol::Admin_RequestBanPlayer::packetID: return do_Admin_RequestBanPlayer(this, parameters, length);
			case protocol::Admin_ResponseBanPlayer::packetID: return do_Admin_ResponseBanPlayer(this, parameters, length);
			case protocol::Admin_Hide::packetID: return do_Admin_Hide(this, parameters, length);
			case protocol::MC_ADMIN_RESET_ALL_HACKING_BLOCK::packetID: return do_MC_ADMIN_RESET_ALL_HACKING_BLOCK(this, parameters, length);
			case protocol::MC_ADMIN_RELOAD_GAMBLEITEM::packetID: return do_MC_ADMIN_RELOAD_GAMBLEITEM(this, parameters, length);
			case protocol::MC_ADMIN_ASSASIN::packetID: return do_MC_ADMIN_ASSASIN(this, parameters, length);
			case protocol::Agent_Connect::packetID: return do_Agent_Connect(this, parameters, length);
			case protocol::Agent_Disconnect::packetID: return do_Agent_Disconnect(this, parameters, length);
			case protocol::Match_RegisterAgent::packetID: return do_Match_RegisterAgent(this, parameters, length);
			case protocol::Match_UnRegisterAgent::packetID: return do_Match_UnRegisterAgent(this, parameters, length);
			case protocol::Match_Agent_RequestLiveCheck::packetID: return do_Match_Agent_RequestLiveCheck(this, parameters, length);
			case protocol::Match_Agent_ResponseLiveCheck::packetID: return do_Match_Agent_ResponseLiveCheck(this, parameters, length);
			case protocol::Agent_StageReserve::packetID: return do_Agent_StageReserve(this, parameters, length);
			case protocol::Agent_StageRelease::packetID: return do_Agent_StageRelease(this, parameters, length);
			case protocol::Agent_StageReady::packetID: return do_Agent_StageReady(this, parameters, length);
			case protocol::Agent_RelayPeer::packetID: return do_Agent_RelayPeer(this, parameters, length);
			case protocol::Questitem::packetID: return do_Questitem(this, parameters, length);
			case protocol::Quest_item_response::packetID: return do_Quest_item_response(this, parameters, length);
			case protocol::Quest_item_buy::packetID: return do_Quest_item_buy(this, parameters, length);
			case protocol::Quest_item_responsebuy::packetID: return do_Quest_item_responsebuy(this, parameters, length);
			case protocol::Quest_item_sell::packetID: return do_Quest_item_sell(this, parameters, length);
			case protocol::Quest_item_responsesell::packetID: return do_Quest_item_responsesell(this, parameters, length);
			case protocol::Quest_Reward::packetID: return do_Quest_Reward(this, parameters, length);
			case protocol::Quest_Request_Sacrifice::packetID: return do_Quest_Request_Sacrifice(this, parameters, length);
			case protocol::Quest_Response_Sacrifice::packetID: return do_Quest_Response_Sacrifice(this, parameters, length);
			case protocol::Quest_Callback_Sacrifice::packetID: return do_Quest_Callback_Sacrifice(this, parameters, length);
			case protocol::Quest_Callback_Result::packetID: return do_Quest_Callback_Result(this, parameters, length);
			case protocol::Quest_Request_SlotInfo::packetID: return do_Quest_Request_SlotInfo(this, parameters, length);
			case protocol::Quest_Resonse_SlotInfo::packetID: return do_Quest_Resonse_SlotInfo(this, parameters, length);
			case protocol::Quest_RequestLevel::packetID: return do_Quest_RequestLevel(this, parameters, length);
			case protocol::Quest_ResponseLevel::packetID: return do_Quest_ResponseLevel(this, parameters, length);
			case protocol::Quest_Survival_Result::packetID: return do_Quest_Survival_Result(this, parameters, length);
			case protocol::Quest_Survival_Ranking::packetID: return do_Quest_Survival_Ranking(this, parameters, length);
			case protocol::Quest_Survuval_PrivateRanking::packetID: return do_Quest_Survuval_PrivateRanking(this, parameters, length);
			case protocol::Quest_Start_Fail::packetID: return do_Quest_Start_Fail(this, parameters, length);
			case protocol::monsterinfo::packetID: return do_monsterinfo(this, parameters, length);
			case protocol::Quest_Bible_Request::packetID: return do_Quest_Bible_Request(this, parameters, length);
			case protocol::Quest_Bible_Response::packetID: return do_Quest_Bible_Response(this, parameters, length);
			case protocol::MC_REQUEST_GIVE_ONESELF_UP::packetID: return do_MC_REQUEST_GIVE_ONESELF_UP(this, parameters, length);
			case protocol::MC_RESPONSE_GAMBLEITEMLIST::packetID: return do_MC_RESPONSE_GAMBLEITEMLIST(this, parameters, length);
			case protocol::MC_MATCH_ROUTE_UPDATE_STAGE_EQUIP_LOOK::packetID: return do_MC_MATCH_ROUTE_UPDATE_STAGE_EQUIP_LOOK(this, parameters, length);
			case protocol::MC_REQUEST_RESOURCE_CRC32::packetID: return do_MC_REQUEST_RESOURCE_CRC32(this, parameters, length);
			case protocol::MC_RESPONSE_RESOURCE_CRC32::packetID: return do_MC_RESPONSE_RESOURCE_CRC32(this, parameters, length);
		}
	} catch(...) {
		this->OnFailedParse(packetID, parameters, length);
	}
}

}
}
