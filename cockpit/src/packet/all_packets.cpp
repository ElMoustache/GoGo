/*
 * NOTICE: Do not manually edit this file. It has been autogenerated by
 * protocol/parse.py. Any changes should me made there, instead of here.
 */
#include <cockpit/packet/protocol/all>
#include <util/memory.h>

using namespace boost;

#define countof(array) 	(sizeof(array)/sizeof((array)[0]))

static Buffer merge_parameters(Buffer* serializedParameters, size_t numberOfParameters)
{
	size_t packetLength = 0;

	for(size_t i = 0; i < numberOfParameters; ++i)
		packetLength += serializedParameters[i].length();

	assert(packetLength <= 0xFFFF);

	Buffer out(packetLength);
	uint8_t* outPtr = out.data();
	Buffer* param = serializedParameters;

	for(size_t i = 0; i < numberOfParameters; ++i, ++param)
		outPtr = memory::pcopy(outPtr, param->data(), param->length());

	return out;
}

namespace cockpit {
namespace packet {
namespace protocol {

Net_Ping::Net_Ping(packet::uint32 _TimeStamp)
	: TimeStamp(_TimeStamp)
{
}

const char* Net_Ping::name() const
{
	return "Net_Ping";
}

const char* Net_Ping::doc() const
{
	return "Ping";
}

uint16_t Net_Ping::id() const
{
	return packetID;
}

Buffer Net_Ping::serialize() const
{
	Buffer serializedParameters[] = {
		TimeStamp.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Net_Pong::Net_Pong(packet::uint32 _TimeStamp)
	: TimeStamp(_TimeStamp)
{
}

const char* Net_Pong::name() const
{
	return "Net_Pong";
}

const char* Net_Pong::doc() const
{
	return "Pong";
}

uint16_t Net_Pong::id() const
{
	return packetID;
}

Buffer Net_Pong::serialize() const
{
	Buffer serializedParameters[] = {
		TimeStamp.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Announce::Match_Announce(packet::uint32 _Type, packet::string _Msg)
	: Type(_Type), Msg(_Msg)
{
}

const char* Match_Announce::name() const
{
	return "Match_Announce";
}

const char* Match_Announce::doc() const
{
	return "Announce Server Message";
}

uint16_t Match_Announce::id() const
{
	return packetID;
}

Buffer Match_Announce::serialize() const
{
	Buffer serializedParameters[] = {
		Type.serialize(),
		Msg.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Clock_Synchronize::Clock_Synchronize(packet::uint32 _GlobalClock_msec)
	: GlobalClock_msec(_GlobalClock_msec)
{
}

const char* Clock_Synchronize::name() const
{
	return "Clock_Synchronize";
}

const char* Clock_Synchronize::doc() const
{
	return "Synchronize Clock";
}

uint16_t Clock_Synchronize::id() const
{
	return packetID;
}

Buffer Clock_Synchronize::serialize() const
{
	Buffer serializedParameters[] = {
		GlobalClock_msec.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Login::Match_Login(packet::string _UserID, packet::string _Password, packet::int32 _CommandVersion, packet::uint32 _nChecksumPack, packet::blob _EncryptMD5Value)
	: UserID(_UserID), Password(_Password), CommandVersion(_CommandVersion), nChecksumPack(_nChecksumPack), EncryptMD5Value(_EncryptMD5Value)
{
}

const char* Match_Login::name() const
{
	return "Match_Login";
}

const char* Match_Login::doc() const
{
	return "Login Match Server";
}

uint16_t Match_Login::id() const
{
	return packetID;
}

Buffer Match_Login::serialize() const
{
	Buffer serializedParameters[] = {
		UserID.serialize(),
		Password.serialize(),
		CommandVersion.serialize(),
		nChecksumPack.serialize(),
		EncryptMD5Value.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_ResponseLogin::Match_ResponseLogin(packet::int32 _Result, packet::string _ServerName, packet::vector _ServerMode, packet::string _AccountID, packet::uint8 _UGradeID, packet::uint8 _PGradeID, packet::MUID _uidPlayer, packet::boolean _bEnabledSurvivalMode, packet::blob _EncryptMsg)
	: Result(_Result), ServerName(_ServerName), ServerMode(_ServerMode), AccountID(_AccountID), UGradeID(_UGradeID), PGradeID(_PGradeID), uidPlayer(_uidPlayer), bEnabledSurvivalMode(_bEnabledSurvivalMode), EncryptMsg(_EncryptMsg)
{
}

const char* Match_ResponseLogin::name() const
{
	return "Match_ResponseLogin";
}

const char* Match_ResponseLogin::doc() const
{
	return "Response Login";
}

uint16_t Match_ResponseLogin::id() const
{
	return packetID;
}

Buffer Match_ResponseLogin::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize(),
		ServerName.serialize(),
		ServerMode.serialize(),
		AccountID.serialize(),
		UGradeID.serialize(),
		PGradeID.serialize(),
		uidPlayer.serialize(),
		bEnabledSurvivalMode.serialize(),
		EncryptMsg.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Response_Result::Match_Response_Result(packet::int32 _Result)
	: Result(_Result)
{
}

const char* Match_Response_Result::name() const
{
	return "Match_Response_Result";
}

const char* Match_Response_Result::doc() const
{
	return "Response Result";
}

uint16_t Match_Response_Result::id() const
{
	return packetID;
}

Buffer Match_Response_Result::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_LoginNetmarble::Match_LoginNetmarble(packet::string _CPCookie, packet::string _SpareParam, packet::int32 _CommandVersion, packet::uint32 _nChecksumPack)
	: CPCookie(_CPCookie), SpareParam(_SpareParam), CommandVersion(_CommandVersion), nChecksumPack(_nChecksumPack)
{
}

const char* Match_LoginNetmarble::name() const
{
	return "Match_LoginNetmarble";
}

const char* Match_LoginNetmarble::doc() const
{
	return "Login from Netmarble";
}

uint16_t Match_LoginNetmarble::id() const
{
	return packetID;
}

Buffer Match_LoginNetmarble::serialize() const
{
	Buffer serializedParameters[] = {
		CPCookie.serialize(),
		SpareParam.serialize(),
		CommandVersion.serialize(),
		nChecksumPack.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

MC_MATCH_DISCONNMSG::MC_MATCH_DISCONNMSG(packet::uint32 _messageid)
	: messageid(_messageid)
{
}

const char* MC_MATCH_DISCONNMSG::name() const
{
	return "MC_MATCH_DISCONNMSG";
}

const char* MC_MATCH_DISCONNMSG::doc() const
{
	return "disconnect reason";
}

uint16_t MC_MATCH_DISCONNMSG::id() const
{
	return packetID;
}

Buffer MC_MATCH_DISCONNMSG::serialize() const
{
	Buffer serializedParameters[] = {
		messageid.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

MC_MATCH_LOGIN_NHNUSA::MC_MATCH_LOGIN_NHNUSA(packet::string _UserID, packet::string _szAuthStr, packet::int32 _CommandVersion, packet::uint32 _nChecksumPack, packet::blob _EncryptMD5Value)
	: UserID(_UserID), szAuthStr(_szAuthStr), CommandVersion(_CommandVersion), nChecksumPack(_nChecksumPack), EncryptMD5Value(_EncryptMD5Value)
{
}

const char* MC_MATCH_LOGIN_NHNUSA::name() const
{
	return "MC_MATCH_LOGIN_NHNUSA";
}

const char* MC_MATCH_LOGIN_NHNUSA::doc() const
{
	return "Login from nhn usa.";
}

uint16_t MC_MATCH_LOGIN_NHNUSA::id() const
{
	return packetID;
}

Buffer MC_MATCH_LOGIN_NHNUSA::serialize() const
{
	Buffer serializedParameters[] = {
		UserID.serialize(),
		szAuthStr.serialize(),
		CommandVersion.serialize(),
		nChecksumPack.serialize(),
		EncryptMD5Value.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

MC_MATCH_LOGIN_GAMEON_JP::MC_MATCH_LOGIN_GAMEON_JP(packet::string _szString, packet::string _szStatIndex, packet::int32 _CommandVersion, packet::uint32 _nChecksumPack, packet::blob _EncryptMD5Value)
	: szString(_szString), szStatIndex(_szStatIndex), CommandVersion(_CommandVersion), nChecksumPack(_nChecksumPack), EncryptMD5Value(_EncryptMD5Value)
{
}

const char* MC_MATCH_LOGIN_GAMEON_JP::name() const
{
	return "MC_MATCH_LOGIN_GAMEON_JP";
}

const char* MC_MATCH_LOGIN_GAMEON_JP::doc() const
{
	return "Login from GameOn Japan";
}

uint16_t MC_MATCH_LOGIN_GAMEON_JP::id() const
{
	return packetID;
}

Buffer MC_MATCH_LOGIN_GAMEON_JP::serialize() const
{
	Buffer serializedParameters[] = {
		szString.serialize(),
		szStatIndex.serialize(),
		CommandVersion.serialize(),
		nChecksumPack.serialize(),
		EncryptMD5Value.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_ObjectCache::Match_ObjectCache(packet::uint8 _Type, packet::blob _ObjectCache)
	: Type(_Type), ObjectCache(_ObjectCache)
{
}

const char* Match_ObjectCache::name() const
{
	return "Match_ObjectCache";
}

const char* Match_ObjectCache::doc() const
{
	return "Match Object Cache";
}

uint16_t Match_ObjectCache::id() const
{
	return packetID;
}

Buffer Match_ObjectCache::serialize() const
{
	Buffer serializedParameters[] = {
		Type.serialize(),
		ObjectCache.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_BridgePeer::Match_BridgePeer(packet::MUID _uidPlayer, packet::uint32 _dwIP, packet::uint32 _nPort)
	: uidPlayer(_uidPlayer), dwIP(_dwIP), nPort(_nPort)
{
}

const char* Match_BridgePeer::name() const
{
	return "Match_BridgePeer";
}

const char* Match_BridgePeer::doc() const
{
	return "Match BridgePeer";
}

uint16_t Match_BridgePeer::id() const
{
	return packetID;
}

Buffer Match_BridgePeer::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		dwIP.serialize(),
		nPort.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_BridgePeerACK::Match_BridgePeerACK(packet::MUID _uidPlayer, packet::int32 _nCode)
	: uidPlayer(_uidPlayer), nCode(_nCode)
{
}

const char* Match_BridgePeerACK::name() const
{
	return "Match_BridgePeerACK";
}

const char* Match_BridgePeerACK::doc() const
{
	return "ACK for BridgePeer";
}

uint16_t Match_BridgePeerACK::id() const
{
	return packetID;
}

Buffer Match_BridgePeerACK::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		nCode.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

MatchServer_RequestRecommandedChannel::MatchServer_RequestRecommandedChannel()
{
}

const char* MatchServer_RequestRecommandedChannel::name() const
{
	return "MatchServer_RequestRecommandedChannel";
}

const char* MatchServer_RequestRecommandedChannel::doc() const
{
	return "Request recommanded channel";
}

uint16_t MatchServer_RequestRecommandedChannel::id() const
{
	return packetID;
}

Buffer MatchServer_RequestRecommandedChannel::serialize() const
{
	return Buffer(0);
}

MatchServer_ResponseRecommandedChannel::MatchServer_ResponseRecommandedChannel(packet::MUID _uid)
	: uid(_uid)
{
}

const char* MatchServer_ResponseRecommandedChannel::name() const
{
	return "MatchServer_ResponseRecommandedChannel";
}

const char* MatchServer_ResponseRecommandedChannel::doc() const
{
	return "Response recommanded channel";
}

uint16_t MatchServer_ResponseRecommandedChannel::id() const
{
	return packetID;
}

Buffer MatchServer_ResponseRecommandedChannel::serialize() const
{
	Buffer serializedParameters[] = {
		uid.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Channel_Join::Channel_Join(packet::MUID _uidPlayer, packet::MUID _uidChannel)
	: uidPlayer(_uidPlayer), uidChannel(_uidChannel)
{
}

const char* Channel_Join::name() const
{
	return "Channel_Join";
}

const char* Channel_Join::doc() const
{
	return "Join a Channel";
}

uint16_t Channel_Join::id() const
{
	return packetID;
}

Buffer Channel_Join::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		uidChannel.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Channel_ResponseJoin::Channel_ResponseJoin(packet::MUID _uidChannel, packet::int32 _ChannelType, packet::string _ChannelName, packet::boolean _EnableInterface)
	: uidChannel(_uidChannel), ChannelType(_ChannelType), ChannelName(_ChannelName), EnableInterface(_EnableInterface)
{
}

const char* Channel_ResponseJoin::name() const
{
	return "Channel_ResponseJoin";
}

const char* Channel_ResponseJoin::doc() const
{
	return "Response Join a Channel";
}

uint16_t Channel_ResponseJoin::id() const
{
	return packetID;
}

Buffer Channel_ResponseJoin::serialize() const
{
	Buffer serializedParameters[] = {
		uidChannel.serialize(),
		ChannelType.serialize(),
		ChannelName.serialize(),
		EnableInterface.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Channel_RequestJoinFromName::Channel_RequestJoinFromName(packet::MUID _uidPlayer, packet::int32 _nChannelType, packet::int32 _zero, packet::string _ChannelName)
	: uidPlayer(_uidPlayer), nChannelType(_nChannelType), zero(_zero), ChannelName(_ChannelName)
{
}

const char* Channel_RequestJoinFromName::name() const
{
	return "Channel_RequestJoinFromName";
}

const char* Channel_RequestJoinFromName::doc() const
{
	return "Join a Channel From Name";
}

uint16_t Channel_RequestJoinFromName::id() const
{
	return packetID;
}

Buffer Channel_RequestJoinFromName::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		nChannelType.serialize(),
		zero.serialize(),
		ChannelName.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Channel_Leave::Channel_Leave(packet::MUID _uidPlayer, packet::MUID _uidChannel)
	: uidPlayer(_uidPlayer), uidChannel(_uidChannel)
{
}

const char* Channel_Leave::name() const
{
	return "Channel_Leave";
}

const char* Channel_Leave::doc() const
{
	return "Leave Channel";
}

uint16_t Channel_Leave::id() const
{
	return packetID;
}

Buffer Channel_Leave::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		uidChannel.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Channel_ListStart::Channel_ListStart(packet::MUID _uidPlayer, packet::int32 _nChannelType, packet::int32 _zero)
	: uidPlayer(_uidPlayer), nChannelType(_nChannelType), zero(_zero)
{
}

const char* Channel_ListStart::name() const
{
	return "Channel_ListStart";
}

const char* Channel_ListStart::doc() const
{
	return "Channel List transmit start";
}

uint16_t Channel_ListStart::id() const
{
	return packetID;
}

Buffer Channel_ListStart::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		nChannelType.serialize(),
		zero.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Channel_ListStop::Channel_ListStop(packet::MUID _uidPlayer)
	: uidPlayer(_uidPlayer)
{
}

const char* Channel_ListStop::name() const
{
	return "Channel_ListStop";
}

const char* Channel_ListStop::doc() const
{
	return "Channel List transmit stop";
}

uint16_t Channel_ListStop::id() const
{
	return packetID;
}

Buffer Channel_ListStop::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Channel_List::Channel_List(packet::blob _ChannelList)
	: ChannelList(_ChannelList)
{
}

const char* Channel_List::name() const
{
	return "Channel_List";
}

const char* Channel_List::doc() const
{
	return "Channel List";
}

uint16_t Channel_List::id() const
{
	return packetID;
}

Buffer Channel_List::serialize() const
{
	Buffer serializedParameters[] = {
		ChannelList.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Channel_Request_Chat::Channel_Request_Chat(packet::MUID _uidPlayer, packet::MUID _uidChannel, packet::string _Chat)
	: uidPlayer(_uidPlayer), uidChannel(_uidChannel), Chat(_Chat)
{
}

const char* Channel_Request_Chat::name() const
{
	return "Channel_Request_Chat";
}

const char* Channel_Request_Chat::doc() const
{
	return "Request Chat to Channel";
}

uint16_t Channel_Request_Chat::id() const
{
	return packetID;
}

Buffer Channel_Request_Chat::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		uidChannel.serialize(),
		Chat.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Channel_Chat::Channel_Chat(packet::MUID _uidChannel, packet::string _PlayerName, packet::string _Chat, packet::int32 _nGrade)
	: uidChannel(_uidChannel), PlayerName(_PlayerName), Chat(_Chat), nGrade(_nGrade)
{
}

const char* Channel_Chat::name() const
{
	return "Channel_Chat";
}

const char* Channel_Chat::doc() const
{
	return "Chat to Channel";
}

uint16_t Channel_Chat::id() const
{
	return packetID;
}

Buffer Channel_Chat::serialize() const
{
	Buffer serializedParameters[] = {
		uidChannel.serialize(),
		PlayerName.serialize(),
		Chat.serialize(),
		nGrade.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Channel_Request_Rule::Channel_Request_Rule(packet::MUID _uidChannel)
	: uidChannel(_uidChannel)
{
}

const char* Channel_Request_Rule::name() const
{
	return "Channel_Request_Rule";
}

const char* Channel_Request_Rule::doc() const
{
	return "Request the Channel Rule";
}

uint16_t Channel_Request_Rule::id() const
{
	return packetID;
}

Buffer Channel_Request_Rule::serialize() const
{
	Buffer serializedParameters[] = {
		uidChannel.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Channel_Response_Rule::Channel_Response_Rule(packet::MUID _uidChannel, packet::string _RuleName)
	: uidChannel(_uidChannel), RuleName(_RuleName)
{
}

const char* Channel_Response_Rule::name() const
{
	return "Channel_Response_Rule";
}

const char* Channel_Response_Rule::doc() const
{
	return "Response the Channel Rule";
}

uint16_t Channel_Response_Rule::id() const
{
	return packetID;
}

Buffer Channel_Response_Rule::serialize() const
{
	Buffer serializedParameters[] = {
		uidChannel.serialize(),
		RuleName.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Channel_RequestAllPlayerList::Channel_RequestAllPlayerList(packet::MUID _uidPlayer, packet::MUID _uidChannel, packet::uint32 _PlaceFilter, packet::uint32 _Options)
	: uidPlayer(_uidPlayer), uidChannel(_uidChannel), PlaceFilter(_PlaceFilter), Options(_Options)
{
}

const char* Channel_RequestAllPlayerList::name() const
{
	return "Channel_RequestAllPlayerList";
}

const char* Channel_RequestAllPlayerList::doc() const
{
	return "Request Channel All Player List";
}

uint16_t Channel_RequestAllPlayerList::id() const
{
	return packetID;
}

Buffer Channel_RequestAllPlayerList::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		uidChannel.serialize(),
		PlaceFilter.serialize(),
		Options.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Channel_ResponseAllPlayerList::Channel_ResponseAllPlayerList(packet::MUID _uidChannel, packet::blob _PlayerList)
	: uidChannel(_uidChannel), PlayerList(_PlayerList)
{
}

const char* Channel_ResponseAllPlayerList::name() const
{
	return "Channel_ResponseAllPlayerList";
}

const char* Channel_ResponseAllPlayerList::doc() const
{
	return "Response Channel All Player List";
}

uint16_t Channel_ResponseAllPlayerList::id() const
{
	return packetID;
}

Buffer Channel_ResponseAllPlayerList::serialize() const
{
	Buffer serializedParameters[] = {
		uidChannel.serialize(),
		PlayerList.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_Create::Stage_Create(packet::MUID _uidChar, packet::string _StageName, packet::boolean _IsPrivate, packet::string _Password)
	: uidChar(_uidChar), StageName(_StageName), IsPrivate(_IsPrivate), Password(_Password)
{
}

const char* Stage_Create::name() const
{
	return "Stage_Create";
}

const char* Stage_Create::doc() const
{
	return "Create a Stage";
}

uint16_t Stage_Create::id() const
{
	return packetID;
}

Buffer Stage_Create::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize(),
		StageName.serialize(),
		IsPrivate.serialize(),
		Password.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_RequestJoin::Stage_RequestJoin(packet::MUID _uidPlayer, packet::MUID _uidStage)
	: uidPlayer(_uidPlayer), uidStage(_uidStage)
{
}

const char* Stage_RequestJoin::name() const
{
	return "Stage_RequestJoin";
}

const char* Stage_RequestJoin::doc() const
{
	return "Request Join a Stage";
}

uint16_t Stage_RequestJoin::id() const
{
	return packetID;
}

Buffer Stage_RequestJoin::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		uidStage.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_RequestPrivateJoin::Stage_RequestPrivateJoin(packet::MUID _uidPlayer, packet::MUID _uidStage, packet::string _Password)
	: uidPlayer(_uidPlayer), uidStage(_uidStage), Password(_Password)
{
}

const char* Stage_RequestPrivateJoin::name() const
{
	return "Stage_RequestPrivateJoin";
}

const char* Stage_RequestPrivateJoin::doc() const
{
	return "Request Join a Private Stage";
}

uint16_t Stage_RequestPrivateJoin::id() const
{
	return packetID;
}

Buffer Stage_RequestPrivateJoin::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		uidStage.serialize(),
		Password.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_Join::Stage_Join(packet::MUID _uidPlayer, packet::MUID _uidStage, packet::uint32 _nRoomNo, packet::string _StageName)
	: uidPlayer(_uidPlayer), uidStage(_uidStage), nRoomNo(_nRoomNo), StageName(_StageName)
{
}

const char* Stage_Join::name() const
{
	return "Stage_Join";
}

const char* Stage_Join::doc() const
{
	return "Join a Stage";
}

uint16_t Stage_Join::id() const
{
	return packetID;
}

Buffer Stage_Join::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		uidStage.serialize(),
		nRoomNo.serialize(),
		StageName.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_Leave::Stage_Leave(packet::MUID _uidPlayer)
	: uidPlayer(_uidPlayer)
{
}

const char* Stage_Leave::name() const
{
	return "Stage_Leave";
}

const char* Stage_Leave::doc() const
{
	return "Leave Stage";
}

uint16_t Stage_Leave::id() const
{
	return packetID;
}

Buffer Stage_Leave::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_Request_PlayerList::Stage_Request_PlayerList(packet::MUID _uidStage)
	: uidStage(_uidStage)
{
}

const char* Stage_Request_PlayerList::name() const
{
	return "Stage_Request_PlayerList";
}

const char* Stage_Request_PlayerList::doc() const
{
	return "Requst PlayerList from the Stage";
}

uint16_t Stage_Request_PlayerList::id() const
{
	return packetID;
}

Buffer Stage_Request_PlayerList::serialize() const
{
	Buffer serializedParameters[] = {
		uidStage.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_Follow::Stage_Follow(packet::string _strTarget)
	: strTarget(_strTarget)
{
}

const char* Stage_Follow::name() const
{
	return "Stage_Follow";
}

const char* Stage_Follow::doc() const
{
	return "Follow User to Stage";
}

uint16_t Stage_Follow::id() const
{
	return packetID;
}

Buffer Stage_Follow::serialize() const
{
	Buffer serializedParameters[] = {
		strTarget.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_Response_Follow::Stage_Response_Follow(packet::int32 _Result)
	: Result(_Result)
{
}

const char* Stage_Response_Follow::name() const
{
	return "Stage_Response_Follow";
}

const char* Stage_Response_Follow::doc() const
{
	return "Response Follow User to Stage";
}

uint16_t Stage_Response_Follow::id() const
{
	return packetID;
}

Buffer Stage_Response_Follow::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_ResponseJoin::Stage_ResponseJoin(packet::int32 _Result)
	: Result(_Result)
{
}

const char* Stage_ResponseJoin::name() const
{
	return "Stage_ResponseJoin";
}

const char* Stage_ResponseJoin::doc() const
{
	return "Response Join a Stage";
}

uint16_t Stage_ResponseJoin::id() const
{
	return packetID;
}

Buffer Stage_ResponseJoin::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_RequirePassword::Stage_RequirePassword(packet::MUID _uidStage, packet::string _StageName)
	: uidStage(_uidStage), StageName(_StageName)
{
}

const char* Stage_RequirePassword::name() const
{
	return "Stage_RequirePassword";
}

const char* Stage_RequirePassword::doc() const
{
	return "Require password";
}

uint16_t Stage_RequirePassword::id() const
{
	return packetID;
}

Buffer Stage_RequirePassword::serialize() const
{
	Buffer serializedParameters[] = {
		uidStage.serialize(),
		StageName.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

RequestGameInfo::RequestGameInfo(packet::MUID _uidChar, packet::MUID _uidStage)
	: uidChar(_uidChar), uidStage(_uidStage)
{
}

const char* RequestGameInfo::name() const
{
	return "RequestGameInfo";
}

const char* RequestGameInfo::doc() const
{
	return "Request Game Info";
}

uint16_t RequestGameInfo::id() const
{
	return packetID;
}

Buffer RequestGameInfo::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize(),
		uidStage.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

ResponseGameInfo::ResponseGameInfo(packet::MUID _uidStage, packet::blob _GameInfo, packet::blob _RuleInfo, packet::blob _PlayerInfo)
	: uidStage(_uidStage), GameInfo(_GameInfo), RuleInfo(_RuleInfo), PlayerInfo(_PlayerInfo)
{
}

const char* ResponseGameInfo::name() const
{
	return "ResponseGameInfo";
}

const char* ResponseGameInfo::doc() const
{
	return "Response Game Info";
}

uint16_t ResponseGameInfo::id() const
{
	return packetID;
}

Buffer ResponseGameInfo::serialize() const
{
	Buffer serializedParameters[] = {
		uidStage.serialize(),
		GameInfo.serialize(),
		RuleInfo.serialize(),
		PlayerInfo.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_ResponseCreate::Stage_ResponseCreate(packet::int32 _Result)
	: Result(_Result)
{
}

const char* Stage_ResponseCreate::name() const
{
	return "Stage_ResponseCreate";
}

const char* Stage_ResponseCreate::doc() const
{
	return "Response Create a Stage";
}

uint16_t Stage_ResponseCreate::id() const
{
	return packetID;
}

Buffer Stage_ResponseCreate::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_Request_EnterBattle::Stage_Request_EnterBattle(packet::MUID _uidPlayer, packet::MUID _uidStage)
	: uidPlayer(_uidPlayer), uidStage(_uidStage)
{
}

const char* Stage_Request_EnterBattle::name() const
{
	return "Stage_Request_EnterBattle";
}

const char* Stage_Request_EnterBattle::doc() const
{
	return "Request Enter Stage Battle";
}

uint16_t Stage_Request_EnterBattle::id() const
{
	return packetID;
}

Buffer Stage_Request_EnterBattle::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		uidStage.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_EnterBattle::Stage_EnterBattle(packet::uint8 _Param, packet::blob _CharData)
	: Param(_Param), CharData(_CharData)
{
}

const char* Stage_EnterBattle::name() const
{
	return "Stage_EnterBattle";
}

const char* Stage_EnterBattle::doc() const
{
	return "Enter Stage Battle";
}

uint16_t Stage_EnterBattle::id() const
{
	return packetID;
}

Buffer Stage_EnterBattle::serialize() const
{
	Buffer serializedParameters[] = {
		Param.serialize(),
		CharData.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_LeaveBattle::Stage_LeaveBattle(packet::MUID _uidPlayer)
	: uidPlayer(_uidPlayer)
{
}

const char* Stage_LeaveBattle::name() const
{
	return "Stage_LeaveBattle";
}

const char* Stage_LeaveBattle::doc() const
{
	return "Leave Stage Battle";
}

uint16_t Stage_LeaveBattle::id() const
{
	return packetID;
}

Buffer Stage_LeaveBattle::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_Start::Stage_Start(packet::MUID _uidPlayer, packet::MUID _uidStage, packet::int32 _nCountdown)
	: uidPlayer(_uidPlayer), uidStage(_uidStage), nCountdown(_nCountdown)
{
}

const char* Stage_Start::name() const
{
	return "Stage_Start";
}

const char* Stage_Start::doc() const
{
	return "Start Stage";
}

uint16_t Stage_Start::id() const
{
	return packetID;
}

Buffer Stage_Start::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		uidStage.serialize(),
		nCountdown.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_Map::Stage_Map(packet::MUID _uidStage, packet::string _MapName)
	: uidStage(_uidStage), MapName(_MapName)
{
}

const char* Stage_Map::name() const
{
	return "Stage_Map";
}

const char* Stage_Map::doc() const
{
	return "Change Map";
}

uint16_t Stage_Map::id() const
{
	return packetID;
}

Buffer Stage_Map::serialize() const
{
	Buffer serializedParameters[] = {
		uidStage.serialize(),
		MapName.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_Chat::Stage_Chat(packet::MUID _uidPlayer, packet::MUID _uidStage, packet::string _Chat)
	: uidPlayer(_uidPlayer), uidStage(_uidStage), Chat(_Chat)
{
}

const char* Stage_Chat::name() const
{
	return "Stage_Chat";
}

const char* Stage_Chat::doc() const
{
	return "Chat to Stage";
}

uint16_t Stage_Chat::id() const
{
	return packetID;
}

Buffer Stage_Chat::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		uidStage.serialize(),
		Chat.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_RequestQuickJoin::Stage_RequestQuickJoin(packet::MUID _uidPlayer, packet::blob _Param)
	: uidPlayer(_uidPlayer), Param(_Param)
{
}

const char* Stage_RequestQuickJoin::name() const
{
	return "Stage_RequestQuickJoin";
}

const char* Stage_RequestQuickJoin::doc() const
{
	return "Stage Request QuickJoin";
}

uint16_t Stage_RequestQuickJoin::id() const
{
	return packetID;
}

Buffer Stage_RequestQuickJoin::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		Param.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_ResponseQuickJoin::Stage_ResponseQuickJoin(packet::int32 _Result, packet::MUID _uidStage)
	: Result(_Result), uidStage(_uidStage)
{
}

const char* Stage_ResponseQuickJoin::name() const
{
	return "Stage_ResponseQuickJoin";
}

const char* Stage_ResponseQuickJoin::doc() const
{
	return "Stage Response QuickJoin";
}

uint16_t Stage_ResponseQuickJoin::id() const
{
	return packetID;
}

Buffer Stage_ResponseQuickJoin::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize(),
		uidStage.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_StageGo::Stage_StageGo(packet::uint32 _RoomNo)
	: RoomNo(_RoomNo)
{
}

const char* Stage_StageGo::name() const
{
	return "Stage_StageGo";
}

const char* Stage_StageGo::doc() const
{
	return "Stage Go";
}

uint16_t Stage_StageGo::id() const
{
	return packetID;
}

Buffer Stage_StageGo::serialize() const
{
	Buffer serializedParameters[] = {
		RoomNo.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_State::Stage_State(packet::MUID _uidPlayer, packet::MUID _uidStage, packet::int32 _nState, packet::int32 _zero)
	: uidPlayer(_uidPlayer), uidStage(_uidStage), nState(_nState), zero(_zero)
{
}

const char* Stage_State::name() const
{
	return "Stage_State";
}

const char* Stage_State::doc() const
{
	return "Change State In Stage";
}

uint16_t Stage_State::id() const
{
	return packetID;
}

Buffer Stage_State::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		uidStage.serialize(),
		nState.serialize(),
		zero.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_Team::Stage_Team(packet::MUID _uidPlayer, packet::MUID _uidStage, packet::uint32 _nTeam)
	: uidPlayer(_uidPlayer), uidStage(_uidStage), nTeam(_nTeam)
{
}

const char* Stage_Team::name() const
{
	return "Stage_Team";
}

const char* Stage_Team::doc() const
{
	return "Change Team";
}

uint16_t Stage_Team::id() const
{
	return packetID;
}

Buffer Stage_Team::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		uidStage.serialize(),
		nTeam.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_Master::Stage_Master(packet::MUID _uidStage, packet::MUID _uidPlayer)
	: uidStage(_uidStage), uidPlayer(_uidPlayer)
{
}

const char* Stage_Master::name() const
{
	return "Stage_Master";
}

const char* Stage_Master::doc() const
{
	return "Set Master";
}

uint16_t Stage_Master::id() const
{
	return packetID;
}

Buffer Stage_Master::serialize() const
{
	Buffer serializedParameters[] = {
		uidStage.serialize(),
		uidPlayer.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_ListStart::Stage_ListStart()
{
}

const char* Stage_ListStart::name() const
{
	return "Stage_ListStart";
}

const char* Stage_ListStart::doc() const
{
	return "Stage List transmit start";
}

uint16_t Stage_ListStart::id() const
{
	return packetID;
}

Buffer Stage_ListStart::serialize() const
{
	return Buffer(0);
}

Stage_ListStop::Stage_ListStop()
{
}

const char* Stage_ListStop::name() const
{
	return "Stage_ListStop";
}

const char* Stage_ListStop::doc() const
{
	return "Stage List transmit stop";
}

uint16_t Stage_ListStop::id() const
{
	return packetID;
}

Buffer Stage_ListStop::serialize() const
{
	return Buffer(0);
}

Stage_List::Stage_List(packet::vector _PrevStageListCount, packet::vector _NextStageListCount, packet::blob _StageList)
	: PrevStageListCount(_PrevStageListCount), NextStageListCount(_NextStageListCount), StageList(_StageList)
{
}

const char* Stage_List::name() const
{
	return "Stage_List";
}

const char* Stage_List::doc() const
{
	return "Stage List";
}

uint16_t Stage_List::id() const
{
	return packetID;
}

Buffer Stage_List::serialize() const
{
	Buffer serializedParameters[] = {
		PrevStageListCount.serialize(),
		NextStageListCount.serialize(),
		StageList.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_RequestStageList::Stage_RequestStageList(packet::MUID _uidPlayer, packet::MUID _uidChannel, packet::int32 _StageCursor)
	: uidPlayer(_uidPlayer), uidChannel(_uidChannel), StageCursor(_StageCursor)
{
}

const char* Stage_RequestStageList::name() const
{
	return "Stage_RequestStageList";
}

const char* Stage_RequestStageList::doc() const
{
	return "Request Stage List";
}

uint16_t Stage_RequestStageList::id() const
{
	return packetID;
}

Buffer Stage_RequestStageList::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		uidChannel.serialize(),
		StageCursor.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Channel_RequestPlayerList::Channel_RequestPlayerList(packet::MUID _uidPlayer, packet::MUID _uidChannel, packet::int32 _PlayerListPage)
	: uidPlayer(_uidPlayer), uidChannel(_uidChannel), PlayerListPage(_PlayerListPage)
{
}

const char* Channel_RequestPlayerList::name() const
{
	return "Channel_RequestPlayerList";
}

const char* Channel_RequestPlayerList::doc() const
{
	return "Request Channel Player List";
}

uint16_t Channel_RequestPlayerList::id() const
{
	return packetID;
}

Buffer Channel_RequestPlayerList::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		uidChannel.serialize(),
		PlayerListPage.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Channel_ResponsePlayerList::Channel_ResponsePlayerList(packet::uint8 _TotalPlayerCount, packet::uint8 _PlayerListPage, packet::blob _PlayerList)
	: TotalPlayerCount(_TotalPlayerCount), PlayerListPage(_PlayerListPage), PlayerList(_PlayerList)
{
}

const char* Channel_ResponsePlayerList::name() const
{
	return "Channel_ResponsePlayerList";
}

const char* Channel_ResponsePlayerList::doc() const
{
	return "Response Channel Player List";
}

uint16_t Channel_ResponsePlayerList::id() const
{
	return packetID;
}

Buffer Channel_ResponsePlayerList::serialize() const
{
	Buffer serializedParameters[] = {
		TotalPlayerCount.serialize(),
		PlayerListPage.serialize(),
		PlayerList.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_RequestStageSetting::Stage_RequestStageSetting(packet::MUID _uidStage)
	: uidStage(_uidStage)
{
}

const char* Stage_RequestStageSetting::name() const
{
	return "Stage_RequestStageSetting";
}

const char* Stage_RequestStageSetting::doc() const
{
	return "Request stage setting";
}

uint16_t Stage_RequestStageSetting::id() const
{
	return packetID;
}

Buffer Stage_RequestStageSetting::serialize() const
{
	Buffer serializedParameters[] = {
		uidStage.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_ResponseStageSetting::Stage_ResponseStageSetting(packet::MUID _uidStage, packet::blob _StageSetting, packet::blob _CharSetting, packet::int32 _StageState, packet::MUID _uidMaster)
	: uidStage(_uidStage), StageSetting(_StageSetting), CharSetting(_CharSetting), StageState(_StageState), uidMaster(_uidMaster)
{
}

const char* Stage_ResponseStageSetting::name() const
{
	return "Stage_ResponseStageSetting";
}

const char* Stage_ResponseStageSetting::doc() const
{
	return "Response stage setting";
}

uint16_t Stage_ResponseStageSetting::id() const
{
	return packetID;
}

Buffer Stage_ResponseStageSetting::serialize() const
{
	Buffer serializedParameters[] = {
		uidStage.serialize(),
		StageSetting.serialize(),
		CharSetting.serialize(),
		StageState.serialize(),
		uidMaster.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_StageSetting::Stage_StageSetting(packet::MUID _uidPlayer, packet::MUID _uidStage, packet::blob _StageSetting)
	: uidPlayer(_uidPlayer), uidStage(_uidStage), StageSetting(_StageSetting)
{
}

const char* Stage_StageSetting::name() const
{
	return "Stage_StageSetting";
}

const char* Stage_StageSetting::doc() const
{
	return "Setting up Stage";
}

uint16_t Stage_StageSetting::id() const
{
	return packetID;
}

Buffer Stage_StageSetting::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		uidStage.serialize(),
		StageSetting.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_Launch::Stage_Launch(packet::MUID _uidStage, packet::string _MapName)
	: uidStage(_uidStage), MapName(_MapName)
{
}

const char* Stage_Launch::name() const
{
	return "Stage_Launch";
}

const char* Stage_Launch::doc() const
{
	return "Launch Stage";
}

uint16_t Stage_Launch::id() const
{
	return packetID;
}

Buffer Stage_Launch::serialize() const
{
	Buffer serializedParameters[] = {
		uidStage.serialize(),
		MapName.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_Finish::Stage_Finish(packet::MUID _uidStage)
	: uidStage(_uidStage)
{
}

const char* Stage_Finish::name() const
{
	return "Stage_Finish";
}

const char* Stage_Finish::doc() const
{
	return "Finish Stage";
}

uint16_t Stage_Finish::id() const
{
	return packetID;
}

Buffer Stage_Finish::serialize() const
{
	Buffer serializedParameters[] = {
		uidStage.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_RequestPeerList::Stage_RequestPeerList(packet::MUID _uidPlayer, packet::MUID _uidStage)
	: uidPlayer(_uidPlayer), uidStage(_uidStage)
{
}

const char* Stage_RequestPeerList::name() const
{
	return "Stage_RequestPeerList";
}

const char* Stage_RequestPeerList::doc() const
{
	return "Request peer list";
}

uint16_t Stage_RequestPeerList::id() const
{
	return packetID;
}

Buffer Stage_RequestPeerList::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		uidStage.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_ResponsePeerList::Stage_ResponsePeerList(packet::MUID _uidStage, packet::blob _PeerList)
	: uidStage(_uidStage), PeerList(_PeerList)
{
}

const char* Stage_ResponsePeerList::name() const
{
	return "Stage_ResponsePeerList";
}

const char* Stage_ResponsePeerList::doc() const
{
	return "Response peer list";
}

uint16_t Stage_ResponsePeerList::id() const
{
	return packetID;
}

Buffer Stage_ResponsePeerList::serialize() const
{
	Buffer serializedParameters[] = {
		uidStage.serialize(),
		PeerList.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Loading_Complete::Loading_Complete(packet::MUID _ChrUID, packet::int32 _Percent)
	: ChrUID(_ChrUID), Percent(_Percent)
{
}

const char* Loading_Complete::name() const
{
	return "Loading_Complete";
}

const char* Loading_Complete::doc() const
{
	return "Loading Complete";
}

uint16_t Loading_Complete::id() const
{
	return packetID;
}

Buffer Loading_Complete::serialize() const
{
	Buffer serializedParameters[] = {
		ChrUID.serialize(),
		Percent.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_RequestPeerRelay::Match_RequestPeerRelay(packet::MUID _PlayerUID, packet::MUID _PeerCharUID)
	: PlayerUID(_PlayerUID), PeerCharUID(_PeerCharUID)
{
}

const char* Match_RequestPeerRelay::name() const
{
	return "Match_RequestPeerRelay";
}

const char* Match_RequestPeerRelay::doc() const
{
	return "Request Peer Relay";
}

uint16_t Match_RequestPeerRelay::id() const
{
	return packetID;
}

Buffer Match_RequestPeerRelay::serialize() const
{
	Buffer serializedParameters[] = {
		PlayerUID.serialize(),
		PeerCharUID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_ResponsePeerRelay::Match_ResponsePeerRelay(packet::MUID _PeerCharUID)
	: PeerCharUID(_PeerCharUID)
{
}

const char* Match_ResponsePeerRelay::name() const
{
	return "Match_ResponsePeerRelay";
}

const char* Match_ResponsePeerRelay::doc() const
{
	return "Response Peer Relay";
}

uint16_t Match_ResponsePeerRelay::id() const
{
	return packetID;
}

Buffer Match_ResponsePeerRelay::serialize() const
{
	Buffer serializedParameters[] = {
		PeerCharUID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_RoundState::Stage_RoundState(packet::MUID _uidStage, packet::int32 _nRound, packet::int32 _nState, packet::int32 _nArg)
	: uidStage(_uidStage), nRound(_nRound), nState(_nState), nArg(_nArg)
{
}

const char* Stage_RoundState::name() const
{
	return "Stage_RoundState";
}

const char* Stage_RoundState::doc() const
{
	return "Sync State of a StageRound";
}

uint16_t Stage_RoundState::id() const
{
	return packetID;
}

Buffer Stage_RoundState::serialize() const
{
	Buffer serializedParameters[] = {
		uidStage.serialize(),
		nRound.serialize(),
		nState.serialize(),
		nArg.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Game_Kill::Game_Kill(packet::MUID _Attacker)
	: Attacker(_Attacker)
{
}

const char* Game_Kill::name() const
{
	return "Game_Kill";
}

const char* Game_Kill::doc() const
{
	return "Object Die";
}

uint16_t Game_Kill::id() const
{
	return packetID;
}

Buffer Game_Kill::serialize() const
{
	Buffer serializedParameters[] = {
		Attacker.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Game_Requst_Spawn::Game_Requst_Spawn(packet::MUID _CharUID, packet::position _Position, packet::direction _Direction)
	: CharUID(_CharUID), Position(_Position), Direction(_Direction)
{
}

const char* Game_Requst_Spawn::name() const
{
	return "Game_Requst_Spawn";
}

const char* Game_Requst_Spawn::doc() const
{
	return "Request Spawn";
}

uint16_t Game_Requst_Spawn::id() const
{
	return packetID;
}

Buffer Game_Requst_Spawn::serialize() const
{
	Buffer serializedParameters[] = {
		CharUID.serialize(),
		Position.serialize(),
		Direction.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Game_LevelUp::Game_LevelUp(packet::MUID _Player, packet::int32 _Level)
	: Player(_Player), Level(_Level)
{
}

const char* Game_LevelUp::name() const
{
	return "Game_LevelUp";
}

const char* Game_LevelUp::doc() const
{
	return "Game.LevelUp";
}

uint16_t Game_LevelUp::id() const
{
	return packetID;
}

Buffer Game_LevelUp::serialize() const
{
	Buffer serializedParameters[] = {
		Player.serialize(),
		Level.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Game_LevelDown::Game_LevelDown(packet::MUID _Player, packet::int32 _Level)
	: Player(_Player), Level(_Level)
{
}

const char* Game_LevelDown::name() const
{
	return "Game_LevelDown";
}

const char* Game_LevelDown::doc() const
{
	return "Game.LevelDown";
}

uint16_t Game_LevelDown::id() const
{
	return packetID;
}

Buffer Game_LevelDown::serialize() const
{
	Buffer serializedParameters[] = {
		Player.serialize(),
		Level.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Game_Dead::Game_Dead(packet::MUID _Attacker, packet::uint32 _AttackerArg, packet::MUID _Victim, packet::uint32 _VictimArg)
	: Attacker(_Attacker), AttackerArg(_AttackerArg), Victim(_Victim), VictimArg(_VictimArg)
{
}

const char* Game_Dead::name() const
{
	return "Game_Dead";
}

const char* Game_Dead::doc() const
{
	return "Game.Dead";
}

uint16_t Game_Dead::id() const
{
	return packetID;
}

Buffer Game_Dead::serialize() const
{
	Buffer serializedParameters[] = {
		Attacker.serialize(),
		AttackerArg.serialize(),
		Victim.serialize(),
		VictimArg.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Game_TeamBonus::Game_TeamBonus(packet::MUID _CharUID, packet::uint32 _ExpArg)
	: CharUID(_CharUID), ExpArg(_ExpArg)
{
}

const char* Game_TeamBonus::name() const
{
	return "Game_TeamBonus";
}

const char* Game_TeamBonus::doc() const
{
	return "Game.TeamBonus";
}

uint16_t Game_TeamBonus::id() const
{
	return packetID;
}

Buffer Game_TeamBonus::serialize() const
{
	Buffer serializedParameters[] = {
		CharUID.serialize(),
		ExpArg.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Game_RequestTimeSync::Game_RequestTimeSync(packet::uint32 _LocalTimeStamp)
	: LocalTimeStamp(_LocalTimeStamp)
{
}

const char* Game_RequestTimeSync::name() const
{
	return "Game_RequestTimeSync";
}

const char* Game_RequestTimeSync::doc() const
{
	return "Request TimeSync for Game";
}

uint16_t Game_RequestTimeSync::id() const
{
	return packetID;
}

Buffer Game_RequestTimeSync::serialize() const
{
	Buffer serializedParameters[] = {
		LocalTimeStamp.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Game_ResponseTimeSync::Game_ResponseTimeSync(packet::uint32 _LocalTimeStamp, packet::uint32 _GlobalTimeStamp)
	: LocalTimeStamp(_LocalTimeStamp), GlobalTimeStamp(_GlobalTimeStamp)
{
}

const char* Game_ResponseTimeSync::name() const
{
	return "Game_ResponseTimeSync";
}

const char* Game_ResponseTimeSync::doc() const
{
	return "Response TimeSync for Game";
}

uint16_t Game_ResponseTimeSync::id() const
{
	return packetID;
}

Buffer Game_ResponseTimeSync::serialize() const
{
	Buffer serializedParameters[] = {
		LocalTimeStamp.serialize(),
		GlobalTimeStamp.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Game_ReportTimeSync::Game_ReportTimeSync(packet::uint32 _LocalTimeStamp, packet::uint32 _MemoryChecksum)
	: LocalTimeStamp(_LocalTimeStamp), MemoryChecksum(_MemoryChecksum)
{
}

const char* Game_ReportTimeSync::name() const
{
	return "Game_ReportTimeSync";
}

const char* Game_ReportTimeSync::doc() const
{
	return "Report TimeSync for Verify SpeedHack";
}

uint16_t Game_ReportTimeSync::id() const
{
	return packetID;
}

Buffer Game_ReportTimeSync::serialize() const
{
	Buffer serializedParameters[] = {
		LocalTimeStamp.serialize(),
		MemoryChecksum.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_RequestForcedEntry::Stage_RequestForcedEntry(packet::MUID _uidChar, packet::MUID _uidStage)
	: uidChar(_uidChar), uidStage(_uidStage)
{
}

const char* Stage_RequestForcedEntry::name() const
{
	return "Stage_RequestForcedEntry";
}

const char* Stage_RequestForcedEntry::doc() const
{
	return "Request Forced Entry";
}

uint16_t Stage_RequestForcedEntry::id() const
{
	return packetID;
}

Buffer Stage_RequestForcedEntry::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize(),
		uidStage.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_ResponseForcedEntry::Stage_ResponseForcedEntry(packet::int32 _Result)
	: Result(_Result)
{
}

const char* Stage_ResponseForcedEntry::name() const
{
	return "Stage_ResponseForcedEntry";
}

const char* Stage_ResponseForcedEntry::doc() const
{
	return "Response Forced Entry";
}

uint16_t Stage_ResponseForcedEntry::id() const
{
	return packetID;
}

Buffer Stage_ResponseForcedEntry::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Stage_RoundFinishInfo::Stage_RoundFinishInfo(packet::MUID _uidStage, packet::MUID _uidChar, packet::blob _PeerInfo, packet::blob _KillInfo)
	: uidStage(_uidStage), uidChar(_uidChar), PeerInfo(_PeerInfo), KillInfo(_KillInfo)
{
}

const char* Stage_RoundFinishInfo::name() const
{
	return "Stage_RoundFinishInfo";
}

const char* Stage_RoundFinishInfo::doc() const
{
	return "Update Round Finished Info";
}

uint16_t Stage_RoundFinishInfo::id() const
{
	return packetID;
}

Buffer Stage_RoundFinishInfo::serialize() const
{
	Buffer serializedParameters[] = {
		uidStage.serialize(),
		uidChar.serialize(),
		PeerInfo.serialize(),
		KillInfo.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Notify::Match_Notify(packet::uint32 _nMsgID)
	: nMsgID(_nMsgID)
{
}

const char* Match_Notify::name() const
{
	return "Match_Notify";
}

const char* Match_Notify::doc() const
{
	return "Notify Message";
}

uint16_t Match_Notify::id() const
{
	return packetID;
}

Buffer Match_Notify::serialize() const
{
	Buffer serializedParameters[] = {
		nMsgID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Whisper::Match_Whisper(packet::string _SenderName, packet::string _TargetName, packet::string _Message)
	: SenderName(_SenderName), TargetName(_TargetName), Message(_Message)
{
}

const char* Match_Whisper::name() const
{
	return "Match_Whisper";
}

const char* Match_Whisper::doc() const
{
	return "Whisper Message to a User";
}

uint16_t Match_Whisper::id() const
{
	return packetID;
}

Buffer Match_Whisper::serialize() const
{
	Buffer serializedParameters[] = {
		SenderName.serialize(),
		TargetName.serialize(),
		Message.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Where::Match_Where(packet::string _TargetName)
	: TargetName(_TargetName)
{
}

const char* Match_Where::name() const
{
	return "Match_Where";
}

const char* Match_Where::doc() const
{
	return "Ask Player Location";
}

uint16_t Match_Where::id() const
{
	return packetID;
}

Buffer Match_Where::serialize() const
{
	Buffer serializedParameters[] = {
		TargetName.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_UserOption::Match_UserOption(packet::uint32 _OptionFlags)
	: OptionFlags(_OptionFlags)
{
}

const char* Match_UserOption::name() const
{
	return "Match_UserOption";
}

const char* Match_UserOption::doc() const
{
	return "Set User Option";
}

uint16_t Match_UserOption::id() const
{
	return packetID;
}

Buffer Match_UserOption::serialize() const
{
	Buffer serializedParameters[] = {
		OptionFlags.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

ChatRoom_Create::ChatRoom_Create(packet::MUID _uidPlayer, packet::string _ChatRoomName)
	: uidPlayer(_uidPlayer), ChatRoomName(_ChatRoomName)
{
}

const char* ChatRoom_Create::name() const
{
	return "ChatRoom_Create";
}

const char* ChatRoom_Create::doc() const
{
	return "Create a ChatRoom";
}

uint16_t ChatRoom_Create::id() const
{
	return packetID;
}

Buffer ChatRoom_Create::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		ChatRoomName.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

ChatRoom_Join::ChatRoom_Join(packet::string _PlayerName, packet::string _ChatRoomName)
	: PlayerName(_PlayerName), ChatRoomName(_ChatRoomName)
{
}

const char* ChatRoom_Join::name() const
{
	return "ChatRoom_Join";
}

const char* ChatRoom_Join::doc() const
{
	return "Join a ChatRoom";
}

uint16_t ChatRoom_Join::id() const
{
	return packetID;
}

Buffer ChatRoom_Join::serialize() const
{
	Buffer serializedParameters[] = {
		PlayerName.serialize(),
		ChatRoomName.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

ChatRoom_Leave::ChatRoom_Leave(packet::string _PlayerName, packet::string _ChatRoomName)
	: PlayerName(_PlayerName), ChatRoomName(_ChatRoomName)
{
}

const char* ChatRoom_Leave::name() const
{
	return "ChatRoom_Leave";
}

const char* ChatRoom_Leave::doc() const
{
	return "Leave a Chat Room";
}

uint16_t ChatRoom_Leave::id() const
{
	return packetID;
}

Buffer ChatRoom_Leave::serialize() const
{
	Buffer serializedParameters[] = {
		PlayerName.serialize(),
		ChatRoomName.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

ChatRoom_SelectWrite::ChatRoom_SelectWrite(packet::string _ChatRoomName)
	: ChatRoomName(_ChatRoomName)
{
}

const char* ChatRoom_SelectWrite::name() const
{
	return "ChatRoom_SelectWrite";
}

const char* ChatRoom_SelectWrite::doc() const
{
	return "Select ChatRoom to Write";
}

uint16_t ChatRoom_SelectWrite::id() const
{
	return packetID;
}

Buffer ChatRoom_SelectWrite::serialize() const
{
	Buffer serializedParameters[] = {
		ChatRoomName.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

ChatRoom_Invite::ChatRoom_Invite(packet::string _SenderName, packet::string _TargetName, packet::string _ChatRoomName)
	: SenderName(_SenderName), TargetName(_TargetName), ChatRoomName(_ChatRoomName)
{
}

const char* ChatRoom_Invite::name() const
{
	return "ChatRoom_Invite";
}

const char* ChatRoom_Invite::doc() const
{
	return "Invite a user to ChatRoom";
}

uint16_t ChatRoom_Invite::id() const
{
	return packetID;
}

Buffer ChatRoom_Invite::serialize() const
{
	Buffer serializedParameters[] = {
		SenderName.serialize(),
		TargetName.serialize(),
		ChatRoomName.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

ChatRoom_Chat::ChatRoom_Chat(packet::string _ChatRoomName, packet::string _SenderName, packet::string _Message)
	: ChatRoomName(_ChatRoomName), SenderName(_SenderName), Message(_Message)
{
}

const char* ChatRoom_Chat::name() const
{
	return "ChatRoom_Chat";
}

const char* ChatRoom_Chat::doc() const
{
	return "ChatRoom Chat";
}

uint16_t ChatRoom_Chat::id() const
{
	return packetID;
}

Buffer ChatRoom_Chat::serialize() const
{
	Buffer serializedParameters[] = {
		ChatRoomName.serialize(),
		SenderName.serialize(),
		Message.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_RequestAccountCharList::Match_RequestAccountCharList(packet::blob _EMsg)
	: EMsg(_EMsg)
{
}

const char* Match_RequestAccountCharList::name() const
{
	return "Match_RequestAccountCharList";
}

const char* Match_RequestAccountCharList::doc() const
{
	return "Request Account Character List";
}

uint16_t Match_RequestAccountCharList::id() const
{
	return packetID;
}

Buffer Match_RequestAccountCharList::serialize() const
{
	Buffer serializedParameters[] = {
		EMsg.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_ResponseAccountCharList::Match_ResponseAccountCharList(packet::blob _CharList)
	: CharList(_CharList)
{
}

const char* Match_ResponseAccountCharList::name() const
{
	return "Match_ResponseAccountCharList";
}

const char* Match_ResponseAccountCharList::doc() const
{
	return "Response Account Character List";
}

uint16_t Match_ResponseAccountCharList::id() const
{
	return packetID;
}

Buffer Match_ResponseAccountCharList::serialize() const
{
	Buffer serializedParameters[] = {
		CharList.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_RequestAccountCharInfo::Match_RequestAccountCharInfo(packet::vector _CharNum, packet::int32 __0B)
	: CharNum(_CharNum), _0B(__0B)
{
}

const char* Match_RequestAccountCharInfo::name() const
{
	return "Match_RequestAccountCharInfo";
}

const char* Match_RequestAccountCharInfo::doc() const
{
	return "Request Account Character Info";
}

uint16_t Match_RequestAccountCharInfo::id() const
{
	return packetID;
}

Buffer Match_RequestAccountCharInfo::serialize() const
{
	Buffer serializedParameters[] = {
		CharNum.serialize(),
		_0B.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_ResponseAccountCharInfo::Match_ResponseAccountCharInfo(packet::vector _CharNum, packet::blob _CharInfo)
	: CharNum(_CharNum), CharInfo(_CharInfo)
{
}

const char* Match_ResponseAccountCharInfo::name() const
{
	return "Match_ResponseAccountCharInfo";
}

const char* Match_ResponseAccountCharInfo::doc() const
{
	return "Response Account Character Info";
}

uint16_t Match_ResponseAccountCharInfo::id() const
{
	return packetID;
}

Buffer Match_ResponseAccountCharInfo::serialize() const
{
	Buffer serializedParameters[] = {
		CharNum.serialize(),
		CharInfo.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_RequestSelectChar::Match_RequestSelectChar(packet::MUID _uid, packet::uint32 _CharIndex, packet::int32 _one)
	: uid(_uid), CharIndex(_CharIndex), one(_one)
{
}

const char* Match_RequestSelectChar::name() const
{
	return "Match_RequestSelectChar";
}

const char* Match_RequestSelectChar::doc() const
{
	return "Request Select Character";
}

uint16_t Match_RequestSelectChar::id() const
{
	return packetID;
}

Buffer Match_RequestSelectChar::serialize() const
{
	Buffer serializedParameters[] = {
		uid.serialize(),
		CharIndex.serialize(),
		one.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_ResponseSelectChar::Match_ResponseSelectChar(packet::int32 _Result, packet::blob _CharInfo, packet::blob _MyExtraCharInfo)
	: Result(_Result), CharInfo(_CharInfo), MyExtraCharInfo(_MyExtraCharInfo)
{
}

const char* Match_ResponseSelectChar::name() const
{
	return "Match_ResponseSelectChar";
}

const char* Match_ResponseSelectChar::doc() const
{
	return "Response Select Character";
}

uint16_t Match_ResponseSelectChar::id() const
{
	return packetID;
}

Buffer Match_ResponseSelectChar::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize(),
		CharInfo.serialize(),
		MyExtraCharInfo.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_RequestCharInfo::Match_RequestCharInfo(packet::MUID _uid, packet::uint32 _CharIndex)
	: uid(_uid), CharIndex(_CharIndex)
{
}

const char* Match_RequestCharInfo::name() const
{
	return "Match_RequestCharInfo";
}

const char* Match_RequestCharInfo::doc() const
{
	return "Request Character Info";
}

uint16_t Match_RequestCharInfo::id() const
{
	return packetID;
}

Buffer Match_RequestCharInfo::serialize() const
{
	Buffer serializedParameters[] = {
		uid.serialize(),
		CharIndex.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_ResponseCharInfo::Match_ResponseCharInfo(packet::MUID _uid, packet::blob _CharInfo)
	: uid(_uid), CharInfo(_CharInfo)
{
}

const char* Match_ResponseCharInfo::name() const
{
	return "Match_ResponseCharInfo";
}

const char* Match_ResponseCharInfo::doc() const
{
	return "Response Character Info";
}

uint16_t Match_ResponseCharInfo::id() const
{
	return packetID;
}

Buffer Match_ResponseCharInfo::serialize() const
{
	Buffer serializedParameters[] = {
		uid.serialize(),
		CharInfo.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_RequestDeleteChar::Match_RequestDeleteChar(packet::MUID _uid, packet::uint32 _CharIndex, packet::int32 _one, packet::string _CharName)
	: uid(_uid), CharIndex(_CharIndex), one(_one), CharName(_CharName)
{
}

const char* Match_RequestDeleteChar::name() const
{
	return "Match_RequestDeleteChar";
}

const char* Match_RequestDeleteChar::doc() const
{
	return "Request Delete Character";
}

uint16_t Match_RequestDeleteChar::id() const
{
	return packetID;
}

Buffer Match_RequestDeleteChar::serialize() const
{
	Buffer serializedParameters[] = {
		uid.serialize(),
		CharIndex.serialize(),
		one.serialize(),
		CharName.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_ResponseDeleteChar::Match_ResponseDeleteChar(packet::int32 _Result)
	: Result(_Result)
{
}

const char* Match_ResponseDeleteChar::name() const
{
	return "Match_ResponseDeleteChar";
}

const char* Match_ResponseDeleteChar::doc() const
{
	return "Response Delete Character";
}

uint16_t Match_ResponseDeleteChar::id() const
{
	return packetID;
}

Buffer Match_ResponseDeleteChar::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_RequestCreateChar::Match_RequestCreateChar(packet::MUID _uid, packet::uint32 _CharIndex, packet::int32 _one, packet::string _Name, packet::uint32 _Sex, packet::uint32 _Hair, packet::uint32 _Face, packet::uint32 _Costume)
	: uid(_uid), CharIndex(_CharIndex), one(_one), Name(_Name), Sex(_Sex), Hair(_Hair), Face(_Face), Costume(_Costume)
{
}

const char* Match_RequestCreateChar::name() const
{
	return "Match_RequestCreateChar";
}

const char* Match_RequestCreateChar::doc() const
{
	return "Request Create Character";
}

uint16_t Match_RequestCreateChar::id() const
{
	return packetID;
}

Buffer Match_RequestCreateChar::serialize() const
{
	Buffer serializedParameters[] = {
		uid.serialize(),
		CharIndex.serialize(),
		one.serialize(),
		Name.serialize(),
		Sex.serialize(),
		Hair.serialize(),
		Face.serialize(),
		Costume.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_ResponseCreateChar::Match_ResponseCreateChar(packet::int32 _Result, packet::string _CharName)
	: Result(_Result), CharName(_CharName)
{
}

const char* Match_ResponseCreateChar::name() const
{
	return "Match_ResponseCreateChar";
}

const char* Match_ResponseCreateChar::doc() const
{
	return "Response Create Character";
}

uint16_t Match_ResponseCreateChar::id() const
{
	return packetID;
}

Buffer Match_ResponseCreateChar::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize(),
		CharName.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_RequestBuyItem::Match_RequestBuyItem(packet::MUID _uidChar, packet::uint32 _ItemID)
	: uidChar(_uidChar), ItemID(_ItemID)
{
}

const char* Match_RequestBuyItem::name() const
{
	return "Match_RequestBuyItem";
}

const char* Match_RequestBuyItem::doc() const
{
	return "Request Buy Item";
}

uint16_t Match_RequestBuyItem::id() const
{
	return packetID;
}

Buffer Match_RequestBuyItem::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize(),
		ItemID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_ResponseBuyItem::Match_ResponseBuyItem(packet::int32 _result)
	: result(_result)
{
}

const char* Match_ResponseBuyItem::name() const
{
	return "Match_ResponseBuyItem";
}

const char* Match_ResponseBuyItem::doc() const
{
	return "Response Buy Item";
}

uint16_t Match_ResponseBuyItem::id() const
{
	return packetID;
}

Buffer Match_ResponseBuyItem::serialize() const
{
	Buffer serializedParameters[] = {
		result.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_RequestSellItem::Match_RequestSellItem(packet::MUID _uidChar, packet::MUID _uidItem)
	: uidChar(_uidChar), uidItem(_uidItem)
{
}

const char* Match_RequestSellItem::name() const
{
	return "Match_RequestSellItem";
}

const char* Match_RequestSellItem::doc() const
{
	return "Request Sell Item";
}

uint16_t Match_RequestSellItem::id() const
{
	return packetID;
}

Buffer Match_RequestSellItem::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize(),
		uidItem.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_ResponseSellItem::Match_ResponseSellItem(packet::int32 _result)
	: result(_result)
{
}

const char* Match_ResponseSellItem::name() const
{
	return "Match_ResponseSellItem";
}

const char* Match_ResponseSellItem::doc() const
{
	return "Response Sell Item";
}

uint16_t Match_ResponseSellItem::id() const
{
	return packetID;
}

Buffer Match_ResponseSellItem::serialize() const
{
	Buffer serializedParameters[] = {
		result.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_RequestShopItemList::Match_RequestShopItemList(packet::MUID _uid, packet::int32 _FirstItemIndex, packet::int32 _ItemCount)
	: uid(_uid), FirstItemIndex(_FirstItemIndex), ItemCount(_ItemCount)
{
}

const char* Match_RequestShopItemList::name() const
{
	return "Match_RequestShopItemList";
}

const char* Match_RequestShopItemList::doc() const
{
	return "Request Shop Item List";
}

uint16_t Match_RequestShopItemList::id() const
{
	return packetID;
}

Buffer Match_RequestShopItemList::serialize() const
{
	Buffer serializedParameters[] = {
		uid.serialize(),
		FirstItemIndex.serialize(),
		ItemCount.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_ResponseShopItemList::Match_ResponseShopItemList(packet::blob _GambleItemList, packet::blob _ItemList)
	: GambleItemList(_GambleItemList), ItemList(_ItemList)
{
}

const char* Match_ResponseShopItemList::name() const
{
	return "Match_ResponseShopItemList";
}

const char* Match_ResponseShopItemList::doc() const
{
	return "Response Shop Item List";
}

uint16_t Match_ResponseShopItemList::id() const
{
	return packetID;
}

Buffer Match_ResponseShopItemList::serialize() const
{
	Buffer serializedParameters[] = {
		GambleItemList.serialize(),
		ItemList.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_RequestCharacterItemList::Match_RequestCharacterItemList(packet::MUID _uid)
	: uid(_uid)
{
}

const char* Match_RequestCharacterItemList::name() const
{
	return "Match_RequestCharacterItemList";
}

const char* Match_RequestCharacterItemList::doc() const
{
	return "Request Character Item List";
}

uint16_t Match_RequestCharacterItemList::id() const
{
	return packetID;
}

Buffer Match_RequestCharacterItemList::serialize() const
{
	Buffer serializedParameters[] = {
		uid.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_RequestCharacterItemListForce::Match_RequestCharacterItemListForce(packet::MUID _uid)
	: uid(_uid)
{
}

const char* Match_RequestCharacterItemListForce::name() const
{
	return "Match_RequestCharacterItemListForce";
}

const char* Match_RequestCharacterItemListForce::doc() const
{
	return "Request Character Item List NonPrevent Duplicate Send";
}

uint16_t Match_RequestCharacterItemListForce::id() const
{
	return packetID;
}

Buffer Match_RequestCharacterItemListForce::serialize() const
{
	Buffer serializedParameters[] = {
		uid.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_ResponseCharacterItemList::Match_ResponseCharacterItemList(packet::int32 _Bounty, packet::blob _EquipItemList, packet::blob _ItemList, packet::blob _GambleItemList)
	: Bounty(_Bounty), EquipItemList(_EquipItemList), ItemList(_ItemList), GambleItemList(_GambleItemList)
{
}

const char* Match_ResponseCharacterItemList::name() const
{
	return "Match_ResponseCharacterItemList";
}

const char* Match_ResponseCharacterItemList::doc() const
{
	return "Response Character Item List";
}

uint16_t Match_ResponseCharacterItemList::id() const
{
	return packetID;
}

Buffer Match_ResponseCharacterItemList::serialize() const
{
	Buffer serializedParameters[] = {
		Bounty.serialize(),
		EquipItemList.serialize(),
		ItemList.serialize(),
		GambleItemList.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

MatchRequestEquipItem::MatchRequestEquipItem(packet::MUID _uidChar, packet::MUID _uidItem, packet::uint32 _EquipmentSlot, packet::int32 _one)
	: uidChar(_uidChar), uidItem(_uidItem), EquipmentSlot(_EquipmentSlot), one(_one)
{
}

const char* MatchRequestEquipItem::name() const
{
	return "MatchRequestEquipItem";
}

const char* MatchRequestEquipItem::doc() const
{
	return "Request Equip Item";
}

uint16_t MatchRequestEquipItem::id() const
{
	return packetID;
}

Buffer MatchRequestEquipItem::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize(),
		uidItem.serialize(),
		EquipmentSlot.serialize(),
		one.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

MatchResponseEquipItem::MatchResponseEquipItem(packet::int32 _Result)
	: Result(_Result)
{
}

const char* MatchResponseEquipItem::name() const
{
	return "MatchResponseEquipItem";
}

const char* MatchResponseEquipItem::doc() const
{
	return "Response Equip Item";
}

uint16_t MatchResponseEquipItem::id() const
{
	return packetID;
}

Buffer MatchResponseEquipItem::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

MatchRequestTakeoffItem::MatchRequestTakeoffItem(packet::MUID _uid, packet::uint32 _EquipmentSlot, packet::int32 _one)
	: uid(_uid), EquipmentSlot(_EquipmentSlot), one(_one)
{
}

const char* MatchRequestTakeoffItem::name() const
{
	return "MatchRequestTakeoffItem";
}

const char* MatchRequestTakeoffItem::doc() const
{
	return "Request Takeoff Item";
}

uint16_t MatchRequestTakeoffItem::id() const
{
	return packetID;
}

Buffer MatchRequestTakeoffItem::serialize() const
{
	Buffer serializedParameters[] = {
		uid.serialize(),
		EquipmentSlot.serialize(),
		one.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

MatchResponseTakeoffItem::MatchResponseTakeoffItem(packet::int32 _Result)
	: Result(_Result)
{
}

const char* MatchResponseTakeoffItem::name() const
{
	return "MatchResponseTakeoffItem";
}

const char* MatchResponseTakeoffItem::doc() const
{
	return "Response Takeoff Item";
}

uint16_t MatchResponseTakeoffItem::id() const
{
	return packetID;
}

Buffer MatchResponseTakeoffItem::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_RequestAccountItemList::Match_RequestAccountItemList(packet::MUID _uid)
	: uid(_uid)
{
}

const char* Match_RequestAccountItemList::name() const
{
	return "Match_RequestAccountItemList";
}

const char* Match_RequestAccountItemList::doc() const
{
	return "Request Account Item List";
}

uint16_t Match_RequestAccountItemList::id() const
{
	return packetID;
}

Buffer Match_RequestAccountItemList::serialize() const
{
	Buffer serializedParameters[] = {
		uid.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_ResponseAccountItemList::Match_ResponseAccountItemList(packet::blob _ItemList)
	: ItemList(_ItemList)
{
}

const char* Match_ResponseAccountItemList::name() const
{
	return "Match_ResponseAccountItemList";
}

const char* Match_ResponseAccountItemList::doc() const
{
	return "Response Account Item List";
}

uint16_t Match_ResponseAccountItemList::id() const
{
	return packetID;
}

Buffer Match_ResponseAccountItemList::serialize() const
{
	Buffer serializedParameters[] = {
		ItemList.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_RequestBringAccountItem::Match_RequestBringAccountItem(packet::MUID _uidChar, packet::int32 _AIID)
	: uidChar(_uidChar), AIID(_AIID)
{
}

const char* Match_RequestBringAccountItem::name() const
{
	return "Match_RequestBringAccountItem";
}

const char* Match_RequestBringAccountItem::doc() const
{
	return "Request Bring Account Item";
}

uint16_t Match_RequestBringAccountItem::id() const
{
	return packetID;
}

Buffer Match_RequestBringAccountItem::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize(),
		AIID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_ResponseBringAccountItem::Match_ResponseBringAccountItem(packet::int32 _Result)
	: Result(_Result)
{
}

const char* Match_ResponseBringAccountItem::name() const
{
	return "Match_ResponseBringAccountItem";
}

const char* Match_ResponseBringAccountItem::doc() const
{
	return "Response Bring Account Item";
}

uint16_t Match_ResponseBringAccountItem::id() const
{
	return packetID;
}

Buffer Match_ResponseBringAccountItem::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_RequestBringBackAccountItem::Match_RequestBringBackAccountItem(packet::MUID _uidChar, packet::MUID _uidItem)
	: uidChar(_uidChar), uidItem(_uidItem)
{
}

const char* Match_RequestBringBackAccountItem::name() const
{
	return "Match_RequestBringBackAccountItem";
}

const char* Match_RequestBringBackAccountItem::doc() const
{
	return "Request BringBack Account Item";
}

uint16_t Match_RequestBringBackAccountItem::id() const
{
	return packetID;
}

Buffer Match_RequestBringBackAccountItem::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize(),
		uidItem.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_ResponseBringBackAccountItem::Match_ResponseBringBackAccountItem(packet::int32 _Result)
	: Result(_Result)
{
}

const char* Match_ResponseBringBackAccountItem::name() const
{
	return "Match_ResponseBringBackAccountItem";
}

const char* Match_ResponseBringBackAccountItem::doc() const
{
	return "Response BringBack Account Item";
}

uint16_t Match_ResponseBringBackAccountItem::id() const
{
	return packetID;
}

Buffer Match_ResponseBringBackAccountItem::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_ExpiredRentItem::Match_ExpiredRentItem(packet::blob _ItemIDList)
	: ItemIDList(_ItemIDList)
{
}

const char* Match_ExpiredRentItem::name() const
{
	return "Match_ExpiredRentItem";
}

const char* Match_ExpiredRentItem::doc() const
{
	return "Match.Expired Rent Item";
}

uint16_t Match_ExpiredRentItem::id() const
{
	return packetID;
}

Buffer Match_ExpiredRentItem::serialize() const
{
	Buffer serializedParameters[] = {
		ItemIDList.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_ItemGamble::Match_ItemGamble(packet::MUID _uidItem)
	: uidItem(_uidItem)
{
}

const char* Match_ItemGamble::name() const
{
	return "Match_ItemGamble";
}

const char* Match_ItemGamble::doc() const
{
	return "Request Item Gamble";
}

uint16_t Match_ItemGamble::id() const
{
	return packetID;
}

Buffer Match_ItemGamble::serialize() const
{
	Buffer serializedParameters[] = {
		uidItem.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_GambleResultItem::Match_GambleResultItem(packet::uint32 _ItemID, packet::uint32 _RentHourPeriodTimes60)
	: ItemID(_ItemID), RentHourPeriodTimes60(_RentHourPeriodTimes60)
{
}

const char* Match_GambleResultItem::name() const
{
	return "Match_GambleResultItem";
}

const char* Match_GambleResultItem::doc() const
{
	return "Response Item Gamble Result Item";
}

uint16_t Match_GambleResultItem::id() const
{
	return packetID;
}

Buffer Match_GambleResultItem::serialize() const
{
	Buffer serializedParameters[] = {
		ItemID.serialize(),
		RentHourPeriodTimes60.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Request_Suicide::Match_Request_Suicide(packet::MUID _uidChar)
	: uidChar(_uidChar)
{
}

const char* Match_Request_Suicide::name() const
{
	return "Match_Request_Suicide";
}

const char* Match_Request_Suicide::doc() const
{
	return "Request Suicide";
}

uint16_t Match_Request_Suicide::id() const
{
	return packetID;
}

Buffer Match_Request_Suicide::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Response_Suicide::Match_Response_Suicide(packet::int32 _Result, packet::MUID _uidChar)
	: Result(_Result), uidChar(_uidChar)
{
}

const char* Match_Response_Suicide::name() const
{
	return "Match_Response_Suicide";
}

const char* Match_Response_Suicide::doc() const
{
	return "Response Suicide";
}

uint16_t Match_Response_Suicide::id() const
{
	return packetID;
}

Buffer Match_Response_Suicide::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize(),
		uidChar.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Response_SuicideReserve::Match_Response_SuicideReserve()
{
}

const char* Match_Response_SuicideReserve::name() const
{
	return "Match_Response_SuicideReserve";
}

const char* Match_Response_SuicideReserve::doc() const
{
	return "response suicide reserve";
}

uint16_t Match_Response_SuicideReserve::id() const
{
	return packetID;
}

Buffer Match_Response_SuicideReserve::serialize() const
{
	return Buffer(0);
}

Match_Request_Obtain_WorldItem::Match_Request_Obtain_WorldItem(packet::MUID _uidChar, packet::int32 _nItemUID)
	: uidChar(_uidChar), nItemUID(_nItemUID)
{
}

const char* Match_Request_Obtain_WorldItem::name() const
{
	return "Match_Request_Obtain_WorldItem";
}

const char* Match_Request_Obtain_WorldItem::doc() const
{
	return "Request Obtain WorldItem";
}

uint16_t Match_Request_Obtain_WorldItem::id() const
{
	return packetID;
}

Buffer Match_Request_Obtain_WorldItem::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize(),
		nItemUID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_WorldItem_Obtain::Match_WorldItem_Obtain(packet::MUID _uidChar, packet::int32 _nItemUID)
	: uidChar(_uidChar), nItemUID(_nItemUID)
{
}

const char* Match_WorldItem_Obtain::name() const
{
	return "Match_WorldItem_Obtain";
}

const char* Match_WorldItem_Obtain::doc() const
{
	return "Obtain WorldItem";
}

uint16_t Match_WorldItem_Obtain::id() const
{
	return packetID;
}

Buffer Match_WorldItem_Obtain::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize(),
		nItemUID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_WorldItem_Spawn::Match_WorldItem_Spawn(packet::blob _SpawnInfo)
	: SpawnInfo(_SpawnInfo)
{
}

const char* Match_WorldItem_Spawn::name() const
{
	return "Match_WorldItem_Spawn";
}

const char* Match_WorldItem_Spawn::doc() const
{
	return "Spawn WorldItem";
}

uint16_t Match_WorldItem_Spawn::id() const
{
	return packetID;
}

Buffer Match_WorldItem_Spawn::serialize() const
{
	Buffer serializedParameters[] = {
		SpawnInfo.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Request_Spawn_WorldItem::Match_Request_Spawn_WorldItem(packet::MUID _uidChar, packet::int32 _ItemID, packet::position _ItemPos, packet::floating_point _ItemDropDelayTime)
	: uidChar(_uidChar), ItemID(_ItemID), ItemPos(_ItemPos), ItemDropDelayTime(_ItemDropDelayTime)
{
}

const char* Match_Request_Spawn_WorldItem::name() const
{
	return "Match_Request_Spawn_WorldItem";
}

const char* Match_Request_Spawn_WorldItem::doc() const
{
	return "Request Spawn WorldItem";
}

uint16_t Match_Request_Spawn_WorldItem::id() const
{
	return packetID;
}

Buffer Match_Request_Spawn_WorldItem::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize(),
		ItemID.serialize(),
		ItemPos.serialize(),
		ItemDropDelayTime.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Request_Spawn_WorldItem_UID::Match_Request_Spawn_WorldItem_UID(packet::int32 _nWorldItemUID)
	: nWorldItemUID(_nWorldItemUID)
{
}

const char* Match_Request_Spawn_WorldItem_UID::name() const
{
	return "Match_Request_Spawn_WorldItem_UID";
}

const char* Match_Request_Spawn_WorldItem_UID::doc() const
{
	return "Request Spawn WorldItem";
}

uint16_t Match_Request_Spawn_WorldItem_UID::id() const
{
	return packetID;
}

Buffer Match_Request_Spawn_WorldItem_UID::serialize() const
{
	Buffer serializedParameters[] = {
		nWorldItemUID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Reset_TeamMembers::Match_Reset_TeamMembers(packet::blob _TeamMemberData)
	: TeamMemberData(_TeamMemberData)
{
}

const char* Match_Reset_TeamMembers::name() const
{
	return "Match_Reset_TeamMembers";
}

const char* Match_Reset_TeamMembers::doc() const
{
	return "Reset Team Members";
}

uint16_t Match_Reset_TeamMembers::id() const
{
	return packetID;
}

Buffer Match_Reset_TeamMembers::serialize() const
{
	Buffer serializedParameters[] = {
		TeamMemberData.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Assign_Commander::Match_Assign_Commander(packet::MUID _uidRedCommander, packet::MUID _uidBlueCommander)
	: uidRedCommander(_uidRedCommander), uidBlueCommander(_uidBlueCommander)
{
}

const char* Match_Assign_Commander::name() const
{
	return "Match_Assign_Commander";
}

const char* Match_Assign_Commander::doc() const
{
	return "Assign Commander";
}

uint16_t Match_Assign_Commander::id() const
{
	return packetID;
}

Buffer Match_Assign_Commander::serialize() const
{
	Buffer serializedParameters[] = {
		uidRedCommander.serialize(),
		uidBlueCommander.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Set_Observer::Match_Set_Observer(packet::MUID _uidChar)
	: uidChar(_uidChar)
{
}

const char* Match_Set_Observer::name() const
{
	return "Match_Set_Observer";
}

const char* Match_Set_Observer::doc() const
{
	return "Set Observer";
}

uint16_t Match_Set_Observer::id() const
{
	return packetID;
}

Buffer Match_Set_Observer::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Ladder_Request_Challenge::Match_Ladder_Request_Challenge(packet::int32 _MemberCount, packet::uint32 _Options, packet::blob _MemberNames)
	: MemberCount(_MemberCount), Options(_Options), MemberNames(_MemberNames)
{
}

const char* Match_Ladder_Request_Challenge::name() const
{
	return "Match_Ladder_Request_Challenge";
}

const char* Match_Ladder_Request_Challenge::doc() const
{
	return "Request Challenge a Ladder";
}

uint16_t Match_Ladder_Request_Challenge::id() const
{
	return packetID;
}

Buffer Match_Ladder_Request_Challenge::serialize() const
{
	Buffer serializedParameters[] = {
		MemberCount.serialize(),
		Options.serialize(),
		MemberNames.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Ladder_Response_Challenge::Match_Ladder_Response_Challenge(packet::int32 _Result)
	: Result(_Result)
{
}

const char* Match_Ladder_Response_Challenge::name() const
{
	return "Match_Ladder_Response_Challenge";
}

const char* Match_Ladder_Response_Challenge::doc() const
{
	return "Response Challenge a Ladder";
}

uint16_t Match_Ladder_Response_Challenge::id() const
{
	return packetID;
}

Buffer Match_Ladder_Response_Challenge::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Ladder_SearchRival::Match_Ladder_SearchRival()
{
}

const char* Match_Ladder_SearchRival::name() const
{
	return "Match_Ladder_SearchRival";
}

const char* Match_Ladder_SearchRival::doc() const
{
	return "Search a Ladder Rival";
}

uint16_t Match_Ladder_SearchRival::id() const
{
	return packetID;
}

Buffer Match_Ladder_SearchRival::serialize() const
{
	return Buffer(0);
}

Match_Ladder_Request_CancelChallenge::Match_Ladder_Request_CancelChallenge()
{
}

const char* Match_Ladder_Request_CancelChallenge::name() const
{
	return "Match_Ladder_Request_CancelChallenge";
}

const char* Match_Ladder_Request_CancelChallenge::doc() const
{
	return "Request Cancel Challenge";
}

uint16_t Match_Ladder_Request_CancelChallenge::id() const
{
	return packetID;
}

Buffer Match_Ladder_Request_CancelChallenge::serialize() const
{
	return Buffer(0);
}

Match_Ladder_CancelChallenge::Match_Ladder_CancelChallenge(packet::string _CharName)
	: CharName(_CharName)
{
}

const char* Match_Ladder_CancelChallenge::name() const
{
	return "Match_Ladder_CancelChallenge";
}

const char* Match_Ladder_CancelChallenge::doc() const
{
	return "Cancel Ladder Challenge";
}

uint16_t Match_Ladder_CancelChallenge::id() const
{
	return packetID;
}

Buffer Match_Ladder_CancelChallenge::serialize() const
{
	Buffer serializedParameters[] = {
		CharName.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Ladder_Prepare::Ladder_Prepare(packet::MUID _uidStage, packet::int32 _nTeam)
	: uidStage(_uidStage), nTeam(_nTeam)
{
}

const char* Ladder_Prepare::name() const
{
	return "Ladder_Prepare";
}

const char* Ladder_Prepare::doc() const
{
	return "Prepare Ladder Game";
}

uint16_t Ladder_Prepare::id() const
{
	return packetID;
}

Buffer Ladder_Prepare::serialize() const
{
	Buffer serializedParameters[] = {
		uidStage.serialize(),
		nTeam.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Ladder_Launch::Ladder_Launch(packet::MUID _uidStage, packet::string _MapName)
	: uidStage(_uidStage), MapName(_MapName)
{
}

const char* Ladder_Launch::name() const
{
	return "Ladder_Launch";
}

const char* Ladder_Launch::doc() const
{
	return "Launch Ladder Game";
}

uint16_t Ladder_Launch::id() const
{
	return packetID;
}

Buffer Ladder_Launch::serialize() const
{
	Buffer serializedParameters[] = {
		uidStage.serialize(),
		MapName.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_RequestProposal::Match_RequestProposal(packet::MUID _uidChar, packet::int32 _ProposalMode, packet::int32 _RequestID, packet::int32 _ReplierCount, packet::blob _ReplierCharNames)
	: uidChar(_uidChar), ProposalMode(_ProposalMode), RequestID(_RequestID), ReplierCount(_ReplierCount), ReplierCharNames(_ReplierCharNames)
{
}

const char* Match_RequestProposal::name() const
{
	return "Match_RequestProposal";
}

const char* Match_RequestProposal::doc() const
{
	return "Request Proposal";
}

uint16_t Match_RequestProposal::id() const
{
	return packetID;
}

Buffer Match_RequestProposal::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize(),
		ProposalMode.serialize(),
		RequestID.serialize(),
		ReplierCount.serialize(),
		ReplierCharNames.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_ResponseProposal::Match_ResponseProposal(packet::int32 _Result, packet::int32 _ProposalMode, packet::int32 _RequestID)
	: Result(_Result), ProposalMode(_ProposalMode), RequestID(_RequestID)
{
}

const char* Match_ResponseProposal::name() const
{
	return "Match_ResponseProposal";
}

const char* Match_ResponseProposal::doc() const
{
	return "Response Proposal";
}

uint16_t Match_ResponseProposal::id() const
{
	return packetID;
}

Buffer Match_ResponseProposal::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize(),
		ProposalMode.serialize(),
		RequestID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_AskAgreement::Match_AskAgreement(packet::MUID _uidProposer, packet::blob _MembersCharName, packet::int32 _ProposalMode, packet::int32 _RequestID)
	: uidProposer(_uidProposer), MembersCharName(_MembersCharName), ProposalMode(_ProposalMode), RequestID(_RequestID)
{
}

const char* Match_AskAgreement::name() const
{
	return "Match_AskAgreement";
}

const char* Match_AskAgreement::doc() const
{
	return "Ask Agreement";
}

uint16_t Match_AskAgreement::id() const
{
	return packetID;
}

Buffer Match_AskAgreement::serialize() const
{
	Buffer serializedParameters[] = {
		uidProposer.serialize(),
		MembersCharName.serialize(),
		ProposalMode.serialize(),
		RequestID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_ReplyAgreement::Match_ReplyAgreement(packet::MUID _uidProposer, packet::MUID _uidChar, packet::string _Replier, packet::int32 _ProposalMode, packet::int32 _RequestID, packet::boolean _Agreement)
	: uidProposer(_uidProposer), uidChar(_uidChar), Replier(_Replier), ProposalMode(_ProposalMode), RequestID(_RequestID), Agreement(_Agreement)
{
}

const char* Match_ReplyAgreement::name() const
{
	return "Match_ReplyAgreement";
}

const char* Match_ReplyAgreement::doc() const
{
	return "Reply Agreement";
}

uint16_t Match_ReplyAgreement::id() const
{
	return packetID;
}

Buffer Match_ReplyAgreement::serialize() const
{
	Buffer serializedParameters[] = {
		uidProposer.serialize(),
		uidChar.serialize(),
		Replier.serialize(),
		ProposalMode.serialize(),
		RequestID.serialize(),
		Agreement.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Friend_Add::Match_Friend_Add(packet::string _Name)
	: Name(_Name)
{
}

const char* Match_Friend_Add::name() const
{
	return "Match_Friend_Add";
}

const char* Match_Friend_Add::doc() const
{
	return "Add a Friend";
}

uint16_t Match_Friend_Add::id() const
{
	return packetID;
}

Buffer Match_Friend_Add::serialize() const
{
	Buffer serializedParameters[] = {
		Name.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Friend_Remove::Match_Friend_Remove(packet::string _Name)
	: Name(_Name)
{
}

const char* Match_Friend_Remove::name() const
{
	return "Match_Friend_Remove";
}

const char* Match_Friend_Remove::doc() const
{
	return "Remove a Friend";
}

uint16_t Match_Friend_Remove::id() const
{
	return packetID;
}

Buffer Match_Friend_Remove::serialize() const
{
	Buffer serializedParameters[] = {
		Name.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Friend_List::Match_Friend_List()
{
}

const char* Match_Friend_List::name() const
{
	return "Match_Friend_List";
}

const char* Match_Friend_List::doc() const
{
	return "List Friend";
}

uint16_t Match_Friend_List::id() const
{
	return packetID;
}

Buffer Match_Friend_List::serialize() const
{
	return Buffer(0);
}

Match_Response_FriendList::Match_Response_FriendList(packet::blob _FriendList)
	: FriendList(_FriendList)
{
}

const char* Match_Response_FriendList::name() const
{
	return "Match_Response_FriendList";
}

const char* Match_Response_FriendList::doc() const
{
	return "Response List Friend";
}

uint16_t Match_Response_FriendList::id() const
{
	return packetID;
}

Buffer Match_Response_FriendList::serialize() const
{
	Buffer serializedParameters[] = {
		FriendList.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Friend_Msg::Match_Friend_Msg(packet::string _Msg)
	: Msg(_Msg)
{
}

const char* Match_Friend_Msg::name() const
{
	return "Match_Friend_Msg";
}

const char* Match_Friend_Msg::doc() const
{
	return "Message to Friends";
}

uint16_t Match_Friend_Msg::id() const
{
	return packetID;
}

Buffer Match_Friend_Msg::serialize() const
{
	Buffer serializedParameters[] = {
		Msg.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_RequestCreateClan::Match_Clan_RequestCreateClan(packet::MUID _uidChar, packet::int32 _RequestID, packet::string _ClanName, packet::string _Member1CharName, packet::string _Member2CharName, packet::string _Member3CharName, packet::string _Member4CharName)
	: uidChar(_uidChar), RequestID(_RequestID), ClanName(_ClanName), Member1CharName(_Member1CharName), Member2CharName(_Member2CharName), Member3CharName(_Member3CharName), Member4CharName(_Member4CharName)
{
}

const char* Match_Clan_RequestCreateClan::name() const
{
	return "Match_Clan_RequestCreateClan";
}

const char* Match_Clan_RequestCreateClan::doc() const
{
	return "Request Create Clan";
}

uint16_t Match_Clan_RequestCreateClan::id() const
{
	return packetID;
}

Buffer Match_Clan_RequestCreateClan::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize(),
		RequestID.serialize(),
		ClanName.serialize(),
		Member1CharName.serialize(),
		Member2CharName.serialize(),
		Member3CharName.serialize(),
		Member4CharName.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_ResponseCreateClan::Match_Clan_ResponseCreateClan(packet::int32 _Result, packet::int32 _RequestID)
	: Result(_Result), RequestID(_RequestID)
{
}

const char* Match_Clan_ResponseCreateClan::name() const
{
	return "Match_Clan_ResponseCreateClan";
}

const char* Match_Clan_ResponseCreateClan::doc() const
{
	return "Response Create Clan";
}

uint16_t Match_Clan_ResponseCreateClan::id() const
{
	return packetID;
}

Buffer Match_Clan_ResponseCreateClan::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize(),
		RequestID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_AskSponsorAgreement::Match_Clan_AskSponsorAgreement(packet::int32 _RequestID, packet::string _ClanName, packet::MUID _uidClanMaster, packet::string _szClanMaster)
	: RequestID(_RequestID), ClanName(_ClanName), uidClanMaster(_uidClanMaster), szClanMaster(_szClanMaster)
{
}

const char* Match_Clan_AskSponsorAgreement::name() const
{
	return "Match_Clan_AskSponsorAgreement";
}

const char* Match_Clan_AskSponsorAgreement::doc() const
{
	return "Ask Sponsor's Agreement";
}

uint16_t Match_Clan_AskSponsorAgreement::id() const
{
	return packetID;
}

Buffer Match_Clan_AskSponsorAgreement::serialize() const
{
	Buffer serializedParameters[] = {
		RequestID.serialize(),
		ClanName.serialize(),
		uidClanMaster.serialize(),
		szClanMaster.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_AnswerSponsorAgreement::Match_Clan_AnswerSponsorAgreement(packet::int32 _RequestID, packet::MUID _uidClanMaster, packet::string _SponsorCharName, packet::boolean _Answer)
	: RequestID(_RequestID), uidClanMaster(_uidClanMaster), SponsorCharName(_SponsorCharName), Answer(_Answer)
{
}

const char* Match_Clan_AnswerSponsorAgreement::name() const
{
	return "Match_Clan_AnswerSponsorAgreement";
}

const char* Match_Clan_AnswerSponsorAgreement::doc() const
{
	return "Answer Sponsor's Agreement";
}

uint16_t Match_Clan_AnswerSponsorAgreement::id() const
{
	return packetID;
}

Buffer Match_Clan_AnswerSponsorAgreement::serialize() const
{
	Buffer serializedParameters[] = {
		RequestID.serialize(),
		uidClanMaster.serialize(),
		SponsorCharName.serialize(),
		Answer.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_RequestAgreedCreateClan::Match_Clan_RequestAgreedCreateClan(packet::MUID _uidChar, packet::string _ClanName, packet::string _Member1CharName, packet::string _Member2CharName, packet::string _Member3CharName, packet::string _Member4CharName)
	: uidChar(_uidChar), ClanName(_ClanName), Member1CharName(_Member1CharName), Member2CharName(_Member2CharName), Member3CharName(_Member3CharName), Member4CharName(_Member4CharName)
{
}

const char* Match_Clan_RequestAgreedCreateClan::name() const
{
	return "Match_Clan_RequestAgreedCreateClan";
}

const char* Match_Clan_RequestAgreedCreateClan::doc() const
{
	return "Request Agreed Create Clan";
}

uint16_t Match_Clan_RequestAgreedCreateClan::id() const
{
	return packetID;
}

Buffer Match_Clan_RequestAgreedCreateClan::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize(),
		ClanName.serialize(),
		Member1CharName.serialize(),
		Member2CharName.serialize(),
		Member3CharName.serialize(),
		Member4CharName.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_AgreedResponseCreateClan::Match_Clan_AgreedResponseCreateClan(packet::int32 _Result)
	: Result(_Result)
{
}

const char* Match_Clan_AgreedResponseCreateClan::name() const
{
	return "Match_Clan_AgreedResponseCreateClan";
}

const char* Match_Clan_AgreedResponseCreateClan::doc() const
{
	return "Response Agreed Create Clan";
}

uint16_t Match_Clan_AgreedResponseCreateClan::id() const
{
	return packetID;
}

Buffer Match_Clan_AgreedResponseCreateClan::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_RequestCloseClan::Match_Clan_RequestCloseClan(packet::MUID _uidChar, packet::string _ClanName)
	: uidChar(_uidChar), ClanName(_ClanName)
{
}

const char* Match_Clan_RequestCloseClan::name() const
{
	return "Match_Clan_RequestCloseClan";
}

const char* Match_Clan_RequestCloseClan::doc() const
{
	return "Request Close Clan";
}

uint16_t Match_Clan_RequestCloseClan::id() const
{
	return packetID;
}

Buffer Match_Clan_RequestCloseClan::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize(),
		ClanName.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_ResponseCloseClan::Match_Clan_ResponseCloseClan(packet::int32 _Result)
	: Result(_Result)
{
}

const char* Match_Clan_ResponseCloseClan::name() const
{
	return "Match_Clan_ResponseCloseClan";
}

const char* Match_Clan_ResponseCloseClan::doc() const
{
	return "Response Close Clan";
}

uint16_t Match_Clan_ResponseCloseClan::id() const
{
	return packetID;
}

Buffer Match_Clan_ResponseCloseClan::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_RequestJoinClan::Match_Clan_RequestJoinClan(packet::MUID _uidChar, packet::string _ClanName, packet::string _szJoiner)
	: uidChar(_uidChar), ClanName(_ClanName), szJoiner(_szJoiner)
{
}

const char* Match_Clan_RequestJoinClan::name() const
{
	return "Match_Clan_RequestJoinClan";
}

const char* Match_Clan_RequestJoinClan::doc() const
{
	return "Request Join Clan";
}

uint16_t Match_Clan_RequestJoinClan::id() const
{
	return packetID;
}

Buffer Match_Clan_RequestJoinClan::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize(),
		ClanName.serialize(),
		szJoiner.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_ResponseJoinClan::Match_Clan_ResponseJoinClan(packet::int32 _Result)
	: Result(_Result)
{
}

const char* Match_Clan_ResponseJoinClan::name() const
{
	return "Match_Clan_ResponseJoinClan";
}

const char* Match_Clan_ResponseJoinClan::doc() const
{
	return "Response Join Clan";
}

uint16_t Match_Clan_ResponseJoinClan::id() const
{
	return packetID;
}

Buffer Match_Clan_ResponseJoinClan::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_AskJoinAgreement::Match_Clan_AskJoinAgreement(packet::string _ClanName, packet::MUID _uidClanAdmin, packet::string _szClanAdmin)
	: ClanName(_ClanName), uidClanAdmin(_uidClanAdmin), szClanAdmin(_szClanAdmin)
{
}

const char* Match_Clan_AskJoinAgreement::name() const
{
	return "Match_Clan_AskJoinAgreement";
}

const char* Match_Clan_AskJoinAgreement::doc() const
{
	return "Ask Join Agreement";
}

uint16_t Match_Clan_AskJoinAgreement::id() const
{
	return packetID;
}

Buffer Match_Clan_AskJoinAgreement::serialize() const
{
	Buffer serializedParameters[] = {
		ClanName.serialize(),
		uidClanAdmin.serialize(),
		szClanAdmin.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_AnswerJoinAgreement::Match_Clan_AnswerJoinAgreement(packet::MUID _uidClanAdmin, packet::string _JoinerCharName, packet::boolean _Answer)
	: uidClanAdmin(_uidClanAdmin), JoinerCharName(_JoinerCharName), Answer(_Answer)
{
}

const char* Match_Clan_AnswerJoinAgreement::name() const
{
	return "Match_Clan_AnswerJoinAgreement";
}

const char* Match_Clan_AnswerJoinAgreement::doc() const
{
	return "Answer Join Agreement";
}

uint16_t Match_Clan_AnswerJoinAgreement::id() const
{
	return packetID;
}

Buffer Match_Clan_AnswerJoinAgreement::serialize() const
{
	Buffer serializedParameters[] = {
		uidClanAdmin.serialize(),
		JoinerCharName.serialize(),
		Answer.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_RequestAgreedJoinClan::Match_Clan_RequestAgreedJoinClan(packet::MUID _uidClanAdmin, packet::string _ClanName, packet::string _szJoiner)
	: uidClanAdmin(_uidClanAdmin), ClanName(_ClanName), szJoiner(_szJoiner)
{
}

const char* Match_Clan_RequestAgreedJoinClan::name() const
{
	return "Match_Clan_RequestAgreedJoinClan";
}

const char* Match_Clan_RequestAgreedJoinClan::doc() const
{
	return "Request Agreed Join Clan";
}

uint16_t Match_Clan_RequestAgreedJoinClan::id() const
{
	return packetID;
}

Buffer Match_Clan_RequestAgreedJoinClan::serialize() const
{
	Buffer serializedParameters[] = {
		uidClanAdmin.serialize(),
		ClanName.serialize(),
		szJoiner.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_ResponseAgreedJoinClan::Match_Clan_ResponseAgreedJoinClan(packet::int32 _Result)
	: Result(_Result)
{
}

const char* Match_Clan_ResponseAgreedJoinClan::name() const
{
	return "Match_Clan_ResponseAgreedJoinClan";
}

const char* Match_Clan_ResponseAgreedJoinClan::doc() const
{
	return "Response Agreed Join Clan";
}

uint16_t Match_Clan_ResponseAgreedJoinClan::id() const
{
	return packetID;
}

Buffer Match_Clan_ResponseAgreedJoinClan::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_RequestLeaveClan::Match_Clan_RequestLeaveClan(packet::MUID _uidChar)
	: uidChar(_uidChar)
{
}

const char* Match_Clan_RequestLeaveClan::name() const
{
	return "Match_Clan_RequestLeaveClan";
}

const char* Match_Clan_RequestLeaveClan::doc() const
{
	return "Request Leave Clan";
}

uint16_t Match_Clan_RequestLeaveClan::id() const
{
	return packetID;
}

Buffer Match_Clan_RequestLeaveClan::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_ResponseLeaveClan::Match_Clan_ResponseLeaveClan(packet::int32 _Result)
	: Result(_Result)
{
}

const char* Match_Clan_ResponseLeaveClan::name() const
{
	return "Match_Clan_ResponseLeaveClan";
}

const char* Match_Clan_ResponseLeaveClan::doc() const
{
	return "Response Leave Clan";
}

uint16_t Match_Clan_ResponseLeaveClan::id() const
{
	return packetID;
}

Buffer Match_Clan_ResponseLeaveClan::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_UpdateCharClanInfo::Match_Clan_UpdateCharClanInfo(packet::blob _ClanInfo)
	: ClanInfo(_ClanInfo)
{
}

const char* Match_Clan_UpdateCharClanInfo::name() const
{
	return "Match_Clan_UpdateCharClanInfo";
}

const char* Match_Clan_UpdateCharClanInfo::doc() const
{
	return "Update Char ClanInfo";
}

uint16_t Match_Clan_UpdateCharClanInfo::id() const
{
	return packetID;
}

Buffer Match_Clan_UpdateCharClanInfo::serialize() const
{
	Buffer serializedParameters[] = {
		ClanInfo.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_Master_RequestChangeGrade::Match_Clan_Master_RequestChangeGrade(packet::MUID _uidClanMaster, packet::string _szMember, packet::int32 _Grade, packet::int32 _zero)
	: uidClanMaster(_uidClanMaster), szMember(_szMember), Grade(_Grade), zero(_zero)
{
}

const char* Match_Clan_Master_RequestChangeGrade::name() const
{
	return "Match_Clan_Master_RequestChangeGrade";
}

const char* Match_Clan_Master_RequestChangeGrade::doc() const
{
	return "Request Change ClanGrade";
}

uint16_t Match_Clan_Master_RequestChangeGrade::id() const
{
	return packetID;
}

Buffer Match_Clan_Master_RequestChangeGrade::serialize() const
{
	Buffer serializedParameters[] = {
		uidClanMaster.serialize(),
		szMember.serialize(),
		Grade.serialize(),
		zero.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_Master_ResponseChangeGrade::Match_Clan_Master_ResponseChangeGrade(packet::int32 _Result)
	: Result(_Result)
{
}

const char* Match_Clan_Master_ResponseChangeGrade::name() const
{
	return "Match_Clan_Master_ResponseChangeGrade";
}

const char* Match_Clan_Master_ResponseChangeGrade::doc() const
{
	return "Response Change ClanGrade";
}

uint16_t Match_Clan_Master_ResponseChangeGrade::id() const
{
	return packetID;
}

Buffer Match_Clan_Master_ResponseChangeGrade::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_Admin_RequestExpelMember::Match_Clan_Admin_RequestExpelMember(packet::MUID _uidClanAdmin, packet::string _szMember)
	: uidClanAdmin(_uidClanAdmin), szMember(_szMember)
{
}

const char* Match_Clan_Admin_RequestExpelMember::name() const
{
	return "Match_Clan_Admin_RequestExpelMember";
}

const char* Match_Clan_Admin_RequestExpelMember::doc() const
{
	return "Request Expel ClanMember";
}

uint16_t Match_Clan_Admin_RequestExpelMember::id() const
{
	return packetID;
}

Buffer Match_Clan_Admin_RequestExpelMember::serialize() const
{
	Buffer serializedParameters[] = {
		uidClanAdmin.serialize(),
		szMember.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_Admin_ResponseLeaveMember::Match_Clan_Admin_ResponseLeaveMember(packet::int32 _Result)
	: Result(_Result)
{
}

const char* Match_Clan_Admin_ResponseLeaveMember::name() const
{
	return "Match_Clan_Admin_ResponseLeaveMember";
}

const char* Match_Clan_Admin_ResponseLeaveMember::doc() const
{
	return "Response Expel ClanMember";
}

uint16_t Match_Clan_Admin_ResponseLeaveMember::id() const
{
	return packetID;
}

Buffer Match_Clan_Admin_ResponseLeaveMember::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_Request_Msg::Match_Clan_Request_Msg(packet::MUID _uidSender, packet::string _Msg)
	: uidSender(_uidSender), Msg(_Msg)
{
}

const char* Match_Clan_Request_Msg::name() const
{
	return "Match_Clan_Request_Msg";
}

const char* Match_Clan_Request_Msg::doc() const
{
	return "Request Clan Msg";
}

uint16_t Match_Clan_Request_Msg::id() const
{
	return packetID;
}

Buffer Match_Clan_Request_Msg::serialize() const
{
	Buffer serializedParameters[] = {
		uidSender.serialize(),
		Msg.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_Msg::Match_Clan_Msg(packet::string _SenderName, packet::string _Msg)
	: SenderName(_SenderName), Msg(_Msg)
{
}

const char* Match_Clan_Msg::name() const
{
	return "Match_Clan_Msg";
}

const char* Match_Clan_Msg::doc() const
{
	return "Clan Msg";
}

uint16_t Match_Clan_Msg::id() const
{
	return packetID;
}

Buffer Match_Clan_Msg::serialize() const
{
	Buffer serializedParameters[] = {
		SenderName.serialize(),
		Msg.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_Request_ClanMemberList::Match_Clan_Request_ClanMemberList(packet::MUID _uidChar)
	: uidChar(_uidChar)
{
}

const char* Match_Clan_Request_ClanMemberList::name() const
{
	return "Match_Clan_Request_ClanMemberList";
}

const char* Match_Clan_Request_ClanMemberList::doc() const
{
	return "Request Clan Member List";
}

uint16_t Match_Clan_Request_ClanMemberList::id() const
{
	return packetID;
}

Buffer Match_Clan_Request_ClanMemberList::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_Response_ClanMemberList::Match_Clan_Response_ClanMemberList(packet::blob _ClanMemberList)
	: ClanMemberList(_ClanMemberList)
{
}

const char* Match_Clan_Response_ClanMemberList::name() const
{
	return "Match_Clan_Response_ClanMemberList";
}

const char* Match_Clan_Response_ClanMemberList::doc() const
{
	return "Response Clan Member List";
}

uint16_t Match_Clan_Response_ClanMemberList::id() const
{
	return packetID;
}

Buffer Match_Clan_Response_ClanMemberList::serialize() const
{
	Buffer serializedParameters[] = {
		ClanMemberList.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_Request_Clan_Info::Match_Clan_Request_Clan_Info(packet::MUID _uidChar, packet::string _ClanName)
	: uidChar(_uidChar), ClanName(_ClanName)
{
}

const char* Match_Clan_Request_Clan_Info::name() const
{
	return "Match_Clan_Request_Clan_Info";
}

const char* Match_Clan_Request_Clan_Info::doc() const
{
	return "Request Clan Info";
}

uint16_t Match_Clan_Request_Clan_Info::id() const
{
	return packetID;
}

Buffer Match_Clan_Request_Clan_Info::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize(),
		ClanName.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_Response_Clan_Info::Match_Clan_Response_Clan_Info(packet::blob _ClanInfo)
	: ClanInfo(_ClanInfo)
{
}

const char* Match_Clan_Response_Clan_Info::name() const
{
	return "Match_Clan_Response_Clan_Info";
}

const char* Match_Clan_Response_Clan_Info::doc() const
{
	return "Response Clan Info";
}

uint16_t Match_Clan_Response_Clan_Info::id() const
{
	return packetID;
}

Buffer Match_Clan_Response_Clan_Info::serialize() const
{
	Buffer serializedParameters[] = {
		ClanInfo.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_Standby_ClanList::Match_Clan_Standby_ClanList(packet::int32 _PrevClanListCount, packet::int32 _NextClanListCount, packet::blob _ClanList)
	: PrevClanListCount(_PrevClanListCount), NextClanListCount(_NextClanListCount), ClanList(_ClanList)
{
}

const char* Match_Clan_Standby_ClanList::name() const
{
	return "Match_Clan_Standby_ClanList";
}

const char* Match_Clan_Standby_ClanList::doc() const
{
	return "Standby Clan List";
}

uint16_t Match_Clan_Standby_ClanList::id() const
{
	return packetID;
}

Buffer Match_Clan_Standby_ClanList::serialize() const
{
	Buffer serializedParameters[] = {
		PrevClanListCount.serialize(),
		NextClanListCount.serialize(),
		ClanList.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_Member_Connected::Match_Clan_Member_Connected(packet::string _szMember)
	: szMember(_szMember)
{
}

const char* Match_Clan_Member_Connected::name() const
{
	return "Match_Clan_Member_Connected";
}

const char* Match_Clan_Member_Connected::doc() const
{
	return "Member Connected";
}

uint16_t Match_Clan_Member_Connected::id() const
{
	return packetID;
}

Buffer Match_Clan_Member_Connected::serialize() const
{
	Buffer serializedParameters[] = {
		szMember.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_Request_EmblemURL::Match_Clan_Request_EmblemURL(packet::blob _ClanURLList)
	: ClanURLList(_ClanURLList)
{
}

const char* Match_Clan_Request_EmblemURL::name() const
{
	return "Match_Clan_Request_EmblemURL";
}

const char* Match_Clan_Request_EmblemURL::doc() const
{
	return "Request EmblemURL";
}

uint16_t Match_Clan_Request_EmblemURL::id() const
{
	return packetID;
}

Buffer Match_Clan_Request_EmblemURL::serialize() const
{
	Buffer serializedParameters[] = {
		ClanURLList.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_Response_EmblemURL::Match_Clan_Response_EmblemURL(packet::int32 _ClanCLID, packet::int32 _EmblemChecksum, packet::string _EmblemURL)
	: ClanCLID(_ClanCLID), EmblemChecksum(_EmblemChecksum), EmblemURL(_EmblemURL)
{
}

const char* Match_Clan_Response_EmblemURL::name() const
{
	return "Match_Clan_Response_EmblemURL";
}

const char* Match_Clan_Response_EmblemURL::doc() const
{
	return "Response EmblemURL";
}

uint16_t Match_Clan_Response_EmblemURL::id() const
{
	return packetID;
}

Buffer Match_Clan_Response_EmblemURL::serialize() const
{
	Buffer serializedParameters[] = {
		ClanCLID.serialize(),
		EmblemChecksum.serialize(),
		EmblemURL.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Clan_Local_EmblemReady::Match_Clan_Local_EmblemReady(packet::int32 _ClanCLID, packet::string _EmblemURL)
	: ClanCLID(_ClanCLID), EmblemURL(_EmblemURL)
{
}

const char* Match_Clan_Local_EmblemReady::name() const
{
	return "Match_Clan_Local_EmblemReady";
}

const char* Match_Clan_Local_EmblemReady::doc() const
{
	return "Notify Emblem Ready";
}

uint16_t Match_Clan_Local_EmblemReady::id() const
{
	return packetID;
}

Buffer Match_Clan_Local_EmblemReady::serialize() const
{
	Buffer serializedParameters[] = {
		ClanCLID.serialize(),
		EmblemURL.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

MC_MATCH_CLAN_ACCOUNCE_DELETE::MC_MATCH_CLAN_ACCOUNCE_DELETE(packet::string _deleteinfo)
	: deleteinfo(_deleteinfo)
{
}

const char* MC_MATCH_CLAN_ACCOUNCE_DELETE::name() const
{
	return "MC_MATCH_CLAN_ACCOUNCE_DELETE";
}

const char* MC_MATCH_CLAN_ACCOUNCE_DELETE::doc() const
{
	return "delete clan info announce to clan member";
}

uint16_t MC_MATCH_CLAN_ACCOUNCE_DELETE::id() const
{
	return packetID;
}

Buffer MC_MATCH_CLAN_ACCOUNCE_DELETE::serialize() const
{
	Buffer serializedParameters[] = {
		deleteinfo.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Callvote::Match_Callvote(packet::string _strDiscuss, packet::string _strArg)
	: strDiscuss(_strDiscuss), strArg(_strArg)
{
}

const char* Match_Callvote::name() const
{
	return "Match_Callvote";
}

const char* Match_Callvote::doc() const
{
	return "Callvote";
}

uint16_t Match_Callvote::id() const
{
	return packetID;
}

Buffer Match_Callvote::serialize() const
{
	Buffer serializedParameters[] = {
		strDiscuss.serialize(),
		strArg.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_NotifyCallvote::Match_NotifyCallvote(packet::string _strDiscuss, packet::string _strArg)
	: strDiscuss(_strDiscuss), strArg(_strArg)
{
}

const char* Match_NotifyCallvote::name() const
{
	return "Match_NotifyCallvote";
}

const char* Match_NotifyCallvote::doc() const
{
	return "Notify Callvote";
}

uint16_t Match_NotifyCallvote::id() const
{
	return packetID;
}

Buffer Match_NotifyCallvote::serialize() const
{
	Buffer serializedParameters[] = {
		strDiscuss.serialize(),
		strArg.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_NotifyVoteResult::Match_NotifyVoteResult(packet::string _strDiscuss, packet::int32 _nResult)
	: strDiscuss(_strDiscuss), nResult(_nResult)
{
}

const char* Match_NotifyVoteResult::name() const
{
	return "Match_NotifyVoteResult";
}

const char* Match_NotifyVoteResult::doc() const
{
	return "Notify Vote Result";
}

uint16_t Match_NotifyVoteResult::id() const
{
	return packetID;
}

Buffer Match_NotifyVoteResult::serialize() const
{
	Buffer serializedParameters[] = {
		strDiscuss.serialize(),
		nResult.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_VoteYes::Match_VoteYes()
{
}

const char* Match_VoteYes::name() const
{
	return "Match_VoteYes";
}

const char* Match_VoteYes::doc() const
{
	return "Vote";
}

uint16_t Match_VoteYes::id() const
{
	return packetID;
}

Buffer Match_VoteYes::serialize() const
{
	return Buffer(0);
}

Match_VoteNo::Match_VoteNo()
{
}

const char* Match_VoteNo::name() const
{
	return "Match_VoteNo";
}

const char* Match_VoteNo::doc() const
{
	return "Vote";
}

uint16_t Match_VoteNo::id() const
{
	return packetID;
}

Buffer Match_VoteNo::serialize() const
{
	return Buffer(0);
}

Votestop::Votestop()
{
}

const char* Votestop::name() const
{
	return "Votestop";
}

const char* Votestop::doc() const
{
	return "Vote stop";
}

uint16_t Votestop::id() const
{
	return packetID;
}

Buffer Votestop::serialize() const
{
	return Buffer(0);
}

Match_Broadcast_ClanRenewVictories::Match_Broadcast_ClanRenewVictories(packet::string _strWinnerClanName, packet::string _strLoserClanName, packet::int32 _nVictories)
	: strWinnerClanName(_strWinnerClanName), strLoserClanName(_strLoserClanName), nVictories(_nVictories)
{
}

const char* Match_Broadcast_ClanRenewVictories::name() const
{
	return "Match_Broadcast_ClanRenewVictories";
}

const char* Match_Broadcast_ClanRenewVictories::doc() const
{
	return "Broadcast Clan Renew Victories";
}

uint16_t Match_Broadcast_ClanRenewVictories::id() const
{
	return packetID;
}

Buffer Match_Broadcast_ClanRenewVictories::serialize() const
{
	Buffer serializedParameters[] = {
		strWinnerClanName.serialize(),
		strLoserClanName.serialize(),
		nVictories.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Broadcast_ClanInterruptVictories::Match_Broadcast_ClanInterruptVictories(packet::string _strWinnerClanName, packet::string _strLoserClanName, packet::int32 _nVictories)
	: strWinnerClanName(_strWinnerClanName), strLoserClanName(_strLoserClanName), nVictories(_nVictories)
{
}

const char* Match_Broadcast_ClanInterruptVictories::name() const
{
	return "Match_Broadcast_ClanInterruptVictories";
}

const char* Match_Broadcast_ClanInterruptVictories::doc() const
{
	return "Broadcast Clan Interrupt Victories";
}

uint16_t Match_Broadcast_ClanInterruptVictories::id() const
{
	return packetID;
}

Buffer Match_Broadcast_ClanInterruptVictories::serialize() const
{
	Buffer serializedParameters[] = {
		strWinnerClanName.serialize(),
		strLoserClanName.serialize(),
		nVictories.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Broadcast_DuelRenewVictories::Match_Broadcast_DuelRenewVictories(packet::string _strChampionName, packet::string _strChannelName, packet::int32 _nRoomNumber, packet::int32 _nVictories)
	: strChampionName(_strChampionName), strChannelName(_strChannelName), nRoomNumber(_nRoomNumber), nVictories(_nVictories)
{
}

const char* Match_Broadcast_DuelRenewVictories::name() const
{
	return "Match_Broadcast_DuelRenewVictories";
}

const char* Match_Broadcast_DuelRenewVictories::doc() const
{
	return "Broadcast Duel Renew Victories";
}

uint16_t Match_Broadcast_DuelRenewVictories::id() const
{
	return packetID;
}

Buffer Match_Broadcast_DuelRenewVictories::serialize() const
{
	Buffer serializedParameters[] = {
		strChampionName.serialize(),
		strChannelName.serialize(),
		nRoomNumber.serialize(),
		nVictories.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Broadcast_DuelInterruptVictories::Match_Broadcast_DuelInterruptVictories(packet::string _strChampionName, packet::string _strInterrupterName, packet::int32 _nVictories)
	: strChampionName(_strChampionName), strInterrupterName(_strInterrupterName), nVictories(_nVictories)
{
}

const char* Match_Broadcast_DuelInterruptVictories::name() const
{
	return "Match_Broadcast_DuelInterruptVictories";
}

const char* Match_Broadcast_DuelInterruptVictories::doc() const
{
	return "Broadcast Duel Interrupt Victories";
}

uint16_t Match_Broadcast_DuelInterruptVictories::id() const
{
	return packetID;
}

Buffer Match_Broadcast_DuelInterruptVictories::serialize() const
{
	Buffer serializedParameters[] = {
		strChampionName.serialize(),
		strInterrupterName.serialize(),
		nVictories.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Assign_Berserker::Match_Assign_Berserker(packet::MUID _uidPlayer)
	: uidPlayer(_uidPlayer)
{
}

const char* Match_Assign_Berserker::name() const
{
	return "Match_Assign_Berserker";
}

const char* Match_Assign_Berserker::doc() const
{
	return "Assign Berserker";
}

uint16_t Match_Assign_Berserker::id() const
{
	return packetID;
}

Buffer Match_Assign_Berserker::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Duel_QueueInfo::Match_Duel_QueueInfo(packet::blob _QueueInfo)
	: QueueInfo(_QueueInfo)
{
}

const char* Match_Duel_QueueInfo::name() const
{
	return "Match_Duel_QueueInfo";
}

const char* Match_Duel_QueueInfo::doc() const
{
	return "Queue Info";
}

uint16_t Match_Duel_QueueInfo::id() const
{
	return packetID;
}

Buffer Match_Duel_QueueInfo::serialize() const
{
	Buffer serializedParameters[] = {
		QueueInfo.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Quest_Ping::Match_Quest_Ping(packet::uint32 _nTimeStamp)
	: nTimeStamp(_nTimeStamp)
{
}

const char* Match_Quest_Ping::name() const
{
	return "Match_Quest_Ping";
}

const char* Match_Quest_Ping::doc() const
{
	return "QuestPing";
}

uint16_t Match_Quest_Ping::id() const
{
	return packetID;
}

Buffer Match_Quest_Ping::serialize() const
{
	Buffer serializedParameters[] = {
		nTimeStamp.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Quest_Pong::Match_Quest_Pong(packet::uint32 _nTimeStamp)
	: nTimeStamp(_nTimeStamp)
{
}

const char* Match_Quest_Pong::name() const
{
	return "Match_Quest_Pong";
}

const char* Match_Quest_Pong::doc() const
{
	return "QuestPong";
}

uint16_t Match_Quest_Pong::id() const
{
	return packetID;
}

Buffer Match_Quest_Pong::serialize() const
{
	Buffer serializedParameters[] = {
		nTimeStamp.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

MC_QUEST_NPCLIST::MC_QUEST_NPCLIST(packet::blob _NPCinfolist, packet::int32 _eGameType)
	: NPCinfolist(_NPCinfolist), eGameType(_eGameType)
{
}

const char* MC_QUEST_NPCLIST::name() const
{
	return "MC_QUEST_NPCLIST";
}

const char* MC_QUEST_NPCLIST::doc() const
{
	return "Send npc info list to client.";
}

uint16_t MC_QUEST_NPCLIST::id() const
{
	return packetID;
}

Buffer MC_QUEST_NPCLIST::serialize() const
{
	Buffer serializedParameters[] = {
		NPCinfolist.serialize(),
		eGameType.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Event_ChangeMaster::Event_ChangeMaster()
{
}

const char* Event_ChangeMaster::name() const
{
	return "Event_ChangeMaster";
}

const char* Event_ChangeMaster::doc() const
{
	return "Take out Master from Stage";
}

uint16_t Event_ChangeMaster::id() const
{
	return packetID;
}

Buffer Event_ChangeMaster::serialize() const
{
	return Buffer(0);
}

Event_ChangePassword::Event_ChangePassword(packet::string _strPassword)
	: strPassword(_strPassword)
{
}

const char* Event_ChangePassword::name() const
{
	return "Event_ChangePassword";
}

const char* Event_ChangePassword::doc() const
{
	return "Change Password on Stage";
}

uint16_t Event_ChangePassword::id() const
{
	return packetID;
}

Buffer Event_ChangePassword::serialize() const
{
	Buffer serializedParameters[] = {
		strPassword.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Event_RequestJJang::Event_RequestJJang(packet::string _strTargetName)
	: strTargetName(_strTargetName)
{
}

const char* Event_RequestJJang::name() const
{
	return "Event_RequestJJang";
}

const char* Event_RequestJJang::doc() const
{
	return "Request JJang mark to a Player";
}

uint16_t Event_RequestJJang::id() const
{
	return packetID;
}

Buffer Event_RequestJJang::serialize() const
{
	Buffer serializedParameters[] = {
		strTargetName.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Event_RemoveJJang::Event_RemoveJJang(packet::string _strTargetName)
	: strTargetName(_strTargetName)
{
}

const char* Event_RemoveJJang::name() const
{
	return "Event_RemoveJJang";
}

const char* Event_RemoveJJang::doc() const
{
	return "Remove JJang mark from a Player";
}

uint16_t Event_RemoveJJang::id() const
{
	return packetID;
}

Buffer Event_RemoveJJang::serialize() const
{
	Buffer serializedParameters[] = {
		strTargetName.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Event_UpdateJJang::Event_UpdateJJang(packet::MUID _uidPlayer, packet::boolean _bJjang)
	: uidPlayer(_uidPlayer), bJjang(_bJjang)
{
}

const char* Event_UpdateJJang::name() const
{
	return "Event_UpdateJJang";
}

const char* Event_UpdateJJang::doc() const
{
	return "Update JJang Player";
}

uint16_t Event_UpdateJJang::id() const
{
	return packetID;
}

Buffer Event_UpdateJJang::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		bJjang.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_NPCSpawn::Quest_NPCSpawn(packet::MUID _uidChar, packet::MUID _nNpcUID, packet::uint8 _nNpcType, packet::uint8 _PositionIndex)
	: uidChar(_uidChar), nNpcUID(_nNpcUID), nNpcType(_nNpcType), PositionIndex(_PositionIndex)
{
}

const char* Quest_NPCSpawn::name() const
{
	return "Quest_NPCSpawn";
}

const char* Quest_NPCSpawn::doc() const
{
	return "Npc Spawn";
}

uint16_t Quest_NPCSpawn::id() const
{
	return packetID;
}

Buffer Quest_NPCSpawn::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize(),
		nNpcUID.serialize(),
		nNpcType.serialize(),
		PositionIndex.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Entrust_NPC_Control::Quest_Entrust_NPC_Control(packet::MUID _uidChar, packet::MUID _nNpcUID)
	: uidChar(_uidChar), nNpcUID(_nNpcUID)
{
}

const char* Quest_Entrust_NPC_Control::name() const
{
	return "Quest_Entrust_NPC_Control";
}

const char* Quest_Entrust_NPC_Control::doc() const
{
	return "Entrust Npc Control";
}

uint16_t Quest_Entrust_NPC_Control::id() const
{
	return packetID;
}

Buffer Quest_Entrust_NPC_Control::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize(),
		nNpcUID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Checksum_NPCInfo::Quest_Checksum_NPCInfo(packet::MUID _uidChar, packet::uint32 _checksum)
	: uidChar(_uidChar), checksum(_checksum)
{
}

const char* Quest_Checksum_NPCInfo::name() const
{
	return "Quest_Checksum_NPCInfo";
}

const char* Quest_Checksum_NPCInfo::doc() const
{
	return "Checksum NPC Info";
}

uint16_t Quest_Checksum_NPCInfo::id() const
{
	return packetID;
}

Buffer Quest_Checksum_NPCInfo::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize(),
		checksum.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_NPCDead::Quest_NPCDead(packet::MUID _uidKillerPlayer, packet::MUID _uidNPC)
	: uidKillerPlayer(_uidKillerPlayer), uidNPC(_uidNPC)
{
}

const char* Quest_NPCDead::name() const
{
	return "Quest_NPCDead";
}

const char* Quest_NPCDead::doc() const
{
	return "Npc Dead";
}

uint16_t Quest_NPCDead::id() const
{
	return packetID;
}

Buffer Quest_NPCDead::serialize() const
{
	Buffer serializedParameters[] = {
		uidKillerPlayer.serialize(),
		uidNPC.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_RefreshPlayerStatus::Quest_RefreshPlayerStatus()
{
}

const char* Quest_RefreshPlayerStatus::name() const
{
	return "Quest_RefreshPlayerStatus";
}

const char* Quest_RefreshPlayerStatus::doc() const
{
	return "Refresh Player Status";
}

uint16_t Quest_RefreshPlayerStatus::id() const
{
	return packetID;
}

Buffer Quest_RefreshPlayerStatus::serialize() const
{
	return Buffer(0);
}

Quest_NPC_AllClear::Quest_NPC_AllClear()
{
}

const char* Quest_NPC_AllClear::name() const
{
	return "Quest_NPC_AllClear";
}

const char* Quest_NPC_AllClear::doc() const
{
	return "Clear All NPC";
}

uint16_t Quest_NPC_AllClear::id() const
{
	return packetID;
}

Buffer Quest_NPC_AllClear::serialize() const
{
	return Buffer(0);
}

Quest_Round_Start::Quest_Round_Start(packet::uint8 _round)
	: round(_round)
{
}

const char* Quest_Round_Start::name() const
{
	return "Quest_Round_Start";
}

const char* Quest_Round_Start::doc() const
{
	return "Quest Start Round";
}

uint16_t Quest_Round_Start::id() const
{
	return packetID;
}

Buffer Quest_Round_Start::serialize() const
{
	Buffer serializedParameters[] = {
		round.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_RequestDead::Quest_RequestDead()
{
}

const char* Quest_RequestDead::name() const
{
	return "Quest_RequestDead";
}

const char* Quest_RequestDead::doc() const
{
	return "Quest Request Dead";
}

uint16_t Quest_RequestDead::id() const
{
	return packetID;
}

Buffer Quest_RequestDead::serialize() const
{
	return Buffer(0);
}

Quest_PlayerDead::Quest_PlayerDead(packet::MUID _Victim)
	: Victim(_Victim)
{
}

const char* Quest_PlayerDead::name() const
{
	return "Quest_PlayerDead";
}

const char* Quest_PlayerDead::doc() const
{
	return "Quest Player Dead";
}

uint16_t Quest_PlayerDead::id() const
{
	return packetID;
}

Buffer Quest_PlayerDead::serialize() const
{
	Buffer serializedParameters[] = {
		Victim.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_ObtainQuestItem::Quest_ObtainQuestItem(packet::uint32 _QuestItemID)
	: QuestItemID(_QuestItemID)
{
}

const char* Quest_ObtainQuestItem::name() const
{
	return "Quest_ObtainQuestItem";
}

const char* Quest_ObtainQuestItem::doc() const
{
	return "Obtain QuestItem";
}

uint16_t Quest_ObtainQuestItem::id() const
{
	return packetID;
}

Buffer Quest_ObtainQuestItem::serialize() const
{
	Buffer serializedParameters[] = {
		QuestItemID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_ObtainZItem::Quest_ObtainZItem(packet::uint32 _ItemID)
	: ItemID(_ItemID)
{
}

const char* Quest_ObtainZItem::name() const
{
	return "Quest_ObtainZItem";
}

const char* Quest_ObtainZItem::doc() const
{
	return "Obtain ZItem";
}

uint16_t Quest_ObtainZItem::id() const
{
	return packetID;
}

Buffer Quest_ObtainZItem::serialize() const
{
	Buffer serializedParameters[] = {
		ItemID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_State_Mapset::Quest_State_Mapset(packet::MUID _uidStage, packet::vector _QuestMapset)
	: uidStage(_uidStage), QuestMapset(_QuestMapset)
{
}

const char* Quest_State_Mapset::name() const
{
	return "Quest_State_Mapset";
}

const char* Quest_State_Mapset::doc() const
{
	return "Change Stage Quest Mapset Setting";
}

uint16_t Quest_State_Mapset::id() const
{
	return packetID;
}

Buffer Quest_State_Mapset::serialize() const
{
	Buffer serializedParameters[] = {
		uidStage.serialize(),
		QuestMapset.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Stage_GameInfo::Quest_Stage_GameInfo(packet::vector _Questlevel, packet::vector _MapsetID, packet::uint32 _QuestScenarioID)
	: Questlevel(_Questlevel), MapsetID(_MapsetID), QuestScenarioID(_QuestScenarioID)
{
}

const char* Quest_Stage_GameInfo::name() const
{
	return "Quest_Stage_GameInfo";
}

const char* Quest_Stage_GameInfo::doc() const
{
	return "Quest Stage GameInfo";
}

uint16_t Quest_Stage_GameInfo::id() const
{
	return packetID;
}

Buffer Quest_Stage_GameInfo::serialize() const
{
	Buffer serializedParameters[] = {
		Questlevel.serialize(),
		MapsetID.serialize(),
		QuestScenarioID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_SectorBonus::Quest_SectorBonus(packet::MUID _uidPlayer, packet::uint32 _XPBonus, packet::uint32 _BPBonus)
	: uidPlayer(_uidPlayer), XPBonus(_XPBonus), BPBonus(_BPBonus)
{
}

const char* Quest_SectorBonus::name() const
{
	return "Quest_SectorBonus";
}

const char* Quest_SectorBonus::doc() const
{
	return "Quest Sector Bonus";
}

uint16_t Quest_SectorBonus::id() const
{
	return packetID;
}

Buffer Quest_SectorBonus::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize(),
		XPBonus.serialize(),
		BPBonus.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_GameInfo::Quest_GameInfo(packet::blob _Info)
	: Info(_Info)
{
}

const char* Quest_GameInfo::name() const
{
	return "Quest_GameInfo";
}

const char* Quest_GameInfo::doc() const
{
	return "Quest Game Info";
}

uint16_t Quest_GameInfo::id() const
{
	return packetID;
}

Buffer Quest_GameInfo::serialize() const
{
	Buffer serializedParameters[] = {
		Info.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Combat_State::Quest_Combat_State(packet::vector _CombatState)
	: CombatState(_CombatState)
{
}

const char* Quest_Combat_State::name() const
{
	return "Quest_Combat_State";
}

const char* Quest_Combat_State::doc() const
{
	return "Quest Combat State";
}

uint16_t Quest_Combat_State::id() const
{
	return packetID;
}

Buffer Quest_Combat_State::serialize() const
{
	Buffer serializedParameters[] = {
		CombatState.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Sector_Start::Quest_Sector_Start(packet::vector _SectorIndex, packet::uint8 _RepeatIndex)
	: SectorIndex(_SectorIndex), RepeatIndex(_RepeatIndex)
{
}

const char* Quest_Sector_Start::name() const
{
	return "Quest_Sector_Start";
}

const char* Quest_Sector_Start::doc() const
{
	return "Quest Sector Start";
}

uint16_t Quest_Sector_Start::id() const
{
	return packetID;
}

Buffer Quest_Sector_Start::serialize() const
{
	Buffer serializedParameters[] = {
		SectorIndex.serialize(),
		RepeatIndex.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Complete::Quest_Complete(packet::blob _RewardInfo)
	: RewardInfo(_RewardInfo)
{
}

const char* Quest_Complete::name() const
{
	return "Quest_Complete";
}

const char* Quest_Complete::doc() const
{
	return "Complete Quest";
}

uint16_t Quest_Complete::id() const
{
	return packetID;
}

Buffer Quest_Complete::serialize() const
{
	Buffer serializedParameters[] = {
		RewardInfo.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Failed::Quest_Failed()
{
}

const char* Quest_Failed::name() const
{
	return "Quest_Failed";
}

const char* Quest_Failed::doc() const
{
	return "Quest failed";
}

uint16_t Quest_Failed::id() const
{
	return packetID;
}

Buffer Quest_Failed::serialize() const
{
	return Buffer(0);
}

Quest_Request_Moveto_Portal::Quest_Request_Moveto_Portal(packet::vector _CurrSectorIndex)
	: CurrSectorIndex(_CurrSectorIndex)
{
}

const char* Quest_Request_Moveto_Portal::name() const
{
	return "Quest_Request_Moveto_Portal";
}

const char* Quest_Request_Moveto_Portal::doc() const
{
	return "Request Moveto Portal";
}

uint16_t Quest_Request_Moveto_Portal::id() const
{
	return packetID;
}

Buffer Quest_Request_Moveto_Portal::serialize() const
{
	Buffer serializedParameters[] = {
		CurrSectorIndex.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Moveto_Portal::Quest_Moveto_Portal(packet::vector _SectorIndex, packet::uint8 _RepeatIndex, packet::MUID _uidPlayer)
	: SectorIndex(_SectorIndex), RepeatIndex(_RepeatIndex), uidPlayer(_uidPlayer)
{
}

const char* Quest_Moveto_Portal::name() const
{
	return "Quest_Moveto_Portal";
}

const char* Quest_Moveto_Portal::doc() const
{
	return "Moveto Portal";
}

uint16_t Quest_Moveto_Portal::id() const
{
	return packetID;
}

Buffer Quest_Moveto_Portal::serialize() const
{
	Buffer serializedParameters[] = {
		SectorIndex.serialize(),
		RepeatIndex.serialize(),
		uidPlayer.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Readyto_NewSector::Quest_Readyto_NewSector(packet::MUID _uidPlayer)
	: uidPlayer(_uidPlayer)
{
}

const char* Quest_Readyto_NewSector::name() const
{
	return "Quest_Readyto_NewSector";
}

const char* Quest_Readyto_NewSector::doc() const
{
	return "Ready To New Sector";
}

uint16_t Quest_Readyto_NewSector::id() const
{
	return packetID;
}

Buffer Quest_Readyto_NewSector::serialize() const
{
	Buffer serializedParameters[] = {
		uidPlayer.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Peer_NPC_BasicInfo::Quest_Peer_NPC_BasicInfo(packet::blob _Info)
	: Info(_Info)
{
}

const char* Quest_Peer_NPC_BasicInfo::name() const
{
	return "Quest_Peer_NPC_BasicInfo";
}

const char* Quest_Peer_NPC_BasicInfo::doc() const
{
	return "NPC BasicInfo";
}

uint16_t Quest_Peer_NPC_BasicInfo::id() const
{
	return packetID;
}

Buffer Quest_Peer_NPC_BasicInfo::serialize() const
{
	Buffer serializedParameters[] = {
		Info.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Peer_NPC_HPInfo::Quest_Peer_NPC_HPInfo(packet::int32 _nNPCCount, packet::blob _HPTable)
	: nNPCCount(_nNPCCount), HPTable(_HPTable)
{
}

const char* Quest_Peer_NPC_HPInfo::name() const
{
	return "Quest_Peer_NPC_HPInfo";
}

const char* Quest_Peer_NPC_HPInfo::doc() const
{
	return "NPC HPInfo";
}

uint16_t Quest_Peer_NPC_HPInfo::id() const
{
	return packetID;
}

Buffer Quest_Peer_NPC_HPInfo::serialize() const
{
	Buffer serializedParameters[] = {
		nNPCCount.serialize(),
		HPTable.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Peer_NPC_Attack_Melee::Quest_Peer_NPC_Attack_Melee(packet::MUID _uidOwner)
	: uidOwner(_uidOwner)
{
}

const char* Quest_Peer_NPC_Attack_Melee::name() const
{
	return "Quest_Peer_NPC_Attack_Melee";
}

const char* Quest_Peer_NPC_Attack_Melee::doc() const
{
	return "NPC Melee Attack";
}

uint16_t Quest_Peer_NPC_Attack_Melee::id() const
{
	return packetID;
}

Buffer Quest_Peer_NPC_Attack_Melee::serialize() const
{
	Buffer serializedParameters[] = {
		uidOwner.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Peer_NPC_Attack_Range::Quest_Peer_NPC_Attack_Range(packet::MUID _uidOwner, packet::blob _Info)
	: uidOwner(_uidOwner), Info(_Info)
{
}

const char* Quest_Peer_NPC_Attack_Range::name() const
{
	return "Quest_Peer_NPC_Attack_Range";
}

const char* Quest_Peer_NPC_Attack_Range::doc() const
{
	return "NPC Range Attack";
}

uint16_t Quest_Peer_NPC_Attack_Range::id() const
{
	return packetID;
}

Buffer Quest_Peer_NPC_Attack_Range::serialize() const
{
	Buffer serializedParameters[] = {
		uidOwner.serialize(),
		Info.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Peer_NPC_Skill_Start::Quest_Peer_NPC_Skill_Start(packet::MUID _uidOwner, packet::int32 _nSkill, packet::MUID _uidTarget, packet::position _targetPos)
	: uidOwner(_uidOwner), nSkill(_nSkill), uidTarget(_uidTarget), targetPos(_targetPos)
{
}

const char* Quest_Peer_NPC_Skill_Start::name() const
{
	return "Quest_Peer_NPC_Skill_Start";
}

const char* Quest_Peer_NPC_Skill_Start::doc() const
{
	return "NPC Skill Start";
}

uint16_t Quest_Peer_NPC_Skill_Start::id() const
{
	return packetID;
}

Buffer Quest_Peer_NPC_Skill_Start::serialize() const
{
	Buffer serializedParameters[] = {
		uidOwner.serialize(),
		nSkill.serialize(),
		uidTarget.serialize(),
		targetPos.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Peer_NPC_Skill_Execute::Quest_Peer_NPC_Skill_Execute(packet::MUID _uidOwner, packet::int32 _nSkill, packet::MUID _uidTarget, packet::position _targetPos)
	: uidOwner(_uidOwner), nSkill(_nSkill), uidTarget(_uidTarget), targetPos(_targetPos)
{
}

const char* Quest_Peer_NPC_Skill_Execute::name() const
{
	return "Quest_Peer_NPC_Skill_Execute";
}

const char* Quest_Peer_NPC_Skill_Execute::doc() const
{
	return "NPC Skill Start";
}

uint16_t Quest_Peer_NPC_Skill_Execute::id() const
{
	return packetID;
}

Buffer Quest_Peer_NPC_Skill_Execute::serialize() const
{
	Buffer serializedParameters[] = {
		uidOwner.serialize(),
		nSkill.serialize(),
		uidTarget.serialize(),
		targetPos.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Peer_NPC_Dead::Quest_Peer_NPC_Dead(packet::MUID _uidKillerPlayer, packet::MUID _uidNPC)
	: uidKillerPlayer(_uidKillerPlayer), uidNPC(_uidNPC)
{
}

const char* Quest_Peer_NPC_Dead::name() const
{
	return "Quest_Peer_NPC_Dead";
}

const char* Quest_Peer_NPC_Dead::doc() const
{
	return "NPC Dead";
}

uint16_t Quest_Peer_NPC_Dead::id() const
{
	return packetID;
}

Buffer Quest_Peer_NPC_Dead::serialize() const
{
	Buffer serializedParameters[] = {
		uidKillerPlayer.serialize(),
		uidNPC.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Test_RequestNPCSpawn::Quest_Test_RequestNPCSpawn(packet::int32 _NPCType, packet::int32 _NPCCount)
	: NPCType(_NPCType), NPCCount(_NPCCount)
{
}

const char* Quest_Test_RequestNPCSpawn::name() const
{
	return "Quest_Test_RequestNPCSpawn";
}

const char* Quest_Test_RequestNPCSpawn::doc() const
{
	return "NPC Spawn";
}

uint16_t Quest_Test_RequestNPCSpawn::id() const
{
	return packetID;
}

Buffer Quest_Test_RequestNPCSpawn::serialize() const
{
	Buffer serializedParameters[] = {
		NPCType.serialize(),
		NPCCount.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Test_ClearNPC::Quest_Test_ClearNPC()
{
}

const char* Quest_Test_ClearNPC::name() const
{
	return "Quest_Test_ClearNPC";
}

const char* Quest_Test_ClearNPC::doc() const
{
	return "Clear NPC";
}

uint16_t Quest_Test_ClearNPC::id() const
{
	return packetID;
}

Buffer Quest_Test_ClearNPC::serialize() const
{
	return Buffer(0);
}

Quest_Test_SectorClear::Quest_Test_SectorClear()
{
}

const char* Quest_Test_SectorClear::name() const
{
	return "Quest_Test_SectorClear";
}

const char* Quest_Test_SectorClear::doc() const
{
	return "Sector Clear";
}

uint16_t Quest_Test_SectorClear::id() const
{
	return packetID;
}

Buffer Quest_Test_SectorClear::serialize() const
{
	return Buffer(0);
}

Quest_Test_Finish::Quest_Test_Finish()
{
}

const char* Quest_Test_Finish::name() const
{
	return "Quest_Test_Finish";
}

const char* Quest_Test_Finish::doc() const
{
	return "Finish Quest";
}

uint16_t Quest_Test_Finish::id() const
{
	return packetID;
}

Buffer Quest_Test_Finish::serialize() const
{
	return Buffer(0);
}

Admin_Announce::Admin_Announce(packet::MUID _uidAdmin, packet::string _Msg, packet::uint32 _MsgType)
	: uidAdmin(_uidAdmin), Msg(_Msg), MsgType(_MsgType)
{
}

const char* Admin_Announce::name() const
{
	return "Admin_Announce";
}

const char* Admin_Announce::doc() const
{
	return "Announce";
}

uint16_t Admin_Announce::id() const
{
	return packetID;
}

Buffer Admin_Announce::serialize() const
{
	Buffer serializedParameters[] = {
		uidAdmin.serialize(),
		Msg.serialize(),
		MsgType.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Admin_RequestBanPlayer::Admin_RequestBanPlayer(packet::MUID _uidAdmin, packet::string _uidTargetCharName)
	: uidAdmin(_uidAdmin), uidTargetCharName(_uidTargetCharName)
{
}

const char* Admin_RequestBanPlayer::name() const
{
	return "Admin_RequestBanPlayer";
}

const char* Admin_RequestBanPlayer::doc() const
{
	return "Request Ban Player";
}

uint16_t Admin_RequestBanPlayer::id() const
{
	return packetID;
}

Buffer Admin_RequestBanPlayer::serialize() const
{
	Buffer serializedParameters[] = {
		uidAdmin.serialize(),
		uidTargetCharName.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Admin_ResponseBanPlayer::Admin_ResponseBanPlayer(packet::int32 _Result)
	: Result(_Result)
{
}

const char* Admin_ResponseBanPlayer::name() const
{
	return "Admin_ResponseBanPlayer";
}

const char* Admin_ResponseBanPlayer::doc() const
{
	return "Response Ban Player";
}

uint16_t Admin_ResponseBanPlayer::id() const
{
	return packetID;
}

Buffer Admin_ResponseBanPlayer::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Admin_Hide::Admin_Hide()
{
}

const char* Admin_Hide::name() const
{
	return "Admin_Hide";
}

const char* Admin_Hide::doc() const
{
	return "Hide Admin Player";
}

uint16_t Admin_Hide::id() const
{
	return packetID;
}

Buffer Admin_Hide::serialize() const
{
	return Buffer(0);
}

MC_ADMIN_RESET_ALL_HACKING_BLOCK::MC_ADMIN_RESET_ALL_HACKING_BLOCK()
{
}

const char* MC_ADMIN_RESET_ALL_HACKING_BLOCK::name() const
{
	return "MC_ADMIN_RESET_ALL_HACKING_BLOCK";
}

const char* MC_ADMIN_RESET_ALL_HACKING_BLOCK::doc() const
{
	return "reset all hacking block";
}

uint16_t MC_ADMIN_RESET_ALL_HACKING_BLOCK::id() const
{
	return packetID;
}

Buffer MC_ADMIN_RESET_ALL_HACKING_BLOCK::serialize() const
{
	return Buffer(0);
}

MC_ADMIN_RELOAD_GAMBLEITEM::MC_ADMIN_RELOAD_GAMBLEITEM()
{
}

const char* MC_ADMIN_RELOAD_GAMBLEITEM::name() const
{
	return "MC_ADMIN_RELOAD_GAMBLEITEM";
}

const char* MC_ADMIN_RELOAD_GAMBLEITEM::doc() const
{
	return "reload gamble item info";
}

uint16_t MC_ADMIN_RELOAD_GAMBLEITEM::id() const
{
	return packetID;
}

Buffer MC_ADMIN_RELOAD_GAMBLEITEM::serialize() const
{
	return Buffer(0);
}

MC_ADMIN_ASSASIN::MC_ADMIN_ASSASIN()
{
}

const char* MC_ADMIN_ASSASIN::name() const
{
	return "MC_ADMIN_ASSASIN";
}

const char* MC_ADMIN_ASSASIN::doc() const
{
	return "choose admin as commander";
}

uint16_t MC_ADMIN_ASSASIN::id() const
{
	return packetID;
}

Buffer MC_ADMIN_ASSASIN::serialize() const
{
	return Buffer(0);
}

Agent_Connect::Agent_Connect(packet::string _Address, packet::int32 _Port)
	: Address(_Address), Port(_Port)
{
}

const char* Agent_Connect::name() const
{
	return "Agent_Connect";
}

const char* Agent_Connect::doc() const
{
	return "Connect Agent to MatchServer";
}

uint16_t Agent_Connect::id() const
{
	return packetID;
}

Buffer Agent_Connect::serialize() const
{
	Buffer serializedParameters[] = {
		Address.serialize(),
		Port.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Agent_Disconnect::Agent_Disconnect()
{
}

const char* Agent_Disconnect::name() const
{
	return "Agent_Disconnect";
}

const char* Agent_Disconnect::doc() const
{
	return "Unregister Agent from MatchServer";
}

uint16_t Agent_Disconnect::id() const
{
	return packetID;
}

Buffer Agent_Disconnect::serialize() const
{
	return Buffer(0);
}

Match_RegisterAgent::Match_RegisterAgent(packet::string _Address, packet::int32 _Port, packet::int32 _UDPPort)
	: Address(_Address), Port(_Port), UDPPort(_UDPPort)
{
}

const char* Match_RegisterAgent::name() const
{
	return "Match_RegisterAgent";
}

const char* Match_RegisterAgent::doc() const
{
	return "Register Agent to MatchServer";
}

uint16_t Match_RegisterAgent::id() const
{
	return packetID;
}

Buffer Match_RegisterAgent::serialize() const
{
	Buffer serializedParameters[] = {
		Address.serialize(),
		Port.serialize(),
		UDPPort.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_UnRegisterAgent::Match_UnRegisterAgent()
{
}

const char* Match_UnRegisterAgent::name() const
{
	return "Match_UnRegisterAgent";
}

const char* Match_UnRegisterAgent::doc() const
{
	return "Unregister Agent from MatchServer";
}

uint16_t Match_UnRegisterAgent::id() const
{
	return packetID;
}

Buffer Match_UnRegisterAgent::serialize() const
{
	return Buffer(0);
}

Match_Agent_RequestLiveCheck::Match_Agent_RequestLiveCheck(packet::uint32 _TimeStamp, packet::uint32 _StageCount, packet::uint32 _UserCount)
	: TimeStamp(_TimeStamp), StageCount(_StageCount), UserCount(_UserCount)
{
}

const char* Match_Agent_RequestLiveCheck::name() const
{
	return "Match_Agent_RequestLiveCheck";
}

const char* Match_Agent_RequestLiveCheck::doc() const
{
	return "Request LiveCheck for Agent";
}

uint16_t Match_Agent_RequestLiveCheck::id() const
{
	return packetID;
}

Buffer Match_Agent_RequestLiveCheck::serialize() const
{
	Buffer serializedParameters[] = {
		TimeStamp.serialize(),
		StageCount.serialize(),
		UserCount.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Match_Agent_ResponseLiveCheck::Match_Agent_ResponseLiveCheck(packet::uint32 _TimeStamp)
	: TimeStamp(_TimeStamp)
{
}

const char* Match_Agent_ResponseLiveCheck::name() const
{
	return "Match_Agent_ResponseLiveCheck";
}

const char* Match_Agent_ResponseLiveCheck::doc() const
{
	return "Response LiveCheck for Agent";
}

uint16_t Match_Agent_ResponseLiveCheck::id() const
{
	return packetID;
}

Buffer Match_Agent_ResponseLiveCheck::serialize() const
{
	Buffer serializedParameters[] = {
		TimeStamp.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Agent_StageReserve::Agent_StageReserve(packet::MUID _StageUID)
	: StageUID(_StageUID)
{
}

const char* Agent_StageReserve::name() const
{
	return "Agent_StageReserve";
}

const char* Agent_StageReserve::doc() const
{
	return "Reserve stage on AgentServer";
}

uint16_t Agent_StageReserve::id() const
{
	return packetID;
}

Buffer Agent_StageReserve::serialize() const
{
	Buffer serializedParameters[] = {
		StageUID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Agent_StageRelease::Agent_StageRelease(packet::MUID _StageUID)
	: StageUID(_StageUID)
{
}

const char* Agent_StageRelease::name() const
{
	return "Agent_StageRelease";
}

const char* Agent_StageRelease::doc() const
{
	return "Release stage on AgentServer";
}

uint16_t Agent_StageRelease::id() const
{
	return packetID;
}

Buffer Agent_StageRelease::serialize() const
{
	Buffer serializedParameters[] = {
		StageUID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Agent_StageReady::Agent_StageReady(packet::MUID _StageUID)
	: StageUID(_StageUID)
{
}

const char* Agent_StageReady::name() const
{
	return "Agent_StageReady";
}

const char* Agent_StageReady::doc() const
{
	return "Ready to Handle stage";
}

uint16_t Agent_StageReady::id() const
{
	return packetID;
}

Buffer Agent_StageReady::serialize() const
{
	Buffer serializedParameters[] = {
		StageUID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Agent_RelayPeer::Agent_RelayPeer(packet::MUID _PlayerUID, packet::MUID _PeerCharUID, packet::MUID _StageUID)
	: PlayerUID(_PlayerUID), PeerCharUID(_PeerCharUID), StageUID(_StageUID)
{
}

const char* Agent_RelayPeer::name() const
{
	return "Agent_RelayPeer";
}

const char* Agent_RelayPeer::doc() const
{
	return "Let agent to Relay Peer";
}

uint16_t Agent_RelayPeer::id() const
{
	return packetID;
}

Buffer Agent_RelayPeer::serialize() const
{
	Buffer serializedParameters[] = {
		PlayerUID.serialize(),
		PeerCharUID.serialize(),
		StageUID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Questitem::Questitem(packet::MUID _uid)
	: uid(_uid)
{
}

const char* Questitem::name() const
{
	return "Questitem";
}

const char* Questitem::doc() const
{
	return "Request my quest item list";
}

uint16_t Questitem::id() const
{
	return packetID;
}

Buffer Questitem::serialize() const
{
	Buffer serializedParameters[] = {
		uid.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_item_response::Quest_item_response(packet::blob _Myquestitemlist)
	: Myquestitemlist(_Myquestitemlist)
{
}

const char* Quest_item_response::name() const
{
	return "Quest_item_response";
}

const char* Quest_item_response::doc() const
{
	return "Response my quest item list";
}

uint16_t Quest_item_response::id() const
{
	return packetID;
}

Buffer Quest_item_response::serialize() const
{
	Buffer serializedParameters[] = {
		Myquestitemlist.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_item_buy::Quest_item_buy(packet::MUID _uidChar, packet::int32 _QuestItemID)
	: uidChar(_uidChar), QuestItemID(_QuestItemID)
{
}

const char* Quest_item_buy::name() const
{
	return "Quest_item_buy";
}

const char* Quest_item_buy::doc() const
{
	return "Request buy quest item";
}

uint16_t Quest_item_buy::id() const
{
	return packetID;
}

Buffer Quest_item_buy::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize(),
		QuestItemID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_item_responsebuy::Quest_item_responsebuy(packet::int32 _Result, packet::int32 _PlayerBounty)
	: Result(_Result), PlayerBounty(_PlayerBounty)
{
}

const char* Quest_item_responsebuy::name() const
{
	return "Quest_item_responsebuy";
}

const char* Quest_item_responsebuy::doc() const
{
	return "Response buy quest item";
}

uint16_t Quest_item_responsebuy::id() const
{
	return packetID;
}

Buffer Quest_item_responsebuy::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize(),
		PlayerBounty.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_item_sell::Quest_item_sell(packet::MUID _uidChar, packet::int32 _QuestItemID, packet::int32 _Count)
	: uidChar(_uidChar), QuestItemID(_QuestItemID), Count(_Count)
{
}

const char* Quest_item_sell::name() const
{
	return "Quest_item_sell";
}

const char* Quest_item_sell::doc() const
{
	return "Request sell quest item";
}

uint16_t Quest_item_sell::id() const
{
	return packetID;
}

Buffer Quest_item_sell::serialize() const
{
	Buffer serializedParameters[] = {
		uidChar.serialize(),
		QuestItemID.serialize(),
		Count.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_item_responsesell::Quest_item_responsesell(packet::int32 _Result, packet::int32 _PlayerBounty)
	: Result(_Result), PlayerBounty(_PlayerBounty)
{
}

const char* Quest_item_responsesell::name() const
{
	return "Quest_item_responsesell";
}

const char* Quest_item_responsesell::doc() const
{
	return "Response sell quest item";
}

uint16_t Quest_item_responsesell::id() const
{
	return packetID;
}

Buffer Quest_item_responsesell::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize(),
		PlayerBounty.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Reward::Quest_Reward(packet::int32 _XP, packet::int32 _Bounty, packet::blob _Rewardquestitem, packet::blob _RewardZItem)
	: XP(_XP), Bounty(_Bounty), Rewardquestitem(_Rewardquestitem), RewardZItem(_RewardZItem)
{
}

const char* Quest_Reward::name() const
{
	return "Quest_Reward";
}

const char* Quest_Reward::doc() const
{
	return "Quest reward.";
}

uint16_t Quest_Reward::id() const
{
	return packetID;
}

Buffer Quest_Reward::serialize() const
{
	Buffer serializedParameters[] = {
		XP.serialize(),
		Bounty.serialize(),
		Rewardquestitem.serialize(),
		RewardZItem.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Request_Sacrifice::Quest_Request_Sacrifice(packet::MUID _Dropitemowner, packet::int32 _Slotindex, packet::int32 _ItemID)
	: Dropitemowner(_Dropitemowner), Slotindex(_Slotindex), ItemID(_ItemID)
{
}

const char* Quest_Request_Sacrifice::name() const
{
	return "Quest_Request_Sacrifice";
}

const char* Quest_Request_Sacrifice::doc() const
{
	return "Request drop sacrifice item";
}

uint16_t Quest_Request_Sacrifice::id() const
{
	return packetID;
}

Buffer Quest_Request_Sacrifice::serialize() const
{
	Buffer serializedParameters[] = {
		Dropitemowner.serialize(),
		Slotindex.serialize(),
		ItemID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Response_Sacrifice::Quest_Response_Sacrifice(packet::int32 _Result, packet::MUID _requesterofdropsacrificeitem_, packet::int32 _Slotindex, packet::int32 _ItemID)
	: Result(_Result), requesterofdropsacrificeitem_(_requesterofdropsacrificeitem_), Slotindex(_Slotindex), ItemID(_ItemID)
{
}

const char* Quest_Response_Sacrifice::name() const
{
	return "Quest_Response_Sacrifice";
}

const char* Quest_Response_Sacrifice::doc() const
{
	return "Response drop sacrifice item";
}

uint16_t Quest_Response_Sacrifice::id() const
{
	return packetID;
}

Buffer Quest_Response_Sacrifice::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize(),
		requesterofdropsacrificeitem_.serialize(),
		Slotindex.serialize(),
		ItemID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Callback_Sacrifice::Quest_Callback_Sacrifice(packet::MUID _Callbackitemrequester, packet::int32 _Slotindex, packet::int32 _ItemID)
	: Callbackitemrequester(_Callbackitemrequester), Slotindex(_Slotindex), ItemID(_ItemID)
{
}

const char* Quest_Callback_Sacrifice::name() const
{
	return "Quest_Callback_Sacrifice";
}

const char* Quest_Callback_Sacrifice::doc() const
{
	return "Request callback sacrifice item";
}

uint16_t Quest_Callback_Sacrifice::id() const
{
	return packetID;
}

Buffer Quest_Callback_Sacrifice::serialize() const
{
	Buffer serializedParameters[] = {
		Callbackitemrequester.serialize(),
		Slotindex.serialize(),
		ItemID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Callback_Result::Quest_Callback_Result(packet::int32 _Result, packet::MUID _requesterofcallbacksacrificeitem_, packet::int32 _Slotindex, packet::int32 _ItemID)
	: Result(_Result), requesterofcallbacksacrificeitem_(_requesterofcallbacksacrificeitem_), Slotindex(_Slotindex), ItemID(_ItemID)
{
}

const char* Quest_Callback_Result::name() const
{
	return "Quest_Callback_Result";
}

const char* Quest_Callback_Result::doc() const
{
	return "Request callback sacrifice item";
}

uint16_t Quest_Callback_Result::id() const
{
	return packetID;
}

Buffer Quest_Callback_Result::serialize() const
{
	Buffer serializedParameters[] = {
		Result.serialize(),
		requesterofcallbacksacrificeitem_.serialize(),
		Slotindex.serialize(),
		ItemID.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Request_SlotInfo::Quest_Request_SlotInfo(packet::MUID _Sender)
	: Sender(_Sender)
{
}

const char* Quest_Request_SlotInfo::name() const
{
	return "Quest_Request_SlotInfo";
}

const char* Quest_Request_SlotInfo::doc() const
{
	return "Request slot info";
}

uint16_t Quest_Request_SlotInfo::id() const
{
	return packetID;
}

Buffer Quest_Request_SlotInfo::serialize() const
{
	Buffer serializedParameters[] = {
		Sender.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Resonse_SlotInfo::Quest_Resonse_SlotInfo(packet::MUID _Owner1, packet::int32 _ItemID1, packet::MUID _Owner2, packet::int32 _ItemID2)
	: Owner1(_Owner1), ItemID1(_ItemID1), Owner2(_Owner2), ItemID2(_ItemID2)
{
}

const char* Quest_Resonse_SlotInfo::name() const
{
	return "Quest_Resonse_SlotInfo";
}

const char* Quest_Resonse_SlotInfo::doc() const
{
	return "Response slot info";
}

uint16_t Quest_Resonse_SlotInfo::id() const
{
	return packetID;
}

Buffer Quest_Resonse_SlotInfo::serialize() const
{
	Buffer serializedParameters[] = {
		Owner1.serialize(),
		ItemID1.serialize(),
		Owner2.serialize(),
		ItemID2.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_RequestLevel::Quest_RequestLevel(packet::MUID _sender)
	: sender(_sender)
{
}

const char* Quest_RequestLevel::name() const
{
	return "Quest_RequestLevel";
}

const char* Quest_RequestLevel::doc() const
{
	return "Request stage quest level";
}

uint16_t Quest_RequestLevel::id() const
{
	return packetID;
}

Buffer Quest_RequestLevel::serialize() const
{
	Buffer serializedParameters[] = {
		sender.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_ResponseLevel::Quest_ResponseLevel(packet::int32 _Questlevel)
	: Questlevel(_Questlevel)
{
}

const char* Quest_ResponseLevel::name() const
{
	return "Quest_ResponseLevel";
}

const char* Quest_ResponseLevel::doc() const
{
	return "Response stage quest level";
}

uint16_t Quest_ResponseLevel::id() const
{
	return packetID;
}

Buffer Quest_ResponseLevel::serialize() const
{
	Buffer serializedParameters[] = {
		Questlevel.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Survival_Result::Quest_Survival_Result(packet::int32 _Reachedround, packet::int32 _Point)
	: Reachedround(_Reachedround), Point(_Point)
{
}

const char* Quest_Survival_Result::name() const
{
	return "Quest_Survival_Result";
}

const char* Quest_Survival_Result::doc() const
{
	return "Send survival result";
}

uint16_t Quest_Survival_Result::id() const
{
	return packetID;
}

Buffer Quest_Survival_Result::serialize() const
{
	Buffer serializedParameters[] = {
		Reachedround.serialize(),
		Point.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Survival_Ranking::Quest_Survival_Ranking(packet::blob _Rankinglist)
	: Rankinglist(_Rankinglist)
{
}

const char* Quest_Survival_Ranking::name() const
{
	return "Quest_Survival_Ranking";
}

const char* Quest_Survival_Ranking::doc() const
{
	return "Send survival top ranking list";
}

uint16_t Quest_Survival_Ranking::id() const
{
	return packetID;
}

Buffer Quest_Survival_Ranking::serialize() const
{
	Buffer serializedParameters[] = {
		Rankinglist.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Survuval_PrivateRanking::Quest_Survuval_PrivateRanking(packet::uint32 _Rank, packet::uint32 _Point)
	: Rank(_Rank), Point(_Point)
{
}

const char* Quest_Survuval_PrivateRanking::name() const
{
	return "Quest_Survuval_PrivateRanking";
}

const char* Quest_Survuval_PrivateRanking::doc() const
{
	return "Send survival private ranking";
}

uint16_t Quest_Survuval_PrivateRanking::id() const
{
	return packetID;
}

Buffer Quest_Survuval_PrivateRanking::serialize() const
{
	Buffer serializedParameters[] = {
		Rank.serialize(),
		Point.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Start_Fail::Quest_Start_Fail(packet::int32 _Failedtype_, packet::MUID _pairparam)
	: Failedtype_(_Failedtype_), pairparam(_pairparam)
{
}

const char* Quest_Start_Fail::name() const
{
	return "Quest_Start_Fail";
}

const char* Quest_Start_Fail::doc() const
{
	return "Failed start quest.";
}

uint16_t Quest_Start_Fail::id() const
{
	return packetID;
}

Buffer Quest_Start_Fail::serialize() const
{
	Buffer serializedParameters[] = {
		Failedtype_.serialize(),
		pairparam.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

monsterinfo::monsterinfo(packet::vector _monsterdbindex)
	: monsterdbindex(_monsterdbindex)
{
}

const char* monsterinfo::name() const
{
	return "monsterinfo";
}

const char* monsterinfo::doc() const
{
	return "monster info";
}

uint16_t monsterinfo::id() const
{
	return packetID;
}

Buffer monsterinfo::serialize() const
{
	Buffer serializedParameters[] = {
		monsterdbindex.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Bible_Request::Quest_Bible_Request(packet::MUID _requester)
	: requester(_requester)
{
}

const char* Quest_Bible_Request::name() const
{
	return "Quest_Bible_Request";
}

const char* Quest_Bible_Request::doc() const
{
	return "request monster bible info";
}

uint16_t Quest_Bible_Request::id() const
{
	return packetID;
}

Buffer Quest_Bible_Request::serialize() const
{
	Buffer serializedParameters[] = {
		requester.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

Quest_Bible_Response::Quest_Bible_Response(packet::MUID _requester, packet::blob _Monsterbibleinfo)
	: requester(_requester), Monsterbibleinfo(_Monsterbibleinfo)
{
}

const char* Quest_Bible_Response::name() const
{
	return "Quest_Bible_Response";
}

const char* Quest_Bible_Response::doc() const
{
	return "response monster bible info";
}

uint16_t Quest_Bible_Response::id() const
{
	return packetID;
}

Buffer Quest_Bible_Response::serialize() const
{
	Buffer serializedParameters[] = {
		requester.serialize(),
		Monsterbibleinfo.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

MC_REQUEST_GIVE_ONESELF_UP::MC_REQUEST_GIVE_ONESELF_UP()
{
}

const char* MC_REQUEST_GIVE_ONESELF_UP::name() const
{
	return "MC_REQUEST_GIVE_ONESELF_UP";
}

const char* MC_REQUEST_GIVE_ONESELF_UP::doc() const
{
	return "give oneself up";
}

uint16_t MC_REQUEST_GIVE_ONESELF_UP::id() const
{
	return packetID;
}

Buffer MC_REQUEST_GIVE_ONESELF_UP::serialize() const
{
	return Buffer(0);
}

MC_RESPONSE_GAMBLEITEMLIST::MC_RESPONSE_GAMBLEITEMLIST(packet::blob _Gambleitemlist)
	: Gambleitemlist(_Gambleitemlist)
{
}

const char* MC_RESPONSE_GAMBLEITEMLIST::name() const
{
	return "MC_RESPONSE_GAMBLEITEMLIST";
}

const char* MC_RESPONSE_GAMBLEITEMLIST::doc() const
{
	return "send gamble item info list to client";
}

uint16_t MC_RESPONSE_GAMBLEITEMLIST::id() const
{
	return packetID;
}

Buffer MC_RESPONSE_GAMBLEITEMLIST::serialize() const
{
	Buffer serializedParameters[] = {
		Gambleitemlist.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

MC_MATCH_ROUTE_UPDATE_STAGE_EQUIP_LOOK::MC_MATCH_ROUTE_UPDATE_STAGE_EQUIP_LOOK(packet::MUID _useruid, packet::int32 _parts, packet::int32 _itemid)
	: useruid(_useruid), parts(_parts), itemid(_itemid)
{
}

const char* MC_MATCH_ROUTE_UPDATE_STAGE_EQUIP_LOOK::name() const
{
	return "MC_MATCH_ROUTE_UPDATE_STAGE_EQUIP_LOOK";
}

const char* MC_MATCH_ROUTE_UPDATE_STAGE_EQUIP_LOOK::doc() const
{
	return "route updated user equip info";
}

uint16_t MC_MATCH_ROUTE_UPDATE_STAGE_EQUIP_LOOK::id() const
{
	return packetID;
}

Buffer MC_MATCH_ROUTE_UPDATE_STAGE_EQUIP_LOOK::serialize() const
{
	Buffer serializedParameters[] = {
		useruid.serialize(),
		parts.serialize(),
		itemid.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

MC_REQUEST_RESOURCE_CRC32::MC_REQUEST_RESOURCE_CRC32(packet::uint32 _key)
	: key(_key)
{
}

const char* MC_REQUEST_RESOURCE_CRC32::name() const
{
	return "MC_REQUEST_RESOURCE_CRC32";
}

const char* MC_REQUEST_RESOURCE_CRC32::doc() const
{
	return "MC_REQUEST_RESOURCE_CRC32";
}

uint16_t MC_REQUEST_RESOURCE_CRC32::id() const
{
	return packetID;
}

Buffer MC_REQUEST_RESOURCE_CRC32::serialize() const
{
	Buffer serializedParameters[] = {
		key.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

MC_RESPONSE_RESOURCE_CRC32::MC_RESPONSE_RESOURCE_CRC32(packet::uint32 _crc32)
	: crc32(_crc32)
{
}

const char* MC_RESPONSE_RESOURCE_CRC32::name() const
{
	return "MC_RESPONSE_RESOURCE_CRC32";
}

const char* MC_RESPONSE_RESOURCE_CRC32::doc() const
{
	return "MC_RESPONSE_RESOURCE_CRC32";
}

uint16_t MC_RESPONSE_RESOURCE_CRC32::id() const
{
	return packetID;
}

Buffer MC_RESPONSE_RESOURCE_CRC32::serialize() const
{
	Buffer serializedParameters[] = {
		crc32.serialize()
	};

	return merge_parameters(serializedParameters, countof(serializedParameters));
}

}
}
}